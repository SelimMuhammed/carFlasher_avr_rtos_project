
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000046a6  0000473a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  0080006c  0080006c  00004746  2**0
                  ALLOC
  3 .stab         0000486c  00000000  00000000  00004748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004181  00000000  00000000  00008fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d135  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d275  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ff19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000110b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_1>
       8:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_4>
      14:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_5>
      18:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_6>
      1c:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_7>
      20:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_8>
      24:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_9>
      28:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__vector_10>
      2c:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 21 	call	0x4248	; 0x4248 <main>
      8a:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 36 23 	jmp	0x466c	; 0x466c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 36 23 	jmp	0x466c	; 0x466c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 46 23 	jmp	0x468c	; 0x468c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <RTOS_voidStart>:
CreateTask_FuncArgus System_Tasks[TASK_NUM]={{NULL}};



void RTOS_voidStart(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	timer_config_type RTOS_TimerConfig;
	RTOS_TimerConfig.timer = TIMER_0;
     b5a:	1a 86       	std	Y+10, r1	; 0x0a
	RTOS_TimerConfig.operated_mode = CTC_MODE;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	89 87       	std	Y+9, r24	; 0x09
	RTOS_TimerConfig.compared_value = TIMER0_u8_COMP_MATCH_VAL;
     b60:	8d e7       	ldi	r24, 0x7D	; 125
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
	RTOS_TimerConfig.T0_T1_used_freq = TIMER_0_1_PRE_SCALER_e_64;
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	8f 83       	std	Y+7, r24	; 0x07

	Set_CallBack_TIMER_0_OC_INT(&RTOS_voidScheduler);
     b6c:	85 e8       	ldi	r24, 0x85	; 133
     b6e:	96 e0       	ldi	r25, 0x06	; 6
     b70:	0e 94 6a 07 	call	0xed4	; 0xed4 <Set_CallBack_TIMER_0_OC_INT>
	Global_VidINTEnable();
     b74:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Global_VidINTEnable>
	Timer_init(&RTOS_TimerConfig);
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 9a 09 	call	0x1334	; 0x1334 <Timer_init>

}
     b80:	2b 96       	adiw	r28, 0x0b	; 11
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <RTOS_u8CreateTask>:

u8 RTOS_u8CreateTask(CreateTask_FuncArgus * FuncArgus)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	00 d0       	rcall	.+0      	; 0xb98 <RTOS_u8CreateTask+0x6>
     b98:	0f 92       	push	r0
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9b 83       	std	Y+3, r25	; 0x03
     ba0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	89 83       	std	Y+1, r24	; 0x01
	/*Check if the required priority is empty or used before for another task*/
	if(System_Tasks[FuncArgus->Copy_u8Priority].Copy_pvTaskFunc == NULL)
     ba6:	ea 81       	ldd	r30, Y+2	; 0x02
     ba8:	fb 81       	ldd	r31, Y+3	; 0x03
     baa:	83 81       	ldd	r24, Z+3	; 0x03
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	fc 01       	movw	r30, r24
     bbe:	e4 59       	subi	r30, 0x94	; 148
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	09 f0       	breq	.+2      	; 0xbcc <RTOS_u8CreateTask+0x3a>
     bca:	4e c0       	rjmp	.+156    	; 0xc68 <RTOS_u8CreateTask+0xd6>
	{
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_u16Periodicity = FuncArgus->Copy_u16Periodicity;
     bcc:	ea 81       	ldd	r30, Y+2	; 0x02
     bce:	fb 81       	ldd	r31, Y+3	; 0x03
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	ea 81       	ldd	r30, Y+2	; 0x02
     bd8:	fb 81       	ldd	r31, Y+3	; 0x03
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	fc 01       	movw	r30, r24
     bee:	e4 59       	subi	r30, 0x94	; 148
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_pvTaskFunc = FuncArgus->Copy_pvTaskFunc;
     bf6:	ea 81       	ldd	r30, Y+2	; 0x02
     bf8:	fb 81       	ldd	r31, Y+3	; 0x03
     bfa:	83 81       	ldd	r24, Z+3	; 0x03
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	ea 81       	ldd	r30, Y+2	; 0x02
     c02:	fb 81       	ldd	r31, Y+3	; 0x03
     c04:	20 81       	ld	r18, Z
     c06:	31 81       	ldd	r19, Z+1	; 0x01
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	e4 59       	subi	r30, 0x94	; 148
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	31 83       	std	Z+1, r19	; 0x01
     c1c:	20 83       	st	Z, r18
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_u8State = TASK_RESUMED;      //Initialize the task state
     c1e:	ea 81       	ldd	r30, Y+2	; 0x02
     c20:	fb 81       	ldd	r31, Y+3	; 0x03
     c22:	83 81       	ldd	r24, Z+3	; 0x03
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	fc 01       	movw	r30, r24
     c38:	e4 59       	subi	r30, 0x94	; 148
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	10 82       	st	Z, r1
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_u16FirstDelay = FuncArgus->Copy_u16FirstDelay;
     c3e:	ea 81       	ldd	r30, Y+2	; 0x02
     c40:	fb 81       	ldd	r31, Y+3	; 0x03
     c42:	83 81       	ldd	r24, Z+3	; 0x03
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	ea 81       	ldd	r30, Y+2	; 0x02
     c4a:	fb 81       	ldd	r31, Y+3	; 0x03
     c4c:	26 81       	ldd	r18, Z+6	; 0x06
     c4e:	37 81       	ldd	r19, Z+7	; 0x07
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	fc 01       	movw	r30, r24
     c5e:	ee 58       	subi	r30, 0x8E	; 142
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	31 83       	std	Z+1, r19	; 0x01
     c64:	20 83       	st	Z, r18
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <RTOS_u8CreateTask+0xd8>
	}
	else
	{
		/*Priority is reserved before, don't create the task*/
		Local_u8ErrorState = NOK;
     c68:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <RTOS_voidSuspendTask>:

void RTOS_voidSuspendTask(u8 Copy_u8Priority)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	89 83       	std	Y+1, r24	; 0x01
	System_Tasks[Copy_u8Priority].Copy_u8State = TASK_SUSPENDED;
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	fc 01       	movw	r30, r24
     c9a:	e4 59       	subi	r30, 0x94	; 148
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 83       	st	Z, r24
}
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Copy_u8Priority)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	0f 92       	push	r0
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	89 83       	std	Y+1, r24	; 0x01
	System_Tasks[Copy_u8Priority].Copy_u8State = TASK_RESUMED;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	fc 01       	movw	r30, r24
     ccc:	e4 59       	subi	r30, 0x94	; 148
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	10 82       	st	Z, r1
}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <RTOS_voidDeleteTask>:

void RTOS_voidDeleteTask(u8 Copy_u8Priority)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01
	System_Tasks[Copy_u8Priority].Copy_pvTaskFunc = NULL;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e4 59       	subi	r30, 0x94	; 148
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	11 82       	std	Z+1, r1	; 0x01
     d00:	10 82       	st	Z, r1
}
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <RTOS_voidScheduler>:

static void RTOS_voidScheduler(void)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TaskCounter;

	/*
	 * Loop on all tasks to check their periodicity
	 */
	for(Local_u8TaskCounter=0 ; Local_u8TaskCounter<TASK_NUM ; Local_u8TaskCounter++)
     d14:	19 82       	std	Y+1, r1	; 0x01
     d16:	86 c0       	rjmp	.+268    	; 0xe24 <RTOS_voidScheduler+0x11a>
	{
		/*Check if the task suspended or not*/
		if(System_Tasks[Local_u8TaskCounter].Copy_u8State == TASK_RESUMED)
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	fc 01       	movw	r30, r24
     d2e:	e4 59       	subi	r30, 0x94	; 148
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 81       	ld	r24, Z
     d34:	88 23       	and	r24, r24
     d36:	09 f0       	breq	.+2      	; 0xd3a <RTOS_voidScheduler+0x30>
     d38:	72 c0       	rjmp	.+228    	; 0xe1e <RTOS_voidScheduler+0x114>
		{
			if(( System_Tasks[Local_u8TaskCounter].Copy_u16FirstDelay)==0)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	fc 01       	movw	r30, r24
     d4e:	ee 58       	subi	r30, 0x8E	; 142
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	09 f0       	breq	.+2      	; 0xd5c <RTOS_voidScheduler+0x52>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <RTOS_voidScheduler+0xd8>
			{
				/*Invoke The Task Function*/
				if(System_Tasks[Local_u8TaskCounter].Copy_pvTaskFunc != NULL)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	fc 01       	movw	r30, r24
     d70:	e4 59       	subi	r30, 0x94	; 148
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	09 f4       	brne	.+2      	; 0xd7e <RTOS_voidScheduler+0x74>
     d7c:	50 c0       	rjmp	.+160    	; 0xe1e <RTOS_voidScheduler+0x114>
				{
					System_Tasks[Local_u8TaskCounter].Copy_pvTaskFunc();
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	fc 01       	movw	r30, r24
     d92:	e4 59       	subi	r30, 0x94	; 148
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	01 90       	ld	r0, Z+
     d98:	f0 81       	ld	r31, Z
     d9a:	e0 2d       	mov	r30, r0
     d9c:	09 95       	icall

					/*Assign The first delay parameter to periodicity minus 1*/
					System_Tasks[Local_u8TaskCounter].Copy_u16FirstDelay = ((System_Tasks[Local_u8TaskCounter].Copy_u16Periodicity)-1);
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	48 2f       	mov	r20, r24
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	fc 01       	movw	r30, r24
     dba:	e4 59       	subi	r30, 0x94	; 148
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	9c 01       	movw	r18, r24
     dc4:	21 50       	subi	r18, 0x01	; 1
     dc6:	30 40       	sbci	r19, 0x00	; 0
     dc8:	ca 01       	movw	r24, r20
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	fc 01       	movw	r30, r24
     dd8:	ee 58       	subi	r30, 0x8E	; 142
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	31 83       	std	Z+1, r19	; 0x01
     dde:	20 83       	st	Z, r18
     de0:	1e c0       	rjmp	.+60     	; 0xe1e <RTOS_voidScheduler+0x114>
				}
			}
			else
			{
				/*Decrement The first delay*/
				(System_Tasks[Local_u8TaskCounter].Copy_u16FirstDelay)--;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	c9 01       	movw	r24, r18
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	fc 01       	movw	r30, r24
     df8:	ee 58       	subi	r30, 0x8E	; 142
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	ac 01       	movw	r20, r24
     e02:	41 50       	subi	r20, 0x01	; 1
     e04:	50 40       	sbci	r21, 0x00	; 0
     e06:	c9 01       	movw	r24, r18
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	fc 01       	movw	r30, r24
     e16:	ee 58       	subi	r30, 0x8E	; 142
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	51 83       	std	Z+1, r21	; 0x01
     e1c:	40 83       	st	Z, r20
	u8 Local_u8TaskCounter;

	/*
	 * Loop on all tasks to check their periodicity
	 */
	for(Local_u8TaskCounter=0 ; Local_u8TaskCounter<TASK_NUM ; Local_u8TaskCounter++)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	86 30       	cpi	r24, 0x06	; 6
     e28:	08 f4       	brcc	.+2      	; 0xe2c <RTOS_voidScheduler+0x122>
     e2a:	76 cf       	rjmp	.-276    	; 0xd18 <RTOS_voidScheduler+0xe>
		{
			//Task is suspended,do Nothing
		}

	}
}
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <Set_CallBack_TIMER_0_OVF_INT>:




void Set_CallBack_TIMER_0_OVF_INT(void (*ptr)(void))
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <Set_CallBack_TIMER_0_OVF_INT+0x6>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	41 f0       	breq	.+16     	; 0xe5a <Set_CallBack_TIMER_0_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_0_OVF_INT = ptr;
     e4a:	e0 91 a4 00 	lds	r30, 0x00A4
     e4e:	f0 91 a5 00 	lds	r31, 0x00A5
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	80 83       	st	Z, r24
	}
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <__vector_11>:
void __vector_11 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_11 (void)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_0_OVF_INT != NULL)
     e8e:	e0 91 a4 00 	lds	r30, 0x00A4
     e92:	f0 91 a5 00 	lds	r31, 0x00A5
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	41 f0       	breq	.+16     	; 0xeae <__vector_11+0x4a>
	{
		TIMER_ISR->TIMER_0_OVF_INT();
     e9e:	e0 91 a4 00 	lds	r30, 0x00A4
     ea2:	f0 91 a5 00 	lds	r31, 0x00A5
     ea6:	01 90       	ld	r0, Z+
     ea8:	f0 81       	ld	r31, Z
     eaa:	e0 2d       	mov	r30, r0
     eac:	09 95       	icall
	}
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	bf 91       	pop	r27
     eb8:	af 91       	pop	r26
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	7f 91       	pop	r23
     ec0:	6f 91       	pop	r22
     ec2:	5f 91       	pop	r21
     ec4:	4f 91       	pop	r20
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <Set_CallBack_TIMER_0_OC_INT>:

void Set_CallBack_TIMER_0_OC_INT(void (*ptr)(void))
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Set_CallBack_TIMER_0_OC_INT+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	41 f0       	breq	.+16     	; 0xefa <Set_CallBack_TIMER_0_OC_INT+0x26>
	{
		TIMER_ISR->TIMER_0_OC_INT = ptr;
     eea:	e0 91 a4 00 	lds	r30, 0x00A4
     eee:	f0 91 a5 00 	lds	r31, 0x00A5
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	93 83       	std	Z+3, r25	; 0x03
     ef8:	82 83       	std	Z+2, r24	; 0x02
	}
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <__vector_10>:
void __vector_10 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_10 (void)
{
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_0_OC_INT != NULL)
     f2e:	e0 91 a4 00 	lds	r30, 0x00A4
     f32:	f0 91 a5 00 	lds	r31, 0x00A5
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	41 f0       	breq	.+16     	; 0xf4e <__vector_10+0x4a>
	{
		TIMER_ISR->TIMER_0_OC_INT();
     f3e:	e0 91 a4 00 	lds	r30, 0x00A4
     f42:	f0 91 a5 00 	lds	r31, 0x00A5
     f46:	02 80       	ldd	r0, Z+2	; 0x02
     f48:	f3 81       	ldd	r31, Z+3	; 0x03
     f4a:	e0 2d       	mov	r30, r0
     f4c:	09 95       	icall
	}
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <Set_CallBack_TIMER_1_OVF_INT>:




void Set_CallBack_TIMER_1_OVF_INT(void (*ptr)(void))
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <Set_CallBack_TIMER_1_OVF_INT+0x6>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	41 f0       	breq	.+16     	; 0xf9a <Set_CallBack_TIMER_1_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OVF_INT = ptr;
     f8a:	e0 91 a4 00 	lds	r30, 0x00A4
     f8e:	f0 91 a5 00 	lds	r31, 0x00A5
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	95 83       	std	Z+5, r25	; 0x05
     f98:	84 83       	std	Z+4, r24	; 0x04
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <__vector_9>:
void __vector_9 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OVF_INT != NULL)
     fce:	e0 91 a4 00 	lds	r30, 0x00A4
     fd2:	f0 91 a5 00 	lds	r31, 0x00A5
     fd6:	84 81       	ldd	r24, Z+4	; 0x04
     fd8:	95 81       	ldd	r25, Z+5	; 0x05
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	41 f0       	breq	.+16     	; 0xfee <__vector_9+0x4a>
	{
		TIMER_ISR->TIMER_1_OVF_INT();
     fde:	e0 91 a4 00 	lds	r30, 0x00A4
     fe2:	f0 91 a5 00 	lds	r31, 0x00A5
     fe6:	04 80       	ldd	r0, Z+4	; 0x04
     fe8:	f5 81       	ldd	r31, Z+5	; 0x05
     fea:	e0 2d       	mov	r30, r0
     fec:	09 95       	icall
	}
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <Set_CallBack_TIMER_1_OCA_INT>:

void Set_CallBack_TIMER_1_OCA_INT(void (*ptr)(void))
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <Set_CallBack_TIMER_1_OCA_INT+0x6>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	41 f0       	breq	.+16     	; 0x103a <Set_CallBack_TIMER_1_OCA_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OCA_INT = ptr;
    102a:	e0 91 a4 00 	lds	r30, 0x00A4
    102e:	f0 91 a5 00 	lds	r31, 0x00A5
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	97 83       	std	Z+7, r25	; 0x07
    1038:	86 83       	std	Z+6, r24	; 0x06
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <__vector_7>:
void __vector_7 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_7 (void)
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OCA_INT != NULL)
    106e:	e0 91 a4 00 	lds	r30, 0x00A4
    1072:	f0 91 a5 00 	lds	r31, 0x00A5
    1076:	86 81       	ldd	r24, Z+6	; 0x06
    1078:	97 81       	ldd	r25, Z+7	; 0x07
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	41 f0       	breq	.+16     	; 0x108e <__vector_7+0x4a>
	{
		TIMER_ISR->TIMER_1_OCA_INT();
    107e:	e0 91 a4 00 	lds	r30, 0x00A4
    1082:	f0 91 a5 00 	lds	r31, 0x00A5
    1086:	06 80       	ldd	r0, Z+6	; 0x06
    1088:	f7 81       	ldd	r31, Z+7	; 0x07
    108a:	e0 2d       	mov	r30, r0
    108c:	09 95       	icall
	}
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <Set_CallBack_TIMER_1_OCB_INT>:


void Set_CallBack_TIMER_1_OCB_INT(void (*ptr)(void))
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <Set_CallBack_TIMER_1_OCB_INT+0x6>
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	41 f0       	breq	.+16     	; 0x10da <Set_CallBack_TIMER_1_OCB_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OCB_INT = ptr;
    10ca:	e0 91 a4 00 	lds	r30, 0x00A4
    10ce:	f0 91 a5 00 	lds	r31, 0x00A5
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	91 87       	std	Z+9, r25	; 0x09
    10d8:	80 87       	std	Z+8, r24	; 0x08
	}
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <__vector_8>:
void __vector_8 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_8 (void)
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OCB_INT != NULL)
    110e:	e0 91 a4 00 	lds	r30, 0x00A4
    1112:	f0 91 a5 00 	lds	r31, 0x00A5
    1116:	80 85       	ldd	r24, Z+8	; 0x08
    1118:	91 85       	ldd	r25, Z+9	; 0x09
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	41 f0       	breq	.+16     	; 0x112e <__vector_8+0x4a>
	{
		TIMER_ISR->TIMER_1_OCB_INT();
    111e:	e0 91 a4 00 	lds	r30, 0x00A4
    1122:	f0 91 a5 00 	lds	r31, 0x00A5
    1126:	00 84       	ldd	r0, Z+8	; 0x08
    1128:	f1 85       	ldd	r31, Z+9	; 0x09
    112a:	e0 2d       	mov	r30, r0
    112c:	09 95       	icall
	}
}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	ff 91       	pop	r31
    1134:	ef 91       	pop	r30
    1136:	bf 91       	pop	r27
    1138:	af 91       	pop	r26
    113a:	9f 91       	pop	r25
    113c:	8f 91       	pop	r24
    113e:	7f 91       	pop	r23
    1140:	6f 91       	pop	r22
    1142:	5f 91       	pop	r21
    1144:	4f 91       	pop	r20
    1146:	3f 91       	pop	r19
    1148:	2f 91       	pop	r18
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <Set_CallBack_TIMER_1_CAPT_INT>:


void Set_CallBack_TIMER_1_CAPT_INT(void (*ptr)(void))
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <Set_CallBack_TIMER_1_CAPT_INT+0x6>
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	41 f0       	breq	.+16     	; 0x117a <Set_CallBack_TIMER_1_CAPT_INT+0x26>
	{
		TIMER_ISR->TIMER_1_CAPT_INT = ptr;
    116a:	e0 91 a4 00 	lds	r30, 0x00A4
    116e:	f0 91 a5 00 	lds	r31, 0x00A5
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	93 87       	std	Z+11, r25	; 0x0b
    1178:	82 87       	std	Z+10, r24	; 0x0a
	}
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <__vector_6>:
void __vector_6 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_6 (void)
{
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_CAPT_INT != NULL)
    11ae:	e0 91 a4 00 	lds	r30, 0x00A4
    11b2:	f0 91 a5 00 	lds	r31, 0x00A5
    11b6:	82 85       	ldd	r24, Z+10	; 0x0a
    11b8:	93 85       	ldd	r25, Z+11	; 0x0b
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	41 f0       	breq	.+16     	; 0x11ce <__vector_6+0x4a>
	{
		TIMER_ISR->TIMER_1_CAPT_INT();
    11be:	e0 91 a4 00 	lds	r30, 0x00A4
    11c2:	f0 91 a5 00 	lds	r31, 0x00A5
    11c6:	02 84       	ldd	r0, Z+10	; 0x0a
    11c8:	f3 85       	ldd	r31, Z+11	; 0x0b
    11ca:	e0 2d       	mov	r30, r0
    11cc:	09 95       	icall
	}
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <Set_CallBack_TIMER_2_OVF_INT>:
 */



void Set_CallBack_TIMER_2_OVF_INT(void (*ptr)(void))
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <Set_CallBack_TIMER_2_OVF_INT+0x6>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	41 f0       	breq	.+16     	; 0x121a <Set_CallBack_TIMER_2_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_2_OVF_INT = ptr;
    120a:	e0 91 a4 00 	lds	r30, 0x00A4
    120e:	f0 91 a5 00 	lds	r31, 0x00A5
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	95 87       	std	Z+13, r25	; 0x0d
    1218:	84 87       	std	Z+12, r24	; 0x0c
	}
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <__vector_5>:
void __vector_5 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_5 (void)
{
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_2_OVF_INT != NULL)
    124e:	e0 91 a4 00 	lds	r30, 0x00A4
    1252:	f0 91 a5 00 	lds	r31, 0x00A5
    1256:	84 85       	ldd	r24, Z+12	; 0x0c
    1258:	95 85       	ldd	r25, Z+13	; 0x0d
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	41 f0       	breq	.+16     	; 0x126e <__vector_5+0x4a>
	{
		TIMER_ISR->TIMER_2_OVF_INT();
    125e:	e0 91 a4 00 	lds	r30, 0x00A4
    1262:	f0 91 a5 00 	lds	r31, 0x00A5
    1266:	04 84       	ldd	r0, Z+12	; 0x0c
    1268:	f5 85       	ldd	r31, Z+13	; 0x0d
    126a:	e0 2d       	mov	r30, r0
    126c:	09 95       	icall
	}
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <Set_CallBack_TIMER_2_OC_INT>:


void Set_CallBack_TIMER_2_OC_INT(void (*ptr)(void))
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <Set_CallBack_TIMER_2_OC_INT+0x6>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	41 f0       	breq	.+16     	; 0x12ba <Set_CallBack_TIMER_2_OC_INT+0x26>
	{
		TIMER_ISR->TIMER_2_OC_INT = ptr;
    12aa:	e0 91 a4 00 	lds	r30, 0x00A4
    12ae:	f0 91 a5 00 	lds	r31, 0x00A5
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	97 87       	std	Z+15, r25	; 0x0f
    12b8:	86 87       	std	Z+14, r24	; 0x0e
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <__vector_4>:
void __vector_4 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_4 (void)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_2_OC_INT != NULL)
    12ee:	e0 91 a4 00 	lds	r30, 0x00A4
    12f2:	f0 91 a5 00 	lds	r31, 0x00A5
    12f6:	86 85       	ldd	r24, Z+14	; 0x0e
    12f8:	97 85       	ldd	r25, Z+15	; 0x0f
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	41 f0       	breq	.+16     	; 0x130e <__vector_4+0x4a>
	{
		TIMER_ISR->TIMER_2_OC_INT();
    12fe:	e0 91 a4 00 	lds	r30, 0x00A4
    1302:	f0 91 a5 00 	lds	r31, 0x00A5
    1306:	06 84       	ldd	r0, Z+14	; 0x0e
    1308:	f7 85       	ldd	r31, Z+15	; 0x0f
    130a:	e0 2d       	mov	r30, r0
    130c:	09 95       	icall
	}
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	0f 90       	pop	r0
    1330:	1f 90       	pop	r1
    1332:	18 95       	reti

00001334 <Timer_init>:
 */



void Timer_init(timer_config_type *timer_config_ptr)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <Timer_init+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <Timer_init+0x8>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
	Timer_DeInit(timer_config_ptr->timer);/*deinitialize the desired timer */
    1344:	e9 81       	ldd	r30, Y+1	; 0x01
    1346:	fa 81       	ldd	r31, Y+2	; 0x02
    1348:	81 85       	ldd	r24, Z+9	; 0x09
    134a:	0e 94 00 0b 	call	0x1600	; 0x1600 <Timer_DeInit>
	switch(timer_config_ptr->timer)
    134e:	e9 81       	ldd	r30, Y+1	; 0x01
    1350:	fa 81       	ldd	r31, Y+2	; 0x02
    1352:	81 85       	ldd	r24, Z+9	; 0x09
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3c 83       	std	Y+4, r19	; 0x04
    135a:	2b 83       	std	Y+3, r18	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <Timer_init+0x34>
    1366:	4e c0       	rjmp	.+156    	; 0x1404 <Timer_init+0xd0>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <Timer_init+0x40>
    1372:	b1 c0       	rjmp	.+354    	; 0x14d6 <Timer_init+0x1a2>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	09 f0       	breq	.+2      	; 0x137e <Timer_init+0x4a>
    137c:	ee c0       	rjmp	.+476    	; 0x155a <Timer_init+0x226>
		 * FOC0= 0 ; because non_pwm mode
		 * select a prescaler
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * */
		TCNT0_REG = timer_config_ptr->initial_value; /*Set Timer0 initial value to 0*/
    137e:	a2 e5       	ldi	r26, 0x52	; 82
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e9 81       	ldd	r30, Y+1	; 0x01
    1384:	fa 81       	ldd	r31, Y+2	; 0x02
    1386:	84 81       	ldd	r24, Z+4	; 0x04
    1388:	95 81       	ldd	r25, Z+5	; 0x05
    138a:	8c 93       	st	X, r24
		SET_BIT(TCC0_REG,7)   ; /* non-pwm mode*/
    138c:	a3 e5       	ldi	r26, 0x53	; 83
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e3 e5       	ldi	r30, 0x53	; 83
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 68       	ori	r24, 0x80	; 128
    1398:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    139a:	e9 81       	ldd	r30, Y+1	; 0x01
    139c:	fa 81       	ldd	r31, Y+2	; 0x02
    139e:	80 85       	ldd	r24, Z+8	; 0x08
    13a0:	88 23       	and	r24, r24
    13a2:	41 f4       	brne	.+16     	; 0x13b4 <Timer_init+0x80>
		{
			SET_BIT(TIMSK_REG,0)    ;/* Enable Timer0 over flow Interrupt*/
    13a4:	a9 e5       	ldi	r26, 0x59	; 89
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e9 e5       	ldi	r30, 0x59	; 89
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	8c 93       	st	X, r24
    13b2:	1a c0       	rjmp	.+52     	; 0x13e8 <Timer_init+0xb4>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	80 85       	ldd	r24, Z+8	; 0x08
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	a9 f4       	brne	.+42     	; 0x13e8 <Timer_init+0xb4>
		{
			OCR0_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    13be:	ac e5       	ldi	r26, 0x5C	; 92
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e9 81       	ldd	r30, Y+1	; 0x01
    13c4:	fa 81       	ldd	r31, Y+2	; 0x02
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	8c 93       	st	X, r24
			SET_BIT(TCC0_REG,3)    ; /* CTC mode */
    13cc:	a3 e5       	ldi	r26, 0x53	; 83
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e3 e5       	ldi	r30, 0x53	; 83
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 60       	ori	r24, 0x08	; 8
    13d8:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,1)    ; /* Enable CTC mode interrupt */
    13da:	a9 e5       	ldi	r26, 0x59	; 89
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e9 e5       	ldi	r30, 0x59	; 89
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	82 60       	ori	r24, 0x02	; 2
    13e6:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC0_REG=(TCC0_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111 );
    13e8:	a3 e5       	ldi	r26, 0x53	; 83
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e3 e5       	ldi	r30, 0x53	; 83
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	98 2f       	mov	r25, r24
    13f4:	98 7f       	andi	r25, 0xF8	; 248
    13f6:	e9 81       	ldd	r30, Y+1	; 0x01
    13f8:	fa 81       	ldd	r31, Y+2	; 0x02
    13fa:	86 81       	ldd	r24, Z+6	; 0x06
    13fc:	87 70       	andi	r24, 0x07	; 7
    13fe:	89 2b       	or	r24, r25
    1400:	8c 93       	st	X, r24
    1402:	ab c0       	rjmp	.+342    	; 0x155a <Timer_init+0x226>
		break;
	case TIMER_1:
		TCNT1_REG = timer_config_ptr->initial_value;/*set timer1 initial value */
    1404:	ac e4       	ldi	r26, 0x4C	; 76
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	84 81       	ldd	r24, Z+4	; 0x04
    140e:	95 81       	ldd	r25, Z+5	; 0x05
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	9c 93       	st	X, r25
    1414:	8e 93       	st	-X, r24
		SET_BIT(TCC1A_REG,3)   ;/*non-pwm mode */
    1416:	af e4       	ldi	r26, 0x4F	; 79
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e4       	ldi	r30, 0x4F	; 79
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 60       	ori	r24, 0x08	; 8
    1422:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    1424:	e9 81       	ldd	r30, Y+1	; 0x01
    1426:	fa 81       	ldd	r31, Y+2	; 0x02
    1428:	80 85       	ldd	r24, Z+8	; 0x08
    142a:	88 23       	and	r24, r24
    142c:	41 f4       	brne	.+16     	; 0x143e <Timer_init+0x10a>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM12)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
			 */
			/**************************************************************************/
			SET_BIT(TIMSK_REG,2)    ;/*Enable Timer1 over flow Interrupt*/
    142e:	a9 e5       	ldi	r26, 0x59	; 89
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e9 e5       	ldi	r30, 0x59	; 89
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	84 60       	ori	r24, 0x04	; 4
    143a:	8c 93       	st	X, r24
    143c:	3e c0       	rjmp	.+124    	; 0x14ba <Timer_init+0x186>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	80 85       	ldd	r24, Z+8	; 0x08
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	c9 f5       	brne	.+114    	; 0x14ba <Timer_init+0x186>
		{
			if(timer_config_ptr->channels_number == CHANNEL_1A)
    1448:	e9 81       	ldd	r30, Y+1	; 0x01
    144a:	fa 81       	ldd	r31, Y+2	; 0x02
    144c:	82 85       	ldd	r24, Z+10	; 0x0a
    144e:	88 23       	and	r24, r24
    1450:	c1 f4       	brne	.+48     	; 0x1482 <Timer_init+0x14e>
			{
				OCR1A_REG = timer_config_ptr->compared_value; /*Set timer1 Compare Value*/
    1452:	aa e4       	ldi	r26, 0x4A	; 74
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	9c 93       	st	X, r25
    1462:	8e 93       	st	-X, r24
				SET_BIT(TCC1B_REG,3)    ;/* enable CTC  mode*/
    1464:	ae e4       	ldi	r26, 0x4E	; 78
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	88 60       	ori	r24, 0x08	; 8
    1470:	8c 93       	st	X, r24
				SET_BIT(TIMSK_REG,4)    ; /* enable CTC channel A Interrupt*/
    1472:	a9 e5       	ldi	r26, 0x59	; 89
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e9 e5       	ldi	r30, 0x59	; 89
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 61       	ori	r24, 0x10	; 16
    147e:	8c 93       	st	X, r24
    1480:	1c c0       	rjmp	.+56     	; 0x14ba <Timer_init+0x186>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
				 */
				/**************************************************************************/
			}
			else if (timer_config_ptr->channels_number==CHANNEL_1B)
    1482:	e9 81       	ldd	r30, Y+1	; 0x01
    1484:	fa 81       	ldd	r31, Y+2	; 0x02
    1486:	82 85       	ldd	r24, Z+10	; 0x0a
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	b9 f4       	brne	.+46     	; 0x14ba <Timer_init+0x186>
			{
				SET_BIT(TCC1A_REG,2)   ;/*non-pwm mode channel B*/
    148c:	af e4       	ldi	r26, 0x4F	; 79
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ef e4       	ldi	r30, 0x4F	; 79
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	84 60       	ori	r24, 0x04	; 4
    1498:	8c 93       	st	X, r24
				OCR1B_REG = timer_config_ptr->compared_value_B_channel; /*Set timer1 Compare Value*/
    149a:	a8 e4       	ldi	r26, 0x48	; 72
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	9c 93       	st	X, r25
    14aa:	8e 93       	st	-X, r24
				SET_BIT(TIMSK_REG,3);/* enable CTC channel B Interrupt*/
    14ac:	a9 e5       	ldi	r26, 0x59	; 89
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e9 e5       	ldi	r30, 0x59	; 89
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 60       	ori	r24, 0x08	; 8
    14b8:	8c 93       	st	X, r24
			}
		}

		TCC1B_REG=(TCC1B_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111);/*select the prescaler */
    14ba:	ae e4       	ldi	r26, 0x4E	; 78
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ee e4       	ldi	r30, 0x4E	; 78
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	98 2f       	mov	r25, r24
    14c6:	98 7f       	andi	r25, 0xF8	; 248
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	86 81       	ldd	r24, Z+6	; 0x06
    14ce:	87 70       	andi	r24, 0x07	; 7
    14d0:	89 2b       	or	r24, r25
    14d2:	8c 93       	st	X, r24
    14d4:	42 c0       	rjmp	.+132    	; 0x155a <Timer_init+0x226>
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * and disable Timer0 compare Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * and disable Timer0 normal Interrupt ad select the state of OSR0 pin
		 * */
		TCNT2_REG = timer_config_ptr->initial_value; /*Set Timer2 initial value */
    14d6:	a4 e4       	ldi	r26, 0x44	; 68
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	84 81       	ldd	r24, Z+4	; 0x04
    14e0:	95 81       	ldd	r25, Z+5	; 0x05
    14e2:	8c 93       	st	X, r24
		SET_BIT(TCC2_REG,7); /* non-pwm mode*/
    14e4:	a5 e4       	ldi	r26, 0x45	; 69
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e4       	ldi	r30, 0x45	; 69
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    14f2:	e9 81       	ldd	r30, Y+1	; 0x01
    14f4:	fa 81       	ldd	r31, Y+2	; 0x02
    14f6:	80 85       	ldd	r24, Z+8	; 0x08
    14f8:	88 23       	and	r24, r24
    14fa:	41 f4       	brne	.+16     	; 0x150c <Timer_init+0x1d8>
			/*Normal mode*/
			/*
			CLEAR_BIT(TCCR2,WGM21)  ;
			CLEAR_BIT(TCCR2,WGM20)  ;
			 */
			SET_BIT(TIMSK_REG,6)    ;/* Enable Timer0 over flow Interrupt*/
    14fc:	a9 e5       	ldi	r26, 0x59	; 89
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e9 e5       	ldi	r30, 0x59	; 89
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 64       	ori	r24, 0x40	; 64
    1508:	8c 93       	st	X, r24
    150a:	1a c0       	rjmp	.+52     	; 0x1540 <Timer_init+0x20c>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    150c:	e9 81       	ldd	r30, Y+1	; 0x01
    150e:	fa 81       	ldd	r31, Y+2	; 0x02
    1510:	80 85       	ldd	r24, Z+8	; 0x08
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	a9 f4       	brne	.+42     	; 0x1540 <Timer_init+0x20c>
		{
			OCR2_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    1516:	a3 e4       	ldi	r26, 0x43	; 67
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e9 81       	ldd	r30, Y+1	; 0x01
    151c:	fa 81       	ldd	r31, Y+2	; 0x02
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	8c 93       	st	X, r24
			SET_BIT(TCC2_REG,3)    ; /* CTC mode */
    1524:	a5 e4       	ldi	r26, 0x45	; 69
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e5 e4       	ldi	r30, 0x45	; 69
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	88 60       	ori	r24, 0x08	; 8
    1530:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,7)    ; /* enable CTC Interrupt*/
    1532:	a9 e5       	ldi	r26, 0x59	; 89
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e9 e5       	ldi	r30, 0x59	; 89
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	80 68       	ori	r24, 0x80	; 128
    153e:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC2_REG=(TCC2_REG &0b11111000)|(timer_config_ptr->T2_used_freq & 0b00000111 );
    1540:	a5 e4       	ldi	r26, 0x45	; 69
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e4       	ldi	r30, 0x45	; 69
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	98 2f       	mov	r25, r24
    154c:	98 7f       	andi	r25, 0xF8	; 248
    154e:	e9 81       	ldd	r30, Y+1	; 0x01
    1550:	fa 81       	ldd	r31, Y+2	; 0x02
    1552:	87 81       	ldd	r24, Z+7	; 0x07
    1554:	87 70       	andi	r24, 0x07	; 7
    1556:	89 2b       	or	r24, r25
    1558:	8c 93       	st	X, r24
		break;
	case ALL:
		break;
	}
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <change_compared_and_duty_value>:
 * it assign the compared value or duty cycle value for
 * every desired timer
 * */

void change_compared_and_duty_value(timer_config_type * config_ptr)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <change_compared_and_duty_value+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <change_compared_and_duty_value+0x8>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->timer)
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	81 85       	ldd	r24, Z+9	; 0x09
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3c 83       	std	Y+4, r19	; 0x04
    1584:	2b 83       	std	Y+3, r18	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	89 f0       	breq	.+34     	; 0x15b2 <change_compared_and_duty_value+0x4a>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	29 f1       	breq	.+74     	; 0x15e4 <change_compared_and_duty_value+0x7c>
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	41 f5       	brne	.+80     	; 0x15f2 <change_compared_and_duty_value+0x8a>
	{
	case TIMER_0:
		OCR0_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    15a2:	ac e5       	ldi	r26, 0x5C	; 92
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	8c 93       	st	X, r24
    15b0:	20 c0       	rjmp	.+64     	; 0x15f2 <change_compared_and_duty_value+0x8a>
		break ;
	case TIMER_1:
		OCR1A_REG = config_ptr->compared_value; /*Set timer1 Compare Value*/
    15b2:	aa e4       	ldi	r26, 0x4A	; 74
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e9 81       	ldd	r30, Y+1	; 0x01
    15b8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ba:	80 81       	ld	r24, Z
    15bc:	91 81       	ldd	r25, Z+1	; 0x01
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	9c 93       	st	X, r25
    15c2:	8e 93       	st	-X, r24
		if (config_ptr->channels_number==CHANNEL_1B)
    15c4:	e9 81       	ldd	r30, Y+1	; 0x01
    15c6:	fa 81       	ldd	r31, Y+2	; 0x02
    15c8:	82 85       	ldd	r24, Z+10	; 0x0a
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 f4       	brne	.+36     	; 0x15f2 <change_compared_and_duty_value+0x8a>
		{
			OCR1B_REG = config_ptr->compared_value_B_channel; /*Set timer1 B Compare Value*/
    15ce:	e8 e4       	ldi	r30, 0x48	; 72
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	a9 81       	ldd	r26, Y+1	; 0x01
    15d4:	ba 81       	ldd	r27, Y+2	; 0x02
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	8d 91       	ld	r24, X+
    15da:	9c 91       	ld	r25, X
    15dc:	13 97       	sbiw	r26, 0x03	; 3
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	80 83       	st	Z, r24
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <change_compared_and_duty_value+0x8a>
		}
		break ;
	case TIMER_2:
		OCR2_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    15e4:	a3 e4       	ldi	r26, 0x43	; 67
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ea:	fa 81       	ldd	r31, Y+2	; 0x02
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	8c 93       	st	X, r24
		break ;
	}
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <Timer_DeInit>:

/*Description
 * this function is responsible for reset all timer registers
 * */
void Timer_DeInit(TIMER_e timer)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <Timer_DeInit+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3b 83       	std	Y+3, r19	; 0x03
    1616:	2a 83       	std	Y+2, r18	; 0x02
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	19 f1       	breq	.+70     	; 0x1668 <Timer_DeInit+0x68>
    1622:	2a 81       	ldd	r18, Y+2	; 0x02
    1624:	3b 81       	ldd	r19, Y+3	; 0x03
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <Timer_DeInit+0x36>
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	9b 81       	ldd	r25, Y+3	; 0x03
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <Timer_DeInit+0x4c>
    1634:	56 c0       	rjmp	.+172    	; 0x16e2 <Timer_DeInit+0xe2>
    1636:	2a 81       	ldd	r18, Y+2	; 0x02
    1638:	3b 81       	ldd	r19, Y+3	; 0x03
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	31 f1       	breq	.+76     	; 0x168c <Timer_DeInit+0x8c>
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	79 f1       	breq	.+94     	; 0x16a8 <Timer_DeInit+0xa8>
    164a:	4b c0       	rjmp	.+150    	; 0x16e2 <Timer_DeInit+0xe2>
	{
	case TIMER_0:
		TCC0_REG= 0; /* clear control register*/
    164c:	e3 e5       	ldi	r30, 0x53	; 83
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer 0*/
    1652:	e2 e5       	ldi	r30, 0x52	; 82
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11111100);/*Disable module interrupt interrupt*/
    1658:	a9 e5       	ldi	r26, 0x59	; 89
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e9 e5       	ldi	r30, 0x59	; 89
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8c 7f       	andi	r24, 0xFC	; 252
    1664:	8c 93       	st	X, r24
    1666:	3d c0       	rjmp	.+122    	; 0x16e2 <Timer_DeInit+0xe2>
		break;
	case TIMER_1:
		TCC1A_REG=0; /* clear control register*/
    1668:	ef e4       	ldi	r30, 0x4F	; 79
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	10 82       	st	Z, r1
		TCC1B_REG=0 ;
    166e:	ee e4       	ldi	r30, 0x4E	; 78
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer 0*/
    1674:	ec e4       	ldi	r30, 0x4C	; 76
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	11 82       	std	Z+1, r1	; 0x01
    167a:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11100011);/*Disable module interrupt interrupt*/
    167c:	a9 e5       	ldi	r26, 0x59	; 89
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e9 e5       	ldi	r30, 0x59	; 89
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	83 7e       	andi	r24, 0xE3	; 227
    1688:	8c 93       	st	X, r24
    168a:	2b c0       	rjmp	.+86     	; 0x16e2 <Timer_DeInit+0xe2>
		break;
	case TIMER_2:
		TCC2_REG= 0; /* clear control register*/
    168c:	e5 e4       	ldi	r30, 0x45	; 69
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer 0*/
    1692:	e4 e4       	ldi	r30, 0x44	; 68
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b00111111);/*Disable module interrupt interrupt*/
    1698:	a9 e5       	ldi	r26, 0x59	; 89
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e9 e5       	ldi	r30, 0x59	; 89
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 73       	andi	r24, 0x3F	; 63
    16a4:	8c 93       	st	X, r24
    16a6:	1d c0       	rjmp	.+58     	; 0x16e2 <Timer_DeInit+0xe2>
		break;
	case ALL:
		TIMSK_REG=(TIMSK_REG &0b00100000);/*Disable all timers modules interrupt interrupt*/
    16a8:	a9 e5       	ldi	r26, 0x59	; 89
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e9 e5       	ldi	r30, 0x59	; 89
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 72       	andi	r24, 0x20	; 32
    16b4:	8c 93       	st	X, r24
		/*===============Deinitialize Timer0=============================*/
		TCC0_REG= 0; /* clear control register*/
    16b6:	e3 e5       	ldi	r30, 0x53	; 83
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer */
    16bc:	e2 e5       	ldi	r30, 0x52	; 82
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
		/*===============Deinitialize Timer1=============================*/
		TCC1A_REG= 0; /* clear A control register*/
    16c2:	ef e4       	ldi	r30, 0x4F	; 79
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	10 82       	st	Z, r1
		TCC1B_REG= 0;/* clear B control register*/
    16c8:	ee e4       	ldi	r30, 0x4E	; 78
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer */
    16ce:	ec e4       	ldi	r30, 0x4C	; 76
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	11 82       	std	Z+1, r1	; 0x01
    16d4:	10 82       	st	Z, r1
		/*===============Deinitialize Timer2=============================*/
		TCC2_REG= 0; /* clear control register*/
    16d6:	e5 e4       	ldi	r30, 0x45	; 69
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer */
    16dc:	e4 e4       	ldi	r30, 0x44	; 68
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	10 82       	st	Z, r1
		break;
	}
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <clear_timer>:
 * this func used to reset the timer to start count again from the beginning
 * we chose the timer to be cleared
 * */

void clear_timer(TIMER_e timer)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <clear_timer+0x6>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3b 83       	std	Y+3, r19	; 0x03
    1704:	2a 83       	std	Y+2, r18	; 0x02
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	c9 f0       	breq	.+50     	; 0x1742 <clear_timer+0x54>
    1710:	2a 81       	ldd	r18, Y+2	; 0x02
    1712:	3b 81       	ldd	r19, Y+3	; 0x03
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <clear_timer+0x36>
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	61 f0       	breq	.+24     	; 0x173a <clear_timer+0x4c>
    1722:	22 c0       	rjmp	.+68     	; 0x1768 <clear_timer+0x7a>
    1724:	2a 81       	ldd	r18, Y+2	; 0x02
    1726:	3b 81       	ldd	r19, Y+3	; 0x03
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	79 f0       	breq	.+30     	; 0x174c <clear_timer+0x5e>
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	91 05       	cpc	r25, r1
    1736:	71 f0       	breq	.+28     	; 0x1754 <clear_timer+0x66>
    1738:	17 c0       	rjmp	.+46     	; 0x1768 <clear_timer+0x7a>
	{
	case TIMER_0:
		TCNT0_REG = 0; /* Set Timer0 initial value to 0*/
    173a:	e2 e5       	ldi	r30, 0x52	; 82
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	10 82       	st	Z, r1
    1740:	13 c0       	rjmp	.+38     	; 0x1768 <clear_timer+0x7a>
		break;
	case TIMER_1:
		TCNT1_REG = 0; /* Set Timer1 initial value to 0*/
    1742:	ec e4       	ldi	r30, 0x4C	; 76
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	11 82       	std	Z+1, r1	; 0x01
    1748:	10 82       	st	Z, r1
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <clear_timer+0x7a>
		break;
	case TIMER_2:
		TCNT2_REG = 0; /* Set Timer2 initial value to 0*/
    174c:	e4 e4       	ldi	r30, 0x44	; 68
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <clear_timer+0x7a>
		break;
	case ALL:
		TCNT0_REG = 0;  /* Set Timer0 initial value to 0*/
    1754:	e2 e5       	ldi	r30, 0x52	; 82
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	10 82       	st	Z, r1
		TCNT1_REG = 0;  /* Set Timer1 initial value to 0*/
    175a:	ec e4       	ldi	r30, 0x4C	; 76
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	11 82       	std	Z+1, r1	; 0x01
    1760:	10 82       	st	Z, r1
		TCNT2_REG = 0;  /* Set Timer2 initial value to 0*/
    1762:	e4 e4       	ldi	r30, 0x44	; 68
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	10 82       	st	Z, r1
		break;
	default:
		break  ;
	}
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <PWM_timers_init>:
 * this function is responsible for pwm init for the desired timer
 * it take a ptr to struct
 *
 * */
void PWM_timers_init(PWM_timers_config *timer_config)
{
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <PWM_timers_init+0xa>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <PWM_timers_init+0xc>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01

	switch (timer_config->timer)
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	81 85       	ldd	r24, Z+9	; 0x09
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3c 83       	std	Y+4, r19	; 0x04
    1794:	2b 83       	std	Y+3, r18	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <PWM_timers_init+0x2e>
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <PWM_timers_init+0xb4>
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	e2 30       	cpi	r30, 0x02	; 2
    17a8:	f1 05       	cpc	r31, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <PWM_timers_init+0x3a>
    17ac:	0f c1       	rjmp	.+542    	; 0x19cc <PWM_timers_init+0x258>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	21 15       	cp	r18, r1
    17b4:	31 05       	cpc	r19, r1
    17b6:	09 f0       	breq	.+2      	; 0x17ba <PWM_timers_init+0x46>
    17b8:	46 c1       	rjmp	.+652    	; 0x1a46 <PWM_timers_init+0x2d2>
	{

	case TIMER_0:
		clear_timer(TIMER_0); /* Set Timer Initial Value to 0*/
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <clear_timer>
		OCR0_REG  = timer_config->set_duty_cycle ; /* Set Compare Value*/
    17c0:	ac e5       	ldi	r26, 0x5C	; 92
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e9 81       	ldd	r30, Y+1	; 0x01
    17c6:	fa 81       	ldd	r31, Y+2	; 0x02
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	8c 93       	st	X, r24
		/*Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_B, PIN_3, OUTPUT);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	63 e0       	ldi	r22, 0x03	; 3
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC0_REG,7);
    17d8:	a3 e5       	ldi	r26, 0x53	; 83
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e3 e5       	ldi	r30, 0x53	; 83
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 77       	andi	r24, 0x7F	; 127
    17e4:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	80 85       	ldd	r24, Z+8	; 0x08
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	29 f4       	brne	.+10     	; 0x17fa <PWM_timers_init+0x86>
		{
			TCC0_REG = (1<<3) | (1<<5) | (1<<6);
    17f0:	e3 e5       	ldi	r30, 0x53	; 83
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	88 e6       	ldi	r24, 0x68	; 104
    17f6:	80 83       	st	Z, r24
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <PWM_timers_init+0x98>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	80 85       	ldd	r24, Z+8	; 0x08
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	21 f4       	brne	.+8      	; 0x180c <PWM_timers_init+0x98>
		{
			TCC0_REG = (0<<3) | (1<<5) | (1<<6);
    1804:	e3 e5       	ldi	r30, 0x53	; 83
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 e6       	ldi	r24, 0x60	; 96
    180a:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC0_REG=(TCC0_REG & 0b11111000)|(timer_config->T0_T1_used_freq & 0b00000111 );
    180c:	a3 e5       	ldi	r26, 0x53	; 83
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e3 e5       	ldi	r30, 0x53	; 83
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	98 2f       	mov	r25, r24
    1818:	98 7f       	andi	r25, 0xF8	; 248
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	87 70       	andi	r24, 0x07	; 7
    1822:	89 2b       	or	r24, r25
    1824:	8c 93       	st	X, r24
    1826:	0f c1       	rjmp	.+542    	; 0x1a46 <PWM_timers_init+0x2d2>
		break;
	case TIMER_1:
		clear_timer(TIMER_1); /* Set Timer Initial Value to 0*/
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <clear_timer>
		ICR1_REG   = timer_config->timer1_TOP_value; /* Set TOP Value*/
    182e:	a6 e4       	ldi	r26, 0x46	; 70
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e9 81       	ldd	r30, Y+1	; 0x01
    1834:	fa 81       	ldd	r31, Y+2	; 0x02
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	11 96       	adiw	r26, 0x01	; 1
    183c:	9c 93       	st	X, r25
    183e:	8e 93       	st	-X, r24
		OCR1A_REG  = timer_config->set_duty_cycle; /* Set Compare Value*/
    1840:	aa e4       	ldi	r26, 0x4A	; 74
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e9 81       	ldd	r30, Y+1	; 0x01
    1846:	fa 81       	ldd	r31, Y+2	; 0x02
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
		/*Configure PD5/OC1A and PD4/OC1B as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_5, OUTPUT);/*OC1A->output*/
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	65 e0       	ldi	r22, 0x05	; 5
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode mode 14
		 * 3. Clear OC1A when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 */

		CLR_BIT(TCC1A_REG,3);
    185c:	af e4       	ldi	r26, 0x4F	; 79
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ef e4       	ldi	r30, 0x4F	; 79
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	87 7f       	andi	r24, 0xF7	; 247
    1868:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    186a:	e9 81       	ldd	r30, Y+1	; 0x01
    186c:	fa 81       	ldd	r31, Y+2	; 0x02
    186e:	80 85       	ldd	r24, Z+8	; 0x08
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	09 f0       	breq	.+2      	; 0x1876 <PWM_timers_init+0x102>
    1874:	5b c0       	rjmp	.+182    	; 0x192c <PWM_timers_init+0x1b8>
		{

			SET_BIT(TCC1B_REG,4);SET_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1876:	ae e4       	ldi	r26, 0x4E	; 78
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ee e4       	ldi	r30, 0x4E	; 78
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	80 61       	ori	r24, 0x10	; 16
    1882:	8c 93       	st	X, r24
    1884:	ae e4       	ldi	r26, 0x4E	; 78
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ee e4       	ldi	r30, 0x4E	; 78
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	88 60       	ori	r24, 0x08	; 8
    1890:	8c 93       	st	X, r24
    1892:	af e4       	ldi	r26, 0x4F	; 79
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ef e4       	ldi	r30, 0x4F	; 79
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	82 60       	ori	r24, 0x02	; 2
    189e:	8c 93       	st	X, r24
    18a0:	af e4       	ldi	r26, 0x4F	; 79
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ef e4       	ldi	r30, 0x4F	; 79
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8e 7f       	andi	r24, 0xFE	; 254
    18ac:	8c 93       	st	X, r24
			SET_BIT(TCC1A_REG,7);SET_BIT(TCC1A_REG,5);CLR_BIT(TCC1A_REG,6);CLR_BIT(TCC1A_REG,4);
    18ae:	af e4       	ldi	r26, 0x4F	; 79
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ef e4       	ldi	r30, 0x4F	; 79
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 68       	ori	r24, 0x80	; 128
    18ba:	8c 93       	st	X, r24
    18bc:	af e4       	ldi	r26, 0x4F	; 79
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ef e4       	ldi	r30, 0x4F	; 79
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 62       	ori	r24, 0x20	; 32
    18c8:	8c 93       	st	X, r24
    18ca:	af e4       	ldi	r26, 0x4F	; 79
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ef e4       	ldi	r30, 0x4F	; 79
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 7b       	andi	r24, 0xBF	; 191
    18d6:	8c 93       	st	X, r24
    18d8:	af e4       	ldi	r26, 0x4F	; 79
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ef e4       	ldi	r30, 0x4F	; 79
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8f 7e       	andi	r24, 0xEF	; 239
    18e4:	8c 93       	st	X, r24
			if(timer_config->channels_number==BOTH_CHANNELS)
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	83 85       	ldd	r24, Z+11	; 0x0b
    18ec:	82 30       	cpi	r24, 0x02	; 2
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <PWM_timers_init+0x17e>
    18f0:	5f c0       	rjmp	.+190    	; 0x19b0 <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    18f2:	af e4       	ldi	r26, 0x4F	; 79
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	ef e4       	ldi	r30, 0x4F	; 79
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8b 7f       	andi	r24, 0xFB	; 251
    18fe:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1900:	83 e0       	ldi	r24, 0x03	; 3
    1902:	64 e0       	ldi	r22, 0x04	; 4
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    190a:	af e4       	ldi	r26, 0x4F	; 79
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	ef e4       	ldi	r30, 0x4F	; 79
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 62       	ori	r24, 0x20	; 32
    1916:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    1918:	a8 e4       	ldi	r26, 0x48	; 72
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e9 81       	ldd	r30, Y+1	; 0x01
    191e:	fa 81       	ldd	r31, Y+2	; 0x02
    1920:	84 81       	ldd	r24, Z+4	; 0x04
    1922:	95 81       	ldd	r25, Z+5	; 0x05
    1924:	11 96       	adiw	r26, 0x01	; 1
    1926:	9c 93       	st	X, r25
    1928:	8e 93       	st	-X, r24
    192a:	42 c0       	rjmp	.+132    	; 0x19b0 <PWM_timers_init+0x23c>
			}
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    192c:	e9 81       	ldd	r30, Y+1	; 0x01
    192e:	fa 81       	ldd	r31, Y+2	; 0x02
    1930:	80 85       	ldd	r24, Z+8	; 0x08
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	e9 f5       	brne	.+122    	; 0x19b0 <PWM_timers_init+0x23c>
		{

			SET_BIT(TCC1B_REG,4);CLR_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1936:	ae e4       	ldi	r26, 0x4E	; 78
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ee e4       	ldi	r30, 0x4E	; 78
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	80 61       	ori	r24, 0x10	; 16
    1942:	8c 93       	st	X, r24
    1944:	ae e4       	ldi	r26, 0x4E	; 78
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ee e4       	ldi	r30, 0x4E	; 78
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	87 7f       	andi	r24, 0xF7	; 247
    1950:	8c 93       	st	X, r24
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	8c 93       	st	X, r24
    1960:	af e4       	ldi	r26, 0x4F	; 79
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e4       	ldi	r30, 0x4F	; 79
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8e 7f       	andi	r24, 0xFE	; 254
    196c:	8c 93       	st	X, r24

			if(timer_config->channels_number==BOTH_CHANNELS)
    196e:	e9 81       	ldd	r30, Y+1	; 0x01
    1970:	fa 81       	ldd	r31, Y+2	; 0x02
    1972:	83 85       	ldd	r24, Z+11	; 0x0b
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	e1 f4       	brne	.+56     	; 0x19b0 <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    1978:	af e4       	ldi	r26, 0x4F	; 79
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ef e4       	ldi	r30, 0x4F	; 79
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8b 7f       	andi	r24, 0xFB	; 251
    1984:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1986:	83 e0       	ldi	r24, 0x03	; 3
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    1990:	af e4       	ldi	r26, 0x4F	; 79
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ef e4       	ldi	r30, 0x4F	; 79
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	80 62       	ori	r24, 0x20	; 32
    199c:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    199e:	a8 e4       	ldi	r26, 0x48	; 72
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e9 81       	ldd	r30, Y+1	; 0x01
    19a4:	fa 81       	ldd	r31, Y+2	; 0x02
    19a6:	84 81       	ldd	r24, Z+4	; 0x04
    19a8:	95 81       	ldd	r25, Z+5	; 0x05
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	9c 93       	st	X, r25
    19ae:	8e 93       	st	-X, r24
			}
		}
			/*select the clk (prescaler)to start counting */
			TCC1B_REG=(TCC1B_REG & 0b11111000)|(timer_config->T0_T1_used_freq&0b00000111 );
    19b0:	ae e4       	ldi	r26, 0x4E	; 78
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee e4       	ldi	r30, 0x4E	; 78
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	98 2f       	mov	r25, r24
    19bc:	98 7f       	andi	r25, 0xF8	; 248
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	86 81       	ldd	r24, Z+6	; 0x06
    19c4:	87 70       	andi	r24, 0x07	; 7
    19c6:	89 2b       	or	r24, r25
    19c8:	8c 93       	st	X, r24
    19ca:	3d c0       	rjmp	.+122    	; 0x1a46 <PWM_timers_init+0x2d2>
			break;
	case TIMER_2:
		clear_timer(TIMER_2); /* Set Timer Initial Value to 0*/
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	0e 94 77 0b 	call	0x16ee	; 0x16ee <clear_timer>
		OCR2_REG  = timer_config->set_duty_cycle/100; /* Set Compare Value*/
    19d2:	03 e4       	ldi	r16, 0x43	; 67
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	e9 81       	ldd	r30, Y+1	; 0x01
    19d8:	fa 81       	ldd	r31, Y+2	; 0x02
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	24 e6       	ldi	r18, 0x64	; 100
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	b9 01       	movw	r22, r18
    19e4:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <__udivmodhi4>
    19e8:	cb 01       	movw	r24, r22
    19ea:	f8 01       	movw	r30, r16
    19ec:	80 83       	st	Z, r24
		/*Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_7, OUTPUT);
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM21=1 & WGM20=1
		 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC2_REG,7);
    19f8:	a5 e4       	ldi	r26, 0x45	; 69
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e4       	ldi	r30, 0x45	; 69
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	80 85       	ldd	r24, Z+8	; 0x08
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	29 f4       	brne	.+10     	; 0x1a1a <PWM_timers_init+0x2a6>
		{
			TCC2_REG = (1<<3) | (1<<5) | (1<<6);
    1a10:	e5 e4       	ldi	r30, 0x45	; 69
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	88 e6       	ldi	r24, 0x68	; 104
    1a16:	80 83       	st	Z, r24
    1a18:	09 c0       	rjmp	.+18     	; 0x1a2c <PWM_timers_init+0x2b8>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    1a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1e:	80 85       	ldd	r24, Z+8	; 0x08
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	21 f4       	brne	.+8      	; 0x1a2c <PWM_timers_init+0x2b8>
		{
			TCC2_REG = (0<<3) | (1<<5) | (1<<6);
    1a24:	e5 e4       	ldi	r30, 0x45	; 69
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 e6       	ldi	r24, 0x60	; 96
    1a2a:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC2_REG=(TCC2_REG & 0b11111000)|(timer_config->T2_used_freq&0b00000111 );
    1a2c:	a5 e4       	ldi	r26, 0x45	; 69
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e5 e4       	ldi	r30, 0x45	; 69
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	98 2f       	mov	r25, r24
    1a38:	98 7f       	andi	r25, 0xF8	; 248
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	87 81       	ldd	r24, Z+7	; 0x07
    1a40:	87 70       	andi	r24, 0x07	; 7
    1a42:	89 2b       	or	r24, r25
    1a44:	8c 93       	st	X, r24
		break;
		}

	}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <Global_VidINTEnable>:

    void Global_VidINTEnable(void)
	{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(S_REG,7);
    1a60:	af e5       	ldi	r26, 0x5F	; 95
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	ef e5       	ldi	r30, 0x5F	; 95
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 68       	ori	r24, 0x80	; 128
    1a6c:	8c 93       	st	X, r24
	}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <Set_CallBack_EXTINT_0>:

EXTINT_N_PTR * EXTINT_ISR;


void Set_CallBack_EXTINT_0(void (*ptr)(void))
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <Set_CallBack_EXTINT_0+0x6>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	41 f0       	breq	.+16     	; 0x1a9a <Set_CallBack_EXTINT_0+0x26>
	{
		EXTINT_ISR->EXTINT_0 = ptr;
    1a8a:	e0 91 a8 00 	lds	r30, 0x00A8
    1a8e:	f0 91 a9 00 	lds	r31, 0x00A9
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
	}
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <__vector_0>:
void __vector_0 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_0 (void)
{
    1aa4:	1f 92       	push	r1
    1aa6:	0f 92       	push	r0
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	0f 92       	push	r0
    1aac:	11 24       	eor	r1, r1
    1aae:	2f 93       	push	r18
    1ab0:	3f 93       	push	r19
    1ab2:	4f 93       	push	r20
    1ab4:	5f 93       	push	r21
    1ab6:	6f 93       	push	r22
    1ab8:	7f 93       	push	r23
    1aba:	8f 93       	push	r24
    1abc:	9f 93       	push	r25
    1abe:	af 93       	push	r26
    1ac0:	bf 93       	push	r27
    1ac2:	ef 93       	push	r30
    1ac4:	ff 93       	push	r31
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR->EXTINT_0 != NULL)
    1ace:	e0 91 a8 00 	lds	r30, 0x00A8
    1ad2:	f0 91 a9 00 	lds	r31, 0x00A9
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	41 f0       	breq	.+16     	; 0x1aee <__vector_0+0x4a>
	{
		EXTINT_ISR->EXTINT_0();
    1ade:	e0 91 a8 00 	lds	r30, 0x00A8
    1ae2:	f0 91 a9 00 	lds	r31, 0x00A9
    1ae6:	01 90       	ld	r0, Z+
    1ae8:	f0 81       	ld	r31, Z
    1aea:	e0 2d       	mov	r30, r0
    1aec:	09 95       	icall
	}
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <Set_CallBack_EXTINT_1>:

void Set_CallBack_EXTINT_1(void (*ptr)(void))
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <Set_CallBack_EXTINT_1+0x6>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	41 f0       	breq	.+16     	; 0x1b3a <Set_CallBack_EXTINT_1+0x26>
	{
		EXTINT_ISR->EXTINT_1 = ptr;
    1b2a:	e0 91 a8 00 	lds	r30, 0x00A8
    1b2e:	f0 91 a9 00 	lds	r31, 0x00A9
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	93 83       	std	Z+3, r25	; 0x03
    1b38:	82 83       	std	Z+2, r24	; 0x02
	}
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <__vector_1>:
void __vector_1 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_1 (void)
{
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	2f 93       	push	r18
    1b50:	3f 93       	push	r19
    1b52:	4f 93       	push	r20
    1b54:	5f 93       	push	r21
    1b56:	6f 93       	push	r22
    1b58:	7f 93       	push	r23
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	af 93       	push	r26
    1b60:	bf 93       	push	r27
    1b62:	ef 93       	push	r30
    1b64:	ff 93       	push	r31
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR->EXTINT_1 != NULL)
    1b6e:	e0 91 a8 00 	lds	r30, 0x00A8
    1b72:	f0 91 a9 00 	lds	r31, 0x00A9
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	41 f0       	breq	.+16     	; 0x1b8e <__vector_1+0x4a>
	{
		EXTINT_ISR->EXTINT_1();
    1b7e:	e0 91 a8 00 	lds	r30, 0x00A8
    1b82:	f0 91 a9 00 	lds	r31, 0x00A9
    1b86:	02 80       	ldd	r0, Z+2	; 0x02
    1b88:	f3 81       	ldd	r31, Z+3	; 0x03
    1b8a:	e0 2d       	mov	r30, r0
    1b8c:	09 95       	icall
	}
}
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <Set_CallBack_EXTINT_2>:

void Set_CallBack_EXTINT_2(void (*ptr)(void))
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <Set_CallBack_EXTINT_2+0x6>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	41 f0       	breq	.+16     	; 0x1bda <Set_CallBack_EXTINT_2+0x26>
	{
		EXTINT_ISR->EXTINT_2 = ptr;
    1bca:	e0 91 a8 00 	lds	r30, 0x00A8
    1bce:	f0 91 a9 00 	lds	r31, 0x00A9
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	95 83       	std	Z+5, r25	; 0x05
    1bd8:	84 83       	std	Z+4, r24	; 0x04
	}
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <__vector_2>:
void __vector_2 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_2 (void)
{
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR->EXTINT_2 != NULL)
    1c0e:	e0 91 a8 00 	lds	r30, 0x00A8
    1c12:	f0 91 a9 00 	lds	r31, 0x00A9
    1c16:	84 81       	ldd	r24, Z+4	; 0x04
    1c18:	95 81       	ldd	r25, Z+5	; 0x05
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	41 f0       	breq	.+16     	; 0x1c2e <__vector_2+0x4a>
	{
		EXTINT_ISR->EXTINT_2();
    1c1e:	e0 91 a8 00 	lds	r30, 0x00A8
    1c22:	f0 91 a9 00 	lds	r31, 0x00A9
    1c26:	04 80       	ldd	r0, Z+4	; 0x04
    1c28:	f5 81       	ldd	r31, Z+5	; 0x05
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	09 95       	icall
	}
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	ff 91       	pop	r31
    1c34:	ef 91       	pop	r30
    1c36:	bf 91       	pop	r27
    1c38:	af 91       	pop	r26
    1c3a:	9f 91       	pop	r25
    1c3c:	8f 91       	pop	r24
    1c3e:	7f 91       	pop	r23
    1c40:	6f 91       	pop	r22
    1c42:	5f 91       	pop	r21
    1c44:	4f 91       	pop	r20
    1c46:	3f 91       	pop	r19
    1c48:	2f 91       	pop	r18
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <EXTINT_u8Enable>:

u8 EXTINT_u8Enable(u8 Copy_u8ExtInt)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <EXTINT_u8Enable+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <EXTINT_u8Enable+0x8>
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
    1c62:	19 82       	std	Y+1, r1	; 0x01
	S_REG |= GLOBAL_INTERRUPT_ENABLE;
    1c64:	af e5       	ldi	r26, 0x5F	; 95
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ef e5       	ldi	r30, 0x5F	; 95
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 68       	ori	r24, 0x80	; 128
    1c70:	8c 93       	st	X, r24
	switch(Copy_u8ExtInt)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3c 83       	std	Y+4, r19	; 0x04
    1c7a:	2b 83       	std	Y+3, r18	; 0x03
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	89 f0       	breq	.+34     	; 0x1ca8 <EXTINT_u8Enable+0x54>
    1c86:	2b 81       	ldd	r18, Y+3	; 0x03
    1c88:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	a1 f0       	breq	.+40     	; 0x1cb8 <EXTINT_u8Enable+0x64>
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	c1 f4       	brne	.+48     	; 0x1cc8 <EXTINT_u8Enable+0x74>
	{
	case INT_0 : GIC_REG |= INT0_EN ; break;
    1c98:	ab e5       	ldi	r26, 0x5B	; 91
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	eb e5       	ldi	r30, 0x5B	; 91
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	80 64       	ori	r24, 0x40	; 64
    1ca4:	8c 93       	st	X, r24
    1ca6:	12 c0       	rjmp	.+36     	; 0x1ccc <EXTINT_u8Enable+0x78>
	case INT_1 : GIC_REG |= INT1_EN ; break;
    1ca8:	ab e5       	ldi	r26, 0x5B	; 91
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	eb e5       	ldi	r30, 0x5B	; 91
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 68       	ori	r24, 0x80	; 128
    1cb4:	8c 93       	st	X, r24
    1cb6:	0a c0       	rjmp	.+20     	; 0x1ccc <EXTINT_u8Enable+0x78>
	case INT_2 : GIC_REG |= INT2_EN ; break;
    1cb8:	ab e5       	ldi	r26, 0x5B	; 91
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	eb e5       	ldi	r30, 0x5B	; 91
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 62       	ori	r24, 0x20	; 32
    1cc4:	8c 93       	st	X, r24
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <EXTINT_u8Enable+0x78>
	default : Local_u8errStatus = RT_NOK ;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <EXTINT_u8Disable>:

u8 EXTINT_u8Disable(u8 Copy_u8ExtInt)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <EXTINT_u8Disable+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <EXTINT_u8Disable+0x8>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
    1cea:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtInt)
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3c 83       	std	Y+4, r19	; 0x04
    1cf4:	2b 83       	std	Y+3, r18	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	e9 f0       	breq	.+58     	; 0x1d3a <EXTINT_u8Disable+0x5e>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <EXTINT_u8Disable+0x38>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <EXTINT_u8Disable+0x4e>
    1d12:	2b c0       	rjmp	.+86     	; 0x1d6a <EXTINT_u8Disable+0x8e>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	b1 f0       	breq	.+44     	; 0x1d4a <EXTINT_u8Disable+0x6e>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	c9 f0       	breq	.+50     	; 0x1d5a <EXTINT_u8Disable+0x7e>
    1d28:	20 c0       	rjmp	.+64     	; 0x1d6a <EXTINT_u8Disable+0x8e>
	{
	case INT_0 : CLR_BIT(GIC_REG,6) ; break;
    1d2a:	ab e5       	ldi	r26, 0x5B	; 91
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	eb e5       	ldi	r30, 0x5B	; 91
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7b       	andi	r24, 0xBF	; 191
    1d36:	8c 93       	st	X, r24
    1d38:	1a c0       	rjmp	.+52     	; 0x1d6e <EXTINT_u8Disable+0x92>
	case INT_1 : CLR_BIT(GIC_REG,7) ; break;
    1d3a:	ab e5       	ldi	r26, 0x5B	; 91
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	eb e5       	ldi	r30, 0x5B	; 91
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 77       	andi	r24, 0x7F	; 127
    1d46:	8c 93       	st	X, r24
    1d48:	12 c0       	rjmp	.+36     	; 0x1d6e <EXTINT_u8Disable+0x92>
	case INT_2 : CLR_BIT(GIC_REG,5) ; break;
    1d4a:	ab e5       	ldi	r26, 0x5B	; 91
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb e5       	ldi	r30, 0x5B	; 91
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 7d       	andi	r24, 0xDF	; 223
    1d56:	8c 93       	st	X, r24
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <EXTINT_u8Disable+0x92>
	case G_DIS : CLR_BIT(S_REG,7) ; break;
    1d5a:	af e5       	ldi	r26, 0x5F	; 95
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ef e5       	ldi	r30, 0x5F	; 95
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 77       	andi	r24, 0x7F	; 127
    1d66:	8c 93       	st	X, r24
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <EXTINT_u8Disable+0x92>
	default : Local_u8errStatus = RT_NOK;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <EXTINT_u8SenseCtrl>:

u8 EXTINT_u8SenseCtrl(u8 Copy_u8ExtInt,u8 Copy_u8ISCStatus)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <EXTINT_u8SenseCtrl+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <EXTINT_u8SenseCtrl+0x8>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1d90:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8ExtInt)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	3d 83       	std	Y+5, r19	; 0x05
    1d9a:	2c 83       	std	Y+4, r18	; 0x04
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	91 05       	cpc	r25, r1
    1da4:	01 f1       	breq	.+64     	; 0x1de6 <EXTINT_u8SenseCtrl+0x68>
    1da6:	2c 81       	ldd	r18, Y+4	; 0x04
    1da8:	3d 81       	ldd	r19, Y+5	; 0x05
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	89 f1       	breq	.+98     	; 0x1e12 <EXTINT_u8SenseCtrl+0x94>
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	9d 81       	ldd	r25, Y+5	; 0x05
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f0       	breq	.+2      	; 0x1dba <EXTINT_u8SenseCtrl+0x3c>
    1db8:	42 c0       	rjmp	.+132    	; 0x1e3e <EXTINT_u8SenseCtrl+0xc0>
	{
	case INT_0 :
		Temp_Reg = MCUC_REG;
    1dba:	e5 e5       	ldi	r30, 0x55	; 85
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 93 a7 00 	sts	0x00A7, r24
		Temp_Reg &= INT0_SC_CLR_MASK;
    1dc4:	80 91 a7 00 	lds	r24, 0x00A7
    1dc8:	8c 7f       	andi	r24, 0xFC	; 252
    1dca:	80 93 a7 00 	sts	0x00A7, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1dce:	90 91 a7 00 	lds	r25, 0x00A7
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	89 2b       	or	r24, r25
    1dd6:	80 93 a7 00 	sts	0x00A7, r24
		MCUC_REG = Temp_Reg;
    1dda:	e5 e5       	ldi	r30, 0x55	; 85
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 91 a7 00 	lds	r24, 0x00A7
    1de2:	80 83       	st	Z, r24
    1de4:	2e c0       	rjmp	.+92     	; 0x1e42 <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_1 :
		Temp_Reg = MCUC_REG;
    1de6:	e5 e5       	ldi	r30, 0x55	; 85
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	80 93 a7 00 	sts	0x00A7, r24
		Temp_Reg &= INT1_SC_CLR_MASK;
    1df0:	80 91 a7 00 	lds	r24, 0x00A7
    1df4:	83 7f       	andi	r24, 0xF3	; 243
    1df6:	80 93 a7 00 	sts	0x00A7, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1dfa:	90 91 a7 00 	lds	r25, 0x00A7
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	89 2b       	or	r24, r25
    1e02:	80 93 a7 00 	sts	0x00A7, r24
		MCUC_REG = Temp_Reg;
    1e06:	e5 e5       	ldi	r30, 0x55	; 85
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 91 a7 00 	lds	r24, 0x00A7
    1e0e:	80 83       	st	Z, r24
    1e10:	18 c0       	rjmp	.+48     	; 0x1e42 <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_2 :
		Temp_Reg = MCUCS_REG;
    1e12:	e4 e5       	ldi	r30, 0x54	; 84
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 93 a7 00 	sts	0x00A7, r24
		Temp_Reg &= INT2_SC_CLR_MASK;
    1e1c:	80 91 a7 00 	lds	r24, 0x00A7
    1e20:	8f 7b       	andi	r24, 0xBF	; 191
    1e22:	80 93 a7 00 	sts	0x00A7, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1e26:	90 91 a7 00 	lds	r25, 0x00A7
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	89 2b       	or	r24, r25
    1e2e:	80 93 a7 00 	sts	0x00A7, r24
		MCUCS_REG = Temp_Reg;
    1e32:	e4 e5       	ldi	r30, 0x54	; 84
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 91 a7 00 	lds	r24, 0x00A7
    1e3a:	80 83       	st	Z, r24
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <EXTINT_u8SenseCtrl+0xc4>
		break;
	default : Local_u8errStatus = RT_NOK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <DIO_u8setPortDirection>:
#define RT_NOK   (u8)   1
#define NULL     (void *)0


u8 DIO_u8setPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{   u8 Local_u8errStatus = RT_OK;
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <DIO_u8setPortDirection+0x6>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <DIO_u8setPortDirection+0x8>
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	8a 83       	std	Y+2, r24	; 0x02
    1e64:	6b 83       	std	Y+3, r22	; 0x03
    1e66:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3d 83       	std	Y+5, r19	; 0x05
    1e70:	2c 83       	std	Y+4, r18	; 0x04
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	91 05       	cpc	r25, r1
    1e7a:	d1 f0       	breq	.+52     	; 0x1eb0 <DIO_u8setPortDirection+0x5c>
    1e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <DIO_u8setPortDirection+0x3c>
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <DIO_u8setPortDirection+0x52>
    1e8e:	1f c0       	rjmp	.+62     	; 0x1ece <DIO_u8setPortDirection+0x7a>
    1e90:	2c 81       	ldd	r18, Y+4	; 0x04
    1e92:	3d 81       	ldd	r19, Y+5	; 0x05
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <DIO_u8setPortDirection+0x66>
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <DIO_u8setPortDirection+0x70>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <DIO_u8setPortDirection+0x7a>
{
case PORT_A :DIOA->DDR = Copy_u8direction ;break ;
    1ea6:	e9 e3       	ldi	r30, 0x39	; 57
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	81 83       	std	Z+1, r24	; 0x01
    1eae:	11 c0       	rjmp	.+34     	; 0x1ed2 <DIO_u8setPortDirection+0x7e>
case PORT_B :DIOB->DDR = Copy_u8direction ;break ;
    1eb0:	e6 e3       	ldi	r30, 0x36	; 54
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	81 83       	std	Z+1, r24	; 0x01
    1eb8:	0c c0       	rjmp	.+24     	; 0x1ed2 <DIO_u8setPortDirection+0x7e>
case PORT_C :DIOC->DDR = Copy_u8direction ;break ;
    1eba:	e3 e3       	ldi	r30, 0x33	; 51
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	81 83       	std	Z+1, r24	; 0x01
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <DIO_u8setPortDirection+0x7e>
case PORT_D :DIOD->DDR = Copy_u8direction ;break ;
    1ec4:	e0 e3       	ldi	r30, 0x30	; 48
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	81 83       	std	Z+1, r24	; 0x01
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <DIO_u8setPortDirection+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <DIO_u8setPortValue>:


u8 DIO_u8setPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{ u8 Local_u8errStatus = RT_OK;
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <DIO_u8setPortValue+0x6>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <DIO_u8setPortValue+0x8>
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	6b 83       	std	Y+3, r22	; 0x03
    1ef6:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	3d 83       	std	Y+5, r19	; 0x05
    1f00:	2c 83       	std	Y+4, r18	; 0x04
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	91 05       	cpc	r25, r1
    1f0a:	d1 f0       	breq	.+52     	; 0x1f40 <DIO_u8setPortValue+0x5c>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <DIO_u8setPortValue+0x3c>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	61 f0       	breq	.+24     	; 0x1f36 <DIO_u8setPortValue+0x52>
    1f1e:	1f c0       	rjmp	.+62     	; 0x1f5e <DIO_u8setPortValue+0x7a>
    1f20:	2c 81       	ldd	r18, Y+4	; 0x04
    1f22:	3d 81       	ldd	r19, Y+5	; 0x05
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	81 f0       	breq	.+32     	; 0x1f4a <DIO_u8setPortValue+0x66>
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	83 30       	cpi	r24, 0x03	; 3
    1f30:	91 05       	cpc	r25, r1
    1f32:	81 f0       	breq	.+32     	; 0x1f54 <DIO_u8setPortValue+0x70>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <DIO_u8setPortValue+0x7a>
{
case PORT_A :DIOA->PORT = Copy_u8Value ;break ;
    1f36:	e9 e3       	ldi	r30, 0x39	; 57
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	82 83       	std	Z+2, r24	; 0x02
    1f3e:	11 c0       	rjmp	.+34     	; 0x1f62 <DIO_u8setPortValue+0x7e>
case PORT_B :DIOB->PORT = Copy_u8Value ;break ;
    1f40:	e6 e3       	ldi	r30, 0x36	; 54
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	82 83       	std	Z+2, r24	; 0x02
    1f48:	0c c0       	rjmp	.+24     	; 0x1f62 <DIO_u8setPortValue+0x7e>
case PORT_C :DIOC->PORT = Copy_u8Value ;break ;
    1f4a:	e3 e3       	ldi	r30, 0x33	; 51
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	82 83       	std	Z+2, r24	; 0x02
    1f52:	07 c0       	rjmp	.+14     	; 0x1f62 <DIO_u8setPortValue+0x7e>
case PORT_D :DIOD->PORT = Copy_u8Value ;break ;
    1f54:	e0 e3       	ldi	r30, 0x30	; 48
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	82 83       	std	Z+2, r24	; 0x02
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <DIO_u8setPortValue+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <DIO_u8getPortValue>:


u8 DIO_u8getPortValue(u8 Copy_u8port, u8 * Copy_u8pValue)
{u8 Local_u8errStatus = RT_OK;
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <DIO_u8getPortValue+0x6>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <DIO_u8getPortValue+0x8>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <DIO_u8getPortValue+0xa>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    1f84:	7c 83       	std	Y+4, r23	; 0x04
    1f86:	6b 83       	std	Y+3, r22	; 0x03
    1f88:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pValue != NULL)
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <DIO_u8getPortValue+0x20>
    1f92:	3e c0       	rjmp	.+124    	; 0x2010 <DIO_u8getPortValue+0x9c>
{
	switch(Copy_u8port)
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	3e 83       	std	Y+6, r19	; 0x06
    1f9c:	2d 83       	std	Y+5, r18	; 0x05
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	e1 f0       	breq	.+56     	; 0x1fe0 <DIO_u8getPortValue+0x6c>
    1fa8:	2d 81       	ldd	r18, Y+5	; 0x05
    1faa:	3e 81       	ldd	r19, Y+6	; 0x06
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	31 05       	cpc	r19, r1
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <DIO_u8getPortValue+0x48>
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	61 f0       	breq	.+24     	; 0x1fd2 <DIO_u8getPortValue+0x5e>
    1fba:	27 c0       	rjmp	.+78     	; 0x200a <DIO_u8getPortValue+0x96>
    1fbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1fbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc0:	22 30       	cpi	r18, 0x02	; 2
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	a1 f0       	breq	.+40     	; 0x1fee <DIO_u8getPortValue+0x7a>
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	83 30       	cpi	r24, 0x03	; 3
    1fcc:	91 05       	cpc	r25, r1
    1fce:	b1 f0       	breq	.+44     	; 0x1ffc <DIO_u8getPortValue+0x88>
    1fd0:	1c c0       	rjmp	.+56     	; 0x200a <DIO_u8getPortValue+0x96>
	{
	case PORT_A : *Copy_u8pValue = DIOA->PIN ;break ;
    1fd2:	e9 e3       	ldi	r30, 0x39	; 57
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fda:	fc 81       	ldd	r31, Y+4	; 0x04
    1fdc:	80 83       	st	Z, r24
    1fde:	1a c0       	rjmp	.+52     	; 0x2014 <DIO_u8getPortValue+0xa0>
	case PORT_B : *Copy_u8pValue = DIOB->PIN ;break ;
    1fe0:	e6 e3       	ldi	r30, 0x36	; 54
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	80 83       	st	Z, r24
    1fec:	13 c0       	rjmp	.+38     	; 0x2014 <DIO_u8getPortValue+0xa0>
	case PORT_C : *Copy_u8pValue = DIOC->PIN ;break ;
    1fee:	e3 e3       	ldi	r30, 0x33	; 51
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff8:	80 83       	st	Z, r24
    1ffa:	0c c0       	rjmp	.+24     	; 0x2014 <DIO_u8getPortValue+0xa0>
	case PORT_D : *Copy_u8pValue = DIOD->PIN ;break ;
    1ffc:	e0 e3       	ldi	r30, 0x30	; 48
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	eb 81       	ldd	r30, Y+3	; 0x03
    2004:	fc 81       	ldd	r31, Y+4	; 0x04
    2006:	80 83       	st	Z, r24
    2008:	05 c0       	rjmp	.+10     	; 0x2014 <DIO_u8getPortValue+0xa0>
	default : Local_u8errStatus = RT_NOK ;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <DIO_u8getPortValue+0xa0>
	}
}
else
{
	Local_u8errStatus = RT_NOK;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	26 96       	adiw	r28, 0x06	; 6
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <DIO_u8setPinDirection>:

u8 DIO_u8setPinDirection(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8direction)
{u8 Local_u8errStatus = RT_OK;
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	2a 97       	sbiw	r28, 0x0a	; 10
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	8a 83       	std	Y+2, r24	; 0x02
    203e:	6b 83       	std	Y+3, r22	; 0x03
    2040:	4c 83       	std	Y+4, r20	; 0x04
    2042:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pin <=PIN_7)
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	88 30       	cpi	r24, 0x08	; 8
    2048:	08 f0       	brcs	.+2      	; 0x204c <DIO_u8setPinDirection+0x24>
    204a:	0d c1       	rjmp	.+538    	; 0x2266 <DIO_u8setPinDirection+0x23e>
{
	switch(Copy_u8direction)
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	3a 87       	std	Y+10, r19	; 0x0a
    2054:	29 87       	std	Y+9, r18	; 0x09
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	39 f0       	breq	.+14     	; 0x206c <DIO_u8setPinDirection+0x44>
    205e:	29 85       	ldd	r18, Y+9	; 0x09
    2060:	3a 85       	ldd	r19, Y+10	; 0x0a
    2062:	21 30       	cpi	r18, 0x01	; 1
    2064:	31 05       	cpc	r19, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <DIO_u8setPinDirection+0x42>
    2068:	80 c0       	rjmp	.+256    	; 0x216a <DIO_u8setPinDirection+0x142>
    206a:	fa c0       	rjmp	.+500    	; 0x2260 <DIO_u8setPinDirection+0x238>
	{
	case INPUT :
		switch(Copy_u8port)
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	38 87       	std	Y+8, r19	; 0x08
    2074:	2f 83       	std	Y+7, r18	; 0x07
    2076:	8f 81       	ldd	r24, Y+7	; 0x07
    2078:	98 85       	ldd	r25, Y+8	; 0x08
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	69 f1       	breq	.+90     	; 0x20da <DIO_u8setPinDirection+0xb2>
    2080:	2f 81       	ldd	r18, Y+7	; 0x07
    2082:	38 85       	ldd	r19, Y+8	; 0x08
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <DIO_u8setPinDirection+0x6c>
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	98 85       	ldd	r25, Y+8	; 0x08
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f0       	breq	.+26     	; 0x20ac <DIO_u8setPinDirection+0x84>
    2092:	68 c0       	rjmp	.+208    	; 0x2164 <DIO_u8setPinDirection+0x13c>
    2094:	2f 81       	ldd	r18, Y+7	; 0x07
    2096:	38 85       	ldd	r19, Y+8	; 0x08
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	a9 f1       	breq	.+106    	; 0x2108 <DIO_u8setPinDirection+0xe0>
    209e:	8f 81       	ldd	r24, Y+7	; 0x07
    20a0:	98 85       	ldd	r25, Y+8	; 0x08
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	09 f4       	brne	.+2      	; 0x20aa <DIO_u8setPinDirection+0x82>
    20a8:	46 c0       	rjmp	.+140    	; 0x2136 <DIO_u8setPinDirection+0x10e>
    20aa:	5c c0       	rjmp	.+184    	; 0x2164 <DIO_u8setPinDirection+0x13c>
		{
		case PORT_A : CLR_BIT(DIOA->DDR,Copy_u8pin);break;
    20ac:	a9 e3       	ldi	r26, 0x39	; 57
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e9 e3       	ldi	r30, 0x39	; 57
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	81 81       	ldd	r24, Z+1	; 0x01
    20b6:	48 2f       	mov	r20, r24
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 2e       	mov	r0, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <DIO_u8setPinDirection+0xa2>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <DIO_u8setPinDirection+0x9e>
    20ce:	80 95       	com	r24
    20d0:	84 23       	and	r24, r20
    20d2:	11 96       	adiw	r26, 0x01	; 1
    20d4:	8c 93       	st	X, r24
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	c8 c0       	rjmp	.+400    	; 0x226a <DIO_u8setPinDirection+0x242>
		case PORT_B : CLR_BIT(DIOB->DDR,Copy_u8pin);break;
    20da:	a6 e3       	ldi	r26, 0x36	; 54
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e6 e3       	ldi	r30, 0x36	; 54
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	81 81       	ldd	r24, Z+1	; 0x01
    20e4:	48 2f       	mov	r20, r24
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 2e       	mov	r0, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <DIO_u8setPinDirection+0xd0>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	0a 94       	dec	r0
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <DIO_u8setPinDirection+0xcc>
    20fc:	80 95       	com	r24
    20fe:	84 23       	and	r24, r20
    2100:	11 96       	adiw	r26, 0x01	; 1
    2102:	8c 93       	st	X, r24
    2104:	11 97       	sbiw	r26, 0x01	; 1
    2106:	b1 c0       	rjmp	.+354    	; 0x226a <DIO_u8setPinDirection+0x242>
		case PORT_C : CLR_BIT(DIOC->DDR,Copy_u8pin);break;
    2108:	a3 e3       	ldi	r26, 0x33	; 51
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e3 e3       	ldi	r30, 0x33	; 51
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	81 81       	ldd	r24, Z+1	; 0x01
    2112:	48 2f       	mov	r20, r24
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_u8setPinDirection+0xfe>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_u8setPinDirection+0xfa>
    212a:	80 95       	com	r24
    212c:	84 23       	and	r24, r20
    212e:	11 96       	adiw	r26, 0x01	; 1
    2130:	8c 93       	st	X, r24
    2132:	11 97       	sbiw	r26, 0x01	; 1
    2134:	9a c0       	rjmp	.+308    	; 0x226a <DIO_u8setPinDirection+0x242>
		case PORT_D : CLR_BIT(DIOD->DDR,Copy_u8pin);break;
    2136:	a0 e3       	ldi	r26, 0x30	; 48
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e0 e3       	ldi	r30, 0x30	; 48
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	81 81       	ldd	r24, Z+1	; 0x01
    2140:	48 2f       	mov	r20, r24
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8setPinDirection+0x12c>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8setPinDirection+0x128>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	8c 93       	st	X, r24
    2160:	11 97       	sbiw	r26, 0x01	; 1
    2162:	83 c0       	rjmp	.+262    	; 0x226a <DIO_u8setPinDirection+0x242>
		default : Local_u8errStatus = RT_NOK;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	80 c0       	rjmp	.+256    	; 0x226a <DIO_u8setPinDirection+0x242>
		}
		break;
		case OUTPUT :
			switch(Copy_u8port)
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	2d 83       	std	Y+5, r18	; 0x05
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	91 05       	cpc	r25, r1
    217c:	61 f1       	breq	.+88     	; 0x21d6 <DIO_u8setPinDirection+0x1ae>
    217e:	2d 81       	ldd	r18, Y+5	; 0x05
    2180:	3e 81       	ldd	r19, Y+6	; 0x06
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	2c f4       	brge	.+10     	; 0x2192 <DIO_u8setPinDirection+0x16a>
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f0       	breq	.+26     	; 0x21aa <DIO_u8setPinDirection+0x182>
    2190:	64 c0       	rjmp	.+200    	; 0x225a <DIO_u8setPinDirection+0x232>
    2192:	2d 81       	ldd	r18, Y+5	; 0x05
    2194:	3e 81       	ldd	r19, Y+6	; 0x06
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	99 f1       	breq	.+102    	; 0x2202 <DIO_u8setPinDirection+0x1da>
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <DIO_u8setPinDirection+0x180>
    21a6:	43 c0       	rjmp	.+134    	; 0x222e <DIO_u8setPinDirection+0x206>
    21a8:	58 c0       	rjmp	.+176    	; 0x225a <DIO_u8setPinDirection+0x232>
			{
			case PORT_A : SET_BIT(DIOA->DDR,Copy_u8pin);break;
    21aa:	a9 e3       	ldi	r26, 0x39	; 57
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e9 e3       	ldi	r30, 0x39	; 57
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	81 81       	ldd	r24, Z+1	; 0x01
    21b4:	48 2f       	mov	r20, r24
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_u8setPinDirection+0x1a0>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_u8setPinDirection+0x19c>
    21cc:	84 2b       	or	r24, r20
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8c 93       	st	X, r24
    21d2:	11 97       	sbiw	r26, 0x01	; 1
    21d4:	4a c0       	rjmp	.+148    	; 0x226a <DIO_u8setPinDirection+0x242>
			case PORT_B : SET_BIT(DIOB->DDR,Copy_u8pin);break;
    21d6:	a6 e3       	ldi	r26, 0x36	; 54
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e6 e3       	ldi	r30, 0x36	; 54
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	81 81       	ldd	r24, Z+1	; 0x01
    21e0:	48 2f       	mov	r20, r24
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <DIO_u8setPinDirection+0x1cc>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <DIO_u8setPinDirection+0x1c8>
    21f8:	84 2b       	or	r24, r20
    21fa:	11 96       	adiw	r26, 0x01	; 1
    21fc:	8c 93       	st	X, r24
    21fe:	11 97       	sbiw	r26, 0x01	; 1
    2200:	34 c0       	rjmp	.+104    	; 0x226a <DIO_u8setPinDirection+0x242>
			case PORT_C : SET_BIT(DIOC->DDR,Copy_u8pin);break;
    2202:	a3 e3       	ldi	r26, 0x33	; 51
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e3 e3       	ldi	r30, 0x33	; 51
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	81 81       	ldd	r24, Z+1	; 0x01
    220c:	48 2f       	mov	r20, r24
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <DIO_u8setPinDirection+0x1f8>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <DIO_u8setPinDirection+0x1f4>
    2224:	84 2b       	or	r24, r20
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	8c 93       	st	X, r24
    222a:	11 97       	sbiw	r26, 0x01	; 1
    222c:	1e c0       	rjmp	.+60     	; 0x226a <DIO_u8setPinDirection+0x242>
			case PORT_D : SET_BIT(DIOD->DDR,Copy_u8pin);break;
    222e:	a0 e3       	ldi	r26, 0x30	; 48
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e0 e3       	ldi	r30, 0x30	; 48
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	81 81       	ldd	r24, Z+1	; 0x01
    2238:	48 2f       	mov	r20, r24
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	02 2e       	mov	r0, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <DIO_u8setPinDirection+0x224>
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	0a 94       	dec	r0
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <DIO_u8setPinDirection+0x220>
    2250:	84 2b       	or	r24, r20
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	8c 93       	st	X, r24
    2256:	11 97       	sbiw	r26, 0x01	; 1
    2258:	08 c0       	rjmp	.+16     	; 0x226a <DIO_u8setPinDirection+0x242>
			default : Local_u8errStatus = RT_NOK;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	05 c0       	rjmp	.+10     	; 0x226a <DIO_u8setPinDirection+0x242>
			}
			break;
			default : Local_u8errStatus = RT_NOK;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_u8setPinDirection+0x242>

	}
}
else
{
	Local_u8errStatus = RT_NOK;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
}
    226c:	2a 96       	adiw	r28, 0x0a	; 10
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <DIO_u8setPinValue>:

u8 DIO_u8setPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8value)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	2a 97       	sbiw	r28, 0x0a	; 10
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	6b 83       	std	Y+3, r22	; 0x03
    2296:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    2298:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	88 30       	cpi	r24, 0x08	; 8
    229e:	08 f0       	brcs	.+2      	; 0x22a2 <DIO_u8setPinValue+0x24>
    22a0:	0d c1       	rjmp	.+538    	; 0x24bc <DIO_u8setPinValue+0x23e>
	{
		switch(Copy_u8value)
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	3a 87       	std	Y+10, r19	; 0x0a
    22aa:	29 87       	std	Y+9, r18	; 0x09
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	39 f0       	breq	.+14     	; 0x22c2 <DIO_u8setPinValue+0x44>
    22b4:	29 85       	ldd	r18, Y+9	; 0x09
    22b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    22b8:	21 30       	cpi	r18, 0x01	; 1
    22ba:	31 05       	cpc	r19, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <DIO_u8setPinValue+0x42>
    22be:	80 c0       	rjmp	.+256    	; 0x23c0 <DIO_u8setPinValue+0x142>
    22c0:	fa c0       	rjmp	.+500    	; 0x24b6 <DIO_u8setPinValue+0x238>
		{
		case LOW :
			switch(Copy_u8port)
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	38 87       	std	Y+8, r19	; 0x08
    22ca:	2f 83       	std	Y+7, r18	; 0x07
    22cc:	8f 81       	ldd	r24, Y+7	; 0x07
    22ce:	98 85       	ldd	r25, Y+8	; 0x08
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	91 05       	cpc	r25, r1
    22d4:	69 f1       	breq	.+90     	; 0x2330 <DIO_u8setPinValue+0xb2>
    22d6:	2f 81       	ldd	r18, Y+7	; 0x07
    22d8:	38 85       	ldd	r19, Y+8	; 0x08
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	2c f4       	brge	.+10     	; 0x22ea <DIO_u8setPinValue+0x6c>
    22e0:	8f 81       	ldd	r24, Y+7	; 0x07
    22e2:	98 85       	ldd	r25, Y+8	; 0x08
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f0       	breq	.+26     	; 0x2302 <DIO_u8setPinValue+0x84>
    22e8:	68 c0       	rjmp	.+208    	; 0x23ba <DIO_u8setPinValue+0x13c>
    22ea:	2f 81       	ldd	r18, Y+7	; 0x07
    22ec:	38 85       	ldd	r19, Y+8	; 0x08
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	31 05       	cpc	r19, r1
    22f2:	a9 f1       	breq	.+106    	; 0x235e <DIO_u8setPinValue+0xe0>
    22f4:	8f 81       	ldd	r24, Y+7	; 0x07
    22f6:	98 85       	ldd	r25, Y+8	; 0x08
    22f8:	83 30       	cpi	r24, 0x03	; 3
    22fa:	91 05       	cpc	r25, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <DIO_u8setPinValue+0x82>
    22fe:	46 c0       	rjmp	.+140    	; 0x238c <DIO_u8setPinValue+0x10e>
    2300:	5c c0       	rjmp	.+184    	; 0x23ba <DIO_u8setPinValue+0x13c>
			{
			case PORT_A : CLR_BIT(DIOA->PORT,Copy_u8pin);break;
    2302:	a9 e3       	ldi	r26, 0x39	; 57
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e9 e3       	ldi	r30, 0x39	; 57
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	48 2f       	mov	r20, r24
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_u8setPinValue+0xa2>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_u8setPinValue+0x9e>
    2324:	80 95       	com	r24
    2326:	84 23       	and	r24, r20
    2328:	12 96       	adiw	r26, 0x02	; 2
    232a:	8c 93       	st	X, r24
    232c:	12 97       	sbiw	r26, 0x02	; 2
    232e:	c8 c0       	rjmp	.+400    	; 0x24c0 <DIO_u8setPinValue+0x242>
			case PORT_B : CLR_BIT(DIOB->PORT,Copy_u8pin);break;
    2330:	a6 e3       	ldi	r26, 0x36	; 54
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e6 e3       	ldi	r30, 0x36	; 54
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	48 2f       	mov	r20, r24
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 2e       	mov	r0, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_u8setPinValue+0xd0>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	0a 94       	dec	r0
    2350:	e2 f7       	brpl	.-8      	; 0x234a <DIO_u8setPinValue+0xcc>
    2352:	80 95       	com	r24
    2354:	84 23       	and	r24, r20
    2356:	12 96       	adiw	r26, 0x02	; 2
    2358:	8c 93       	st	X, r24
    235a:	12 97       	sbiw	r26, 0x02	; 2
    235c:	b1 c0       	rjmp	.+354    	; 0x24c0 <DIO_u8setPinValue+0x242>
			case PORT_C : CLR_BIT(DIOC->PORT,Copy_u8pin);break;
    235e:	a3 e3       	ldi	r26, 0x33	; 51
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e3 e3       	ldi	r30, 0x33	; 51
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	48 2f       	mov	r20, r24
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <DIO_u8setPinValue+0xfe>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <DIO_u8setPinValue+0xfa>
    2380:	80 95       	com	r24
    2382:	84 23       	and	r24, r20
    2384:	12 96       	adiw	r26, 0x02	; 2
    2386:	8c 93       	st	X, r24
    2388:	12 97       	sbiw	r26, 0x02	; 2
    238a:	9a c0       	rjmp	.+308    	; 0x24c0 <DIO_u8setPinValue+0x242>
			case PORT_D : CLR_BIT(DIOD->PORT,Copy_u8pin);break;
    238c:	a0 e3       	ldi	r26, 0x30	; 48
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e0 e3       	ldi	r30, 0x30	; 48
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	48 2f       	mov	r20, r24
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_u8setPinValue+0x12c>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_u8setPinValue+0x128>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	12 96       	adiw	r26, 0x02	; 2
    23b4:	8c 93       	st	X, r24
    23b6:	12 97       	sbiw	r26, 0x02	; 2
    23b8:	83 c0       	rjmp	.+262    	; 0x24c0 <DIO_u8setPinValue+0x242>
			default : Local_u8errStatus = RT_NOK;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	80 c0       	rjmp	.+256    	; 0x24c0 <DIO_u8setPinValue+0x242>
			}
			break;
			case HIGH :
				switch(Copy_u8port)
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	3e 83       	std	Y+6, r19	; 0x06
    23c8:	2d 83       	std	Y+5, r18	; 0x05
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	91 05       	cpc	r25, r1
    23d2:	61 f1       	breq	.+88     	; 0x242c <DIO_u8setPinValue+0x1ae>
    23d4:	2d 81       	ldd	r18, Y+5	; 0x05
    23d6:	3e 81       	ldd	r19, Y+6	; 0x06
    23d8:	22 30       	cpi	r18, 0x02	; 2
    23da:	31 05       	cpc	r19, r1
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <DIO_u8setPinValue+0x16a>
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f0       	breq	.+26     	; 0x2400 <DIO_u8setPinValue+0x182>
    23e6:	64 c0       	rjmp	.+200    	; 0x24b0 <DIO_u8setPinValue+0x232>
    23e8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ea:	3e 81       	ldd	r19, Y+6	; 0x06
    23ec:	22 30       	cpi	r18, 0x02	; 2
    23ee:	31 05       	cpc	r19, r1
    23f0:	99 f1       	breq	.+102    	; 0x2458 <DIO_u8setPinValue+0x1da>
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	91 05       	cpc	r25, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <DIO_u8setPinValue+0x180>
    23fc:	43 c0       	rjmp	.+134    	; 0x2484 <DIO_u8setPinValue+0x206>
    23fe:	58 c0       	rjmp	.+176    	; 0x24b0 <DIO_u8setPinValue+0x232>
				{
				case PORT_A : SET_BIT(DIOA->PORT,Copy_u8pin);break;
    2400:	a9 e3       	ldi	r26, 0x39	; 57
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e9 e3       	ldi	r30, 0x39	; 57
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	48 2f       	mov	r20, r24
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 2e       	mov	r0, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <DIO_u8setPinValue+0x1a0>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <DIO_u8setPinValue+0x19c>
    2422:	84 2b       	or	r24, r20
    2424:	12 96       	adiw	r26, 0x02	; 2
    2426:	8c 93       	st	X, r24
    2428:	12 97       	sbiw	r26, 0x02	; 2
    242a:	4a c0       	rjmp	.+148    	; 0x24c0 <DIO_u8setPinValue+0x242>
				case PORT_B : SET_BIT(DIOB->PORT,Copy_u8pin);break;
    242c:	a6 e3       	ldi	r26, 0x36	; 54
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e6 e3       	ldi	r30, 0x36	; 54
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	48 2f       	mov	r20, r24
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 2e       	mov	r0, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <DIO_u8setPinValue+0x1cc>
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	0a 94       	dec	r0
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <DIO_u8setPinValue+0x1c8>
    244e:	84 2b       	or	r24, r20
    2450:	12 96       	adiw	r26, 0x02	; 2
    2452:	8c 93       	st	X, r24
    2454:	12 97       	sbiw	r26, 0x02	; 2
    2456:	34 c0       	rjmp	.+104    	; 0x24c0 <DIO_u8setPinValue+0x242>
				case PORT_C : SET_BIT(DIOC->PORT,Copy_u8pin);break;
    2458:	a3 e3       	ldi	r26, 0x33	; 51
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e3 e3       	ldi	r30, 0x33	; 51
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	48 2f       	mov	r20, r24
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 2e       	mov	r0, r18
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <DIO_u8setPinValue+0x1f8>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <DIO_u8setPinValue+0x1f4>
    247a:	84 2b       	or	r24, r20
    247c:	12 96       	adiw	r26, 0x02	; 2
    247e:	8c 93       	st	X, r24
    2480:	12 97       	sbiw	r26, 0x02	; 2
    2482:	1e c0       	rjmp	.+60     	; 0x24c0 <DIO_u8setPinValue+0x242>
				case PORT_D : SET_BIT(DIOD->PORT,Copy_u8pin);break;
    2484:	a0 e3       	ldi	r26, 0x30	; 48
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e0 e3       	ldi	r30, 0x30	; 48
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	48 2f       	mov	r20, r24
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <DIO_u8setPinValue+0x224>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <DIO_u8setPinValue+0x220>
    24a6:	84 2b       	or	r24, r20
    24a8:	12 96       	adiw	r26, 0x02	; 2
    24aa:	8c 93       	st	X, r24
    24ac:	12 97       	sbiw	r26, 0x02	; 2
    24ae:	08 c0       	rjmp	.+16     	; 0x24c0 <DIO_u8setPinValue+0x242>
				default : Local_u8errStatus = RT_NOK;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <DIO_u8setPinValue+0x242>
				}
				break;
				default : Local_u8errStatus = RT_NOK;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <DIO_u8setPinValue+0x242>
		}

	}
	else
	{
		Local_u8errStatus = RT_NOK;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c2:	2a 96       	adiw	r28, 0x0a	; 10
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <DIO_u8togglePinValue>:
u8 DIO_u8togglePinValue(u8 Copy_u8port, u8 Copy_u8pin)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <DIO_u8togglePinValue+0x6>
    24da:	00 d0       	rcall	.+0      	; 0x24dc <DIO_u8togglePinValue+0x8>
    24dc:	0f 92       	push	r0
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8errStatus = RT_OK;
    24e6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	88 30       	cpi	r24, 0x08	; 8
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <DIO_u8togglePinValue+0x1c>
    24ee:	7b c0       	rjmp	.+246    	; 0x25e6 <DIO_u8togglePinValue+0x112>
	{

		switch(Copy_u8port)
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	3d 83       	std	Y+5, r19	; 0x05
    24f8:	2c 83       	std	Y+4, r18	; 0x04
    24fa:	8c 81       	ldd	r24, Y+4	; 0x04
    24fc:	9d 81       	ldd	r25, Y+5	; 0x05
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	91 05       	cpc	r25, r1
    2502:	61 f1       	breq	.+88     	; 0x255c <DIO_u8togglePinValue+0x88>
    2504:	2c 81       	ldd	r18, Y+4	; 0x04
    2506:	3d 81       	ldd	r19, Y+5	; 0x05
    2508:	22 30       	cpi	r18, 0x02	; 2
    250a:	31 05       	cpc	r19, r1
    250c:	2c f4       	brge	.+10     	; 0x2518 <DIO_u8togglePinValue+0x44>
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	69 f0       	breq	.+26     	; 0x2530 <DIO_u8togglePinValue+0x5c>
    2516:	64 c0       	rjmp	.+200    	; 0x25e0 <DIO_u8togglePinValue+0x10c>
    2518:	2c 81       	ldd	r18, Y+4	; 0x04
    251a:	3d 81       	ldd	r19, Y+5	; 0x05
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	99 f1       	breq	.+102    	; 0x2588 <DIO_u8togglePinValue+0xb4>
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	83 30       	cpi	r24, 0x03	; 3
    2528:	91 05       	cpc	r25, r1
    252a:	09 f4       	brne	.+2      	; 0x252e <DIO_u8togglePinValue+0x5a>
    252c:	43 c0       	rjmp	.+134    	; 0x25b4 <DIO_u8togglePinValue+0xe0>
    252e:	58 c0       	rjmp	.+176    	; 0x25e0 <DIO_u8togglePinValue+0x10c>
		{
		case PORT_A : TOG_BIT(DIOA->PORT,Copy_u8pin);break;
    2530:	a9 e3       	ldi	r26, 0x39	; 57
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e9 e3       	ldi	r30, 0x39	; 57
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	48 2f       	mov	r20, r24
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 2e       	mov	r0, r18
    2548:	02 c0       	rjmp	.+4      	; 0x254e <DIO_u8togglePinValue+0x7a>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	0a 94       	dec	r0
    2550:	e2 f7       	brpl	.-8      	; 0x254a <DIO_u8togglePinValue+0x76>
    2552:	84 27       	eor	r24, r20
    2554:	12 96       	adiw	r26, 0x02	; 2
    2556:	8c 93       	st	X, r24
    2558:	12 97       	sbiw	r26, 0x02	; 2
    255a:	47 c0       	rjmp	.+142    	; 0x25ea <DIO_u8togglePinValue+0x116>
		case PORT_B : TOG_BIT(DIOB->PORT,Copy_u8pin);break;
    255c:	a6 e3       	ldi	r26, 0x36	; 54
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e6 e3       	ldi	r30, 0x36	; 54
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	48 2f       	mov	r20, r24
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 2e       	mov	r0, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <DIO_u8togglePinValue+0xa6>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <DIO_u8togglePinValue+0xa2>
    257e:	84 27       	eor	r24, r20
    2580:	12 96       	adiw	r26, 0x02	; 2
    2582:	8c 93       	st	X, r24
    2584:	12 97       	sbiw	r26, 0x02	; 2
    2586:	31 c0       	rjmp	.+98     	; 0x25ea <DIO_u8togglePinValue+0x116>
		case PORT_C : TOG_BIT(DIOC->PORT,Copy_u8pin);break;
    2588:	a3 e3       	ldi	r26, 0x33	; 51
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e3 e3       	ldi	r30, 0x33	; 51
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	48 2f       	mov	r20, r24
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	02 2e       	mov	r0, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_u8togglePinValue+0xd2>
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	0a 94       	dec	r0
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_u8togglePinValue+0xce>
    25aa:	84 27       	eor	r24, r20
    25ac:	12 96       	adiw	r26, 0x02	; 2
    25ae:	8c 93       	st	X, r24
    25b0:	12 97       	sbiw	r26, 0x02	; 2
    25b2:	1b c0       	rjmp	.+54     	; 0x25ea <DIO_u8togglePinValue+0x116>
		case PORT_D : TOG_BIT(DIOD->PORT,Copy_u8pin);break;
    25b4:	a0 e3       	ldi	r26, 0x30	; 48
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e0 e3       	ldi	r30, 0x30	; 48
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	48 2f       	mov	r20, r24
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 2e       	mov	r0, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <DIO_u8togglePinValue+0xfe>
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	0a 94       	dec	r0
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <DIO_u8togglePinValue+0xfa>
    25d6:	84 27       	eor	r24, r20
    25d8:	12 96       	adiw	r26, 0x02	; 2
    25da:	8c 93       	st	X, r24
    25dc:	12 97       	sbiw	r26, 0x02	; 2
    25de:	05 c0       	rjmp	.+10     	; 0x25ea <DIO_u8togglePinValue+0x116>
		default : Local_u8errStatus = RT_NOK;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <DIO_u8togglePinValue+0x116>
		}
	}

	else
	{
		Local_u8errStatus = RT_NOK;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    25ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <DIO_u8getPinValue>:
u8 DIO_u8getPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 * Copy_u8pValue)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	27 97       	sbiw	r28, 0x07	; 7
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	6b 83       	std	Y+3, r22	; 0x03
    2614:	5d 83       	std	Y+5, r21	; 0x05
    2616:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    2618:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pValue != NULL)
    261a:	8c 81       	ldd	r24, Y+4	; 0x04
    261c:	9d 81       	ldd	r25, Y+5	; 0x05
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	09 f4       	brne	.+2      	; 0x2624 <DIO_u8getPinValue+0x28>
    2622:	7b c0       	rjmp	.+246    	; 0x271a <DIO_u8getPinValue+0x11e>
	{
		if(Copy_u8pin <=PIN_7)
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	88 30       	cpi	r24, 0x08	; 8
    2628:	08 f0       	brcs	.+2      	; 0x262c <DIO_u8getPinValue+0x30>
    262a:	74 c0       	rjmp	.+232    	; 0x2714 <DIO_u8getPinValue+0x118>
		{
			switch(Copy_u8port)
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	3f 83       	std	Y+7, r19	; 0x07
    2634:	2e 83       	std	Y+6, r18	; 0x06
    2636:	4e 81       	ldd	r20, Y+6	; 0x06
    2638:	5f 81       	ldd	r21, Y+7	; 0x07
    263a:	41 30       	cpi	r20, 0x01	; 1
    263c:	51 05       	cpc	r21, r1
    263e:	59 f1       	breq	.+86     	; 0x2696 <DIO_u8getPinValue+0x9a>
    2640:	8e 81       	ldd	r24, Y+6	; 0x06
    2642:	9f 81       	ldd	r25, Y+7	; 0x07
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	91 05       	cpc	r25, r1
    2648:	34 f4       	brge	.+12     	; 0x2656 <DIO_u8getPinValue+0x5a>
    264a:	2e 81       	ldd	r18, Y+6	; 0x06
    264c:	3f 81       	ldd	r19, Y+7	; 0x07
    264e:	21 15       	cp	r18, r1
    2650:	31 05       	cpc	r19, r1
    2652:	69 f0       	breq	.+26     	; 0x266e <DIO_u8getPinValue+0x72>
    2654:	5c c0       	rjmp	.+184    	; 0x270e <DIO_u8getPinValue+0x112>
    2656:	4e 81       	ldd	r20, Y+6	; 0x06
    2658:	5f 81       	ldd	r21, Y+7	; 0x07
    265a:	42 30       	cpi	r20, 0x02	; 2
    265c:	51 05       	cpc	r21, r1
    265e:	79 f1       	breq	.+94     	; 0x26be <DIO_u8getPinValue+0xc2>
    2660:	8e 81       	ldd	r24, Y+6	; 0x06
    2662:	9f 81       	ldd	r25, Y+7	; 0x07
    2664:	83 30       	cpi	r24, 0x03	; 3
    2666:	91 05       	cpc	r25, r1
    2668:	09 f4       	brne	.+2      	; 0x266c <DIO_u8getPinValue+0x70>
    266a:	3d c0       	rjmp	.+122    	; 0x26e6 <DIO_u8getPinValue+0xea>
    266c:	50 c0       	rjmp	.+160    	; 0x270e <DIO_u8getPinValue+0x112>
			{
			case PORT_A :* Copy_u8pValue=GET_BIT(DIOA->PIN,Copy_u8pin);break ;
    266e:	e9 e3       	ldi	r30, 0x39	; 57
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a9 01       	movw	r20, r18
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <DIO_u8getPinValue+0x8a>
    2682:	55 95       	asr	r21
    2684:	47 95       	ror	r20
    2686:	8a 95       	dec	r24
    2688:	e2 f7       	brpl	.-8      	; 0x2682 <DIO_u8getPinValue+0x86>
    268a:	ca 01       	movw	r24, r20
    268c:	81 70       	andi	r24, 0x01	; 1
    268e:	ec 81       	ldd	r30, Y+4	; 0x04
    2690:	fd 81       	ldd	r31, Y+5	; 0x05
    2692:	80 83       	st	Z, r24
    2694:	44 c0       	rjmp	.+136    	; 0x271e <DIO_u8getPinValue+0x122>
			case PORT_B :* Copy_u8pValue=GET_BIT(DIOB->PIN,Copy_u8pin);break ;
    2696:	e6 e3       	ldi	r30, 0x36	; 54
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <DIO_u8getPinValue+0xb2>
    26aa:	55 95       	asr	r21
    26ac:	47 95       	ror	r20
    26ae:	8a 95       	dec	r24
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <DIO_u8getPinValue+0xae>
    26b2:	ca 01       	movw	r24, r20
    26b4:	81 70       	andi	r24, 0x01	; 1
    26b6:	ec 81       	ldd	r30, Y+4	; 0x04
    26b8:	fd 81       	ldd	r31, Y+5	; 0x05
    26ba:	80 83       	st	Z, r24
    26bc:	30 c0       	rjmp	.+96     	; 0x271e <DIO_u8getPinValue+0x122>
			case PORT_C :* Copy_u8pValue=GET_BIT(DIOC->PIN,Copy_u8pin);break ;
    26be:	e3 e3       	ldi	r30, 0x33	; 51
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a9 01       	movw	r20, r18
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <DIO_u8getPinValue+0xda>
    26d2:	55 95       	asr	r21
    26d4:	47 95       	ror	r20
    26d6:	8a 95       	dec	r24
    26d8:	e2 f7       	brpl	.-8      	; 0x26d2 <DIO_u8getPinValue+0xd6>
    26da:	ca 01       	movw	r24, r20
    26dc:	81 70       	andi	r24, 0x01	; 1
    26de:	ec 81       	ldd	r30, Y+4	; 0x04
    26e0:	fd 81       	ldd	r31, Y+5	; 0x05
    26e2:	80 83       	st	Z, r24
    26e4:	1c c0       	rjmp	.+56     	; 0x271e <DIO_u8getPinValue+0x122>
			case PORT_D :* Copy_u8pValue=GET_BIT(DIOD->PIN,Copy_u8pin);break ;
    26e6:	e0 e3       	ldi	r30, 0x30	; 48
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a9 01       	movw	r20, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <DIO_u8getPinValue+0x102>
    26fa:	55 95       	asr	r21
    26fc:	47 95       	ror	r20
    26fe:	8a 95       	dec	r24
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <DIO_u8getPinValue+0xfe>
    2702:	ca 01       	movw	r24, r20
    2704:	81 70       	andi	r24, 0x01	; 1
    2706:	ec 81       	ldd	r30, Y+4	; 0x04
    2708:	fd 81       	ldd	r31, Y+5	; 0x05
    270a:	80 83       	st	Z, r24
    270c:	08 c0       	rjmp	.+16     	; 0x271e <DIO_u8getPinValue+0x122>
			default : Local_u8errStatus = RT_NOK ;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	05 c0       	rjmp	.+10     	; 0x271e <DIO_u8getPinValue+0x122>
			}
		}
		else
		{
			Local_u8errStatus = RT_NOK;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	02 c0       	rjmp	.+4      	; 0x271e <DIO_u8getPinValue+0x122>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    271e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2720:	27 96       	adiw	r28, 0x07	; 7
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <LCD_4_BitvidInit>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character);
void LCD_4_BitvidsendCommand(u8 Copy_u8command);
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character);

void LCD_4_BitvidInit(void)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	e8 97       	sbiw	r28, 0x38	; 56
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,HALF_INPUT_HALF_OUTPUT);
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	60 ef       	ldi	r22, 0xF0	; 240
    274a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	62 e0       	ldi	r22, 0x02	; 2
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2762:	83 e0       	ldi	r24, 0x03	; 3
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e2       	ldi	r26, 0x20	; 32
    2772:	b2 e4       	ldi	r27, 0x42	; 66
    2774:	8d ab       	std	Y+53, r24	; 0x35
    2776:	9e ab       	std	Y+54, r25	; 0x36
    2778:	af ab       	std	Y+55, r26	; 0x37
    277a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6d a9       	ldd	r22, Y+53	; 0x35
    277e:	7e a9       	ldd	r23, Y+54	; 0x36
    2780:	8f a9       	ldd	r24, Y+55	; 0x37
    2782:	98 ad       	ldd	r25, Y+56	; 0x38
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	89 ab       	std	Y+49, r24	; 0x31
    2796:	9a ab       	std	Y+50, r25	; 0x32
    2798:	ab ab       	std	Y+51, r26	; 0x33
    279a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    279c:	69 a9       	ldd	r22, Y+49	; 0x31
    279e:	7a a9       	ldd	r23, Y+50	; 0x32
    27a0:	8b a9       	ldd	r24, Y+51	; 0x33
    27a2:	9c a9       	ldd	r25, Y+52	; 0x34
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <LCD_4_BitvidInit+0x8c>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	98 ab       	std	Y+48, r25	; 0x30
    27ba:	8f a7       	std	Y+47, r24	; 0x2f
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <LCD_4_BitvidInit+0x10a>
	else if (__tmp > 65535)
    27be:	69 a9       	ldd	r22, Y+49	; 0x31
    27c0:	7a a9       	ldd	r23, Y+50	; 0x32
    27c2:	8b a9       	ldd	r24, Y+51	; 0x33
    27c4:	9c a9       	ldd	r25, Y+52	; 0x34
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <LCD_4_BitvidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6d a9       	ldd	r22, Y+53	; 0x35
    27d8:	7e a9       	ldd	r23, Y+54	; 0x36
    27da:	8f a9       	ldd	r24, Y+55	; 0x37
    27dc:	98 ad       	ldd	r25, Y+56	; 0x38
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	98 ab       	std	Y+48, r25	; 0x30
    27fc:	8f a7       	std	Y+47, r24	; 0x2f
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_4_BitvidInit+0xec>
    2800:	88 ec       	ldi	r24, 0xC8	; 200
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9e a7       	std	Y+46, r25	; 0x2e
    2806:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2808:	8d a5       	ldd	r24, Y+45	; 0x2d
    280a:	9e a5       	ldd	r25, Y+46	; 0x2e
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_4_BitvidInit+0xda>
    2810:	9e a7       	std	Y+46, r25	; 0x2e
    2812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8f a5       	ldd	r24, Y+47	; 0x2f
    2816:	98 a9       	ldd	r25, Y+48	; 0x30
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	98 ab       	std	Y+48, r25	; 0x30
    281c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2820:	98 a9       	ldd	r25, Y+48	; 0x30
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_4_BitvidInit+0xce>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <LCD_4_BitvidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	69 a9       	ldd	r22, Y+49	; 0x31
    282a:	7a a9       	ldd	r23, Y+50	; 0x32
    282c:	8b a9       	ldd	r24, Y+51	; 0x33
    282e:	9c a9       	ldd	r25, Y+52	; 0x34
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	98 ab       	std	Y+48, r25	; 0x30
    283a:	8f a7       	std	Y+47, r24	; 0x2f
    283c:	8f a5       	ldd	r24, Y+47	; 0x2f
    283e:	98 a9       	ldd	r25, Y+48	; 0x30
    2840:	9c a7       	std	Y+44, r25	; 0x2c
    2842:	8b a7       	std	Y+43, r24	; 0x2b
    2844:	8b a5       	ldd	r24, Y+43	; 0x2b
    2846:	9c a5       	ldd	r25, Y+44	; 0x2c
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_4_BitvidInit+0x116>
    284c:	9c a7       	std	Y+44, r25	; 0x2c
    284e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_1);
    2850:	80 e2       	ldi	r24, 0x20	; 32
    2852:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_2);
    2856:	80 e2       	ldi	r24, 0x20	; 32
    2858:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_3);
    285c:	80 ec       	ldi	r24, 0xC0	; 192
    285e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a0 e8       	ldi	r26, 0x80	; 128
    2868:	bf e3       	ldi	r27, 0x3F	; 63
    286a:	8f a3       	std	Y+39, r24	; 0x27
    286c:	98 a7       	std	Y+40, r25	; 0x28
    286e:	a9 a7       	std	Y+41, r26	; 0x29
    2870:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2872:	6f a1       	ldd	r22, Y+39	; 0x27
    2874:	78 a5       	ldd	r23, Y+40	; 0x28
    2876:	89 a5       	ldd	r24, Y+41	; 0x29
    2878:	9a a5       	ldd	r25, Y+42	; 0x2a
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a ef       	ldi	r20, 0xFA	; 250
    2880:	54 e4       	ldi	r21, 0x44	; 68
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	8b a3       	std	Y+35, r24	; 0x23
    288c:	9c a3       	std	Y+36, r25	; 0x24
    288e:	ad a3       	std	Y+37, r26	; 0x25
    2890:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2892:	6b a1       	ldd	r22, Y+35	; 0x23
    2894:	7c a1       	ldd	r23, Y+36	; 0x24
    2896:	8d a1       	ldd	r24, Y+37	; 0x25
    2898:	9e a1       	ldd	r25, Y+38	; 0x26
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e8       	ldi	r20, 0x80	; 128
    28a0:	5f e3       	ldi	r21, 0x3F	; 63
    28a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a6:	88 23       	and	r24, r24
    28a8:	2c f4       	brge	.+10     	; 0x28b4 <LCD_4_BitvidInit+0x182>
		__ticks = 1;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9a a3       	std	Y+34, r25	; 0x22
    28b0:	89 a3       	std	Y+33, r24	; 0x21
    28b2:	3f c0       	rjmp	.+126    	; 0x2932 <LCD_4_BitvidInit+0x200>
	else if (__tmp > 65535)
    28b4:	6b a1       	ldd	r22, Y+35	; 0x23
    28b6:	7c a1       	ldd	r23, Y+36	; 0x24
    28b8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ba:	9e a1       	ldd	r25, Y+38	; 0x26
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	3f ef       	ldi	r19, 0xFF	; 255
    28c0:	4f e7       	ldi	r20, 0x7F	; 127
    28c2:	57 e4       	ldi	r21, 0x47	; 71
    28c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c8:	18 16       	cp	r1, r24
    28ca:	4c f5       	brge	.+82     	; 0x291e <LCD_4_BitvidInit+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28cc:	6f a1       	ldd	r22, Y+39	; 0x27
    28ce:	78 a5       	ldd	r23, Y+40	; 0x28
    28d0:	89 a5       	ldd	r24, Y+41	; 0x29
    28d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e2       	ldi	r20, 0x20	; 32
    28da:	51 e4       	ldi	r21, 0x41	; 65
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9a a3       	std	Y+34, r25	; 0x22
    28f2:	89 a3       	std	Y+33, r24	; 0x21
    28f4:	0f c0       	rjmp	.+30     	; 0x2914 <LCD_4_BitvidInit+0x1e2>
    28f6:	88 ec       	ldi	r24, 0xC8	; 200
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	98 a3       	std	Y+32, r25	; 0x20
    28fc:	8f 8f       	std	Y+31, r24	; 0x1f
    28fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2900:	98 a1       	ldd	r25, Y+32	; 0x20
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <LCD_4_BitvidInit+0x1d0>
    2906:	98 a3       	std	Y+32, r25	; 0x20
    2908:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290a:	89 a1       	ldd	r24, Y+33	; 0x21
    290c:	9a a1       	ldd	r25, Y+34	; 0x22
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	9a a3       	std	Y+34, r25	; 0x22
    2912:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2914:	89 a1       	ldd	r24, Y+33	; 0x21
    2916:	9a a1       	ldd	r25, Y+34	; 0x22
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	69 f7       	brne	.-38     	; 0x28f6 <LCD_4_BitvidInit+0x1c4>
    291c:	14 c0       	rjmp	.+40     	; 0x2946 <LCD_4_BitvidInit+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291e:	6b a1       	ldd	r22, Y+35	; 0x23
    2920:	7c a1       	ldd	r23, Y+36	; 0x24
    2922:	8d a1       	ldd	r24, Y+37	; 0x25
    2924:	9e a1       	ldd	r25, Y+38	; 0x26
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	9a a3       	std	Y+34, r25	; 0x22
    2930:	89 a3       	std	Y+33, r24	; 0x21
    2932:	89 a1       	ldd	r24, Y+33	; 0x21
    2934:	9a a1       	ldd	r25, Y+34	; 0x22
    2936:	9e 8f       	std	Y+30, r25	; 0x1e
    2938:	8d 8f       	std	Y+29, r24	; 0x1d
    293a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    293c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <LCD_4_BitvidInit+0x20c>
    2942:	9e 8f       	std	Y+30, r25	; 0x1e
    2944:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_ON_CMD_1);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_ON_CMD_2);
    294c:	80 ec       	ldi	r24, 0xC0	; 192
    294e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e8       	ldi	r26, 0x80	; 128
    2958:	bf e3       	ldi	r27, 0x3F	; 63
    295a:	89 8f       	std	Y+25, r24	; 0x19
    295c:	9a 8f       	std	Y+26, r25	; 0x1a
    295e:	ab 8f       	std	Y+27, r26	; 0x1b
    2960:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	69 8d       	ldd	r22, Y+25	; 0x19
    2964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8d 8b       	std	Y+21, r24	; 0x15
    297c:	9e 8b       	std	Y+22, r25	; 0x16
    297e:	af 8b       	std	Y+23, r26	; 0x17
    2980:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2982:	6d 89       	ldd	r22, Y+21	; 0x15
    2984:	7e 89       	ldd	r23, Y+22	; 0x16
    2986:	8f 89       	ldd	r24, Y+23	; 0x17
    2988:	98 8d       	ldd	r25, Y+24	; 0x18
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <LCD_4_BitvidInit+0x272>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9c 8b       	std	Y+20, r25	; 0x14
    29a0:	8b 8b       	std	Y+19, r24	; 0x13
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <LCD_4_BitvidInit+0x2f0>
	else if (__tmp > 65535)
    29a4:	6d 89       	ldd	r22, Y+21	; 0x15
    29a6:	7e 89       	ldd	r23, Y+22	; 0x16
    29a8:	8f 89       	ldd	r24, Y+23	; 0x17
    29aa:	98 8d       	ldd	r25, Y+24	; 0x18
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <LCD_4_BitvidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	69 8d       	ldd	r22, Y+25	; 0x19
    29be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <LCD_4_BitvidInit+0x2d2>
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9a 8b       	std	Y+18, r25	; 0x12
    29ec:	89 8b       	std	Y+17, r24	; 0x11
    29ee:	89 89       	ldd	r24, Y+17	; 0x11
    29f0:	9a 89       	ldd	r25, Y+18	; 0x12
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_4_BitvidInit+0x2c0>
    29f6:	9a 8b       	std	Y+18, r25	; 0x12
    29f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8b 89       	ldd	r24, Y+19	; 0x13
    29fc:	9c 89       	ldd	r25, Y+20	; 0x14
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	9c 8b       	std	Y+20, r25	; 0x14
    2a02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8b 89       	ldd	r24, Y+19	; 0x13
    2a06:	9c 89       	ldd	r25, Y+20	; 0x14
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <LCD_4_BitvidInit+0x2b4>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <LCD_4_BitvidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a10:	7e 89       	ldd	r23, Y+22	; 0x16
    2a12:	8f 89       	ldd	r24, Y+23	; 0x17
    2a14:	98 8d       	ldd	r25, Y+24	; 0x18
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	98 8b       	std	Y+16, r25	; 0x10
    2a28:	8f 87       	std	Y+15, r24	; 0x0f
    2a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2c:	98 89       	ldd	r25, Y+16	; 0x10
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_4_BitvidInit+0x2fc>
    2a32:	98 8b       	std	Y+16, r25	; 0x10
    2a34:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_CLEAR_CMD_1);
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_CLEAR_CMD_2);
    2a3c:	80 e1       	ldi	r24, 0x10	; 16
    2a3e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e4       	ldi	r27, 0x40	; 64
    2a4a:	8b 87       	std	Y+11, r24	; 0x0b
    2a4c:	9c 87       	std	Y+12, r25	; 0x0c
    2a4e:	ad 87       	std	Y+13, r26	; 0x0d
    2a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a ef       	ldi	r20, 0xFA	; 250
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8f 83       	std	Y+7, r24	; 0x07
    2a6c:	98 87       	std	Y+8, r25	; 0x08
    2a6e:	a9 87       	std	Y+9, r26	; 0x09
    2a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <LCD_4_BitvidInit+0x362>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <LCD_4_BitvidInit+0x3e0>
	else if (__tmp > 65535)
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <LCD_4_BitvidInit+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9e 83       	std	Y+6, r25	; 0x06
    2ad2:	8d 83       	std	Y+5, r24	; 0x05
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_4_BitvidInit+0x3c2>
    2ad6:	88 ec       	ldi	r24, 0xC8	; 200
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <LCD_4_BitvidInit+0x3b0>
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <LCD_4_BitvidInit+0x3a4>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <LCD_4_BitvidInit+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_4_BitvidInit+0x3ec>
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_4_BitvidsendCommand(LCD_4_BIT_ENTRY_MODE_SET_CMD_1);
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_ENTRY_MODE_SET_CMD_2);
    2b2c:	80 e6       	ldi	r24, 0x60	; 96
    2b2e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_4_BitvidsendCommand>
}
    2b32:	e8 96       	adiw	r28, 0x38	; 56
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <LCD_4_BitvidsendCommand>:
void LCD_4_BitvidsendCommand(u8 Copy_u8command)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	e9 97       	sbiw	r28, 0x39	; 57
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	62 e0       	ldi	r22, 0x02	; 2
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2b64:	83 e0       	ldi	r24, 0x03	; 3
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8command) & (HALF_LOW_HALF_HIGH)));
    2b6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b70:	98 2f       	mov	r25, r24
    2b72:	90 7f       	andi	r25, 0xF0	; 240
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	69 2f       	mov	r22, r25
    2b78:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e4       	ldi	r27, 0x40	; 64
    2b8e:	8d ab       	std	Y+53, r24	; 0x35
    2b90:	9e ab       	std	Y+54, r25	; 0x36
    2b92:	af ab       	std	Y+55, r26	; 0x37
    2b94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b96:	6d a9       	ldd	r22, Y+53	; 0x35
    2b98:	7e a9       	ldd	r23, Y+54	; 0x36
    2b9a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b9c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	4a ef       	ldi	r20, 0xFA	; 250
    2ba4:	54 e4       	ldi	r21, 0x44	; 68
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	89 ab       	std	Y+49, r24	; 0x31
    2bb0:	9a ab       	std	Y+50, r25	; 0x32
    2bb2:	ab ab       	std	Y+51, r26	; 0x33
    2bb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bba:	8b a9       	ldd	r24, Y+51	; 0x33
    2bbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e8       	ldi	r20, 0x80	; 128
    2bc4:	5f e3       	ldi	r21, 0x3F	; 63
    2bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bca:	88 23       	and	r24, r24
    2bcc:	2c f4       	brge	.+10     	; 0x2bd8 <LCD_4_BitvidsendCommand+0x94>
		__ticks = 1;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	98 ab       	std	Y+48, r25	; 0x30
    2bd4:	8f a7       	std	Y+47, r24	; 0x2f
    2bd6:	3f c0       	rjmp	.+126    	; 0x2c56 <LCD_4_BitvidsendCommand+0x112>
	else if (__tmp > 65535)
    2bd8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bda:	7a a9       	ldd	r23, Y+50	; 0x32
    2bdc:	8b a9       	ldd	r24, Y+51	; 0x33
    2bde:	9c a9       	ldd	r25, Y+52	; 0x34
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	3f ef       	ldi	r19, 0xFF	; 255
    2be4:	4f e7       	ldi	r20, 0x7F	; 127
    2be6:	57 e4       	ldi	r21, 0x47	; 71
    2be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bec:	18 16       	cp	r1, r24
    2bee:	4c f5       	brge	.+82     	; 0x2c42 <LCD_4_BitvidsendCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf0:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf2:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf4:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf6:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e2       	ldi	r20, 0x20	; 32
    2bfe:	51 e4       	ldi	r21, 0x41	; 65
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	98 ab       	std	Y+48, r25	; 0x30
    2c16:	8f a7       	std	Y+47, r24	; 0x2f
    2c18:	0f c0       	rjmp	.+30     	; 0x2c38 <LCD_4_BitvidsendCommand+0xf4>
    2c1a:	88 ec       	ldi	r24, 0xC8	; 200
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9e a7       	std	Y+46, r25	; 0x2e
    2c20:	8d a7       	std	Y+45, r24	; 0x2d
    2c22:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c24:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_4_BitvidsendCommand+0xe2>
    2c2a:	9e a7       	std	Y+46, r25	; 0x2e
    2c2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c30:	98 a9       	ldd	r25, Y+48	; 0x30
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	98 ab       	std	Y+48, r25	; 0x30
    2c36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	69 f7       	brne	.-38     	; 0x2c1a <LCD_4_BitvidsendCommand+0xd6>
    2c40:	14 c0       	rjmp	.+40     	; 0x2c6a <LCD_4_BitvidsendCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c42:	69 a9       	ldd	r22, Y+49	; 0x31
    2c44:	7a a9       	ldd	r23, Y+50	; 0x32
    2c46:	8b a9       	ldd	r24, Y+51	; 0x33
    2c48:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	98 ab       	std	Y+48, r25	; 0x30
    2c54:	8f a7       	std	Y+47, r24	; 0x2f
    2c56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c58:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5a:	9c a7       	std	Y+44, r25	; 0x2c
    2c5c:	8b a7       	std	Y+43, r24	; 0x2b
    2c5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c60:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <LCD_4_BitvidsendCommand+0x11e>
    2c66:	9c a7       	std	Y+44, r25	; 0x2c
    2c68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2c6a:	83 e0       	ldi	r24, 0x03	; 3
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e0       	ldi	r26, 0x00	; 0
    2c7a:	b0 e4       	ldi	r27, 0x40	; 64
    2c7c:	8f a3       	std	Y+39, r24	; 0x27
    2c7e:	98 a7       	std	Y+40, r25	; 0x28
    2c80:	a9 a7       	std	Y+41, r26	; 0x29
    2c82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	6f a1       	ldd	r22, Y+39	; 0x27
    2c86:	78 a5       	ldd	r23, Y+40	; 0x28
    2c88:	89 a5       	ldd	r24, Y+41	; 0x29
    2c8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a ef       	ldi	r20, 0xFA	; 250
    2c92:	54 e4       	ldi	r21, 0x44	; 68
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8b a3       	std	Y+35, r24	; 0x23
    2c9e:	9c a3       	std	Y+36, r25	; 0x24
    2ca0:	ad a3       	std	Y+37, r26	; 0x25
    2ca2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    2caa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	2c f4       	brge	.+10     	; 0x2cc6 <LCD_4_BitvidsendCommand+0x182>
		__ticks = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9a a3       	std	Y+34, r25	; 0x22
    2cc2:	89 a3       	std	Y+33, r24	; 0x21
    2cc4:	3f c0       	rjmp	.+126    	; 0x2d44 <LCD_4_BitvidsendCommand+0x200>
	else if (__tmp > 65535)
    2cc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cca:	8d a1       	ldd	r24, Y+37	; 0x25
    2ccc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	3f ef       	ldi	r19, 0xFF	; 255
    2cd2:	4f e7       	ldi	r20, 0x7F	; 127
    2cd4:	57 e4       	ldi	r21, 0x47	; 71
    2cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	4c f5       	brge	.+82     	; 0x2d30 <LCD_4_BitvidsendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cde:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ce2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ce4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e2       	ldi	r20, 0x20	; 32
    2cec:	51 e4       	ldi	r21, 0x41	; 65
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9a a3       	std	Y+34, r25	; 0x22
    2d04:	89 a3       	std	Y+33, r24	; 0x21
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <LCD_4_BitvidsendCommand+0x1e2>
    2d08:	88 ec       	ldi	r24, 0xC8	; 200
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	98 a3       	std	Y+32, r25	; 0x20
    2d0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d12:	98 a1       	ldd	r25, Y+32	; 0x20
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_4_BitvidsendCommand+0x1d0>
    2d18:	98 a3       	std	Y+32, r25	; 0x20
    2d1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	9a a3       	std	Y+34, r25	; 0x22
    2d24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	89 a1       	ldd	r24, Y+33	; 0x21
    2d28:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	69 f7       	brne	.-38     	; 0x2d08 <LCD_4_BitvidsendCommand+0x1c4>
    2d2e:	14 c0       	rjmp	.+40     	; 0x2d58 <LCD_4_BitvidsendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	6b a1       	ldd	r22, Y+35	; 0x23
    2d32:	7c a1       	ldd	r23, Y+36	; 0x24
    2d34:	8d a1       	ldd	r24, Y+37	; 0x25
    2d36:	9e a1       	ldd	r25, Y+38	; 0x26
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9a a3       	std	Y+34, r25	; 0x22
    2d42:	89 a3       	std	Y+33, r24	; 0x21
    2d44:	89 a1       	ldd	r24, Y+33	; 0x21
    2d46:	9a a1       	ldd	r25, Y+34	; 0x22
    2d48:	9e 8f       	std	Y+30, r25	; 0x1e
    2d4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_4_BitvidsendCommand+0x20c>
    2d54:	9e 8f       	std	Y+30, r25	; 0x1e
    2d56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	62 e0       	ldi	r22, 0x02	; 2
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2d62:	83 e0       	ldi	r24, 0x03	; 3
    2d64:	61 e0       	ldi	r22, 0x01	; 1
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8command<<4) & (HALF_LOW_HALF_HIGH)));
    2d6c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d6e:	88 2f       	mov	r24, r24
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	82 95       	swap	r24
    2d74:	92 95       	swap	r25
    2d76:	90 7f       	andi	r25, 0xF0	; 240
    2d78:	98 27       	eor	r25, r24
    2d7a:	80 7f       	andi	r24, 0xF0	; 240
    2d7c:	98 27       	eor	r25, r24
    2d7e:	98 2f       	mov	r25, r24
    2d80:	82 e0       	ldi	r24, 0x02	; 2
    2d82:	69 2f       	mov	r22, r25
    2d84:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	41 e0       	ldi	r20, 0x01	; 1
    2d8e:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a0 e0       	ldi	r26, 0x00	; 0
    2d98:	b0 e4       	ldi	r27, 0x40	; 64
    2d9a:	89 8f       	std	Y+25, r24	; 0x19
    2d9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2da0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	69 8d       	ldd	r22, Y+25	; 0x19
    2da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8d 8b       	std	Y+21, r24	; 0x15
    2dbc:	9e 8b       	std	Y+22, r25	; 0x16
    2dbe:	af 8b       	std	Y+23, r26	; 0x17
    2dc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <LCD_4_BitvidsendCommand+0x2a0>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9c 8b       	std	Y+20, r25	; 0x14
    2de0:	8b 8b       	std	Y+19, r24	; 0x13
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <LCD_4_BitvidsendCommand+0x31e>
	else if (__tmp > 65535)
    2de4:	6d 89       	ldd	r22, Y+21	; 0x15
    2de6:	7e 89       	ldd	r23, Y+22	; 0x16
    2de8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dea:	98 8d       	ldd	r25, Y+24	; 0x18
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <LCD_4_BitvidsendCommand+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9c 8b       	std	Y+20, r25	; 0x14
    2e22:	8b 8b       	std	Y+19, r24	; 0x13
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <LCD_4_BitvidsendCommand+0x300>
    2e26:	88 ec       	ldi	r24, 0xC8	; 200
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9a 8b       	std	Y+18, r25	; 0x12
    2e2c:	89 8b       	std	Y+17, r24	; 0x11
    2e2e:	89 89       	ldd	r24, Y+17	; 0x11
    2e30:	9a 89       	ldd	r25, Y+18	; 0x12
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <LCD_4_BitvidsendCommand+0x2ee>
    2e36:	9a 8b       	std	Y+18, r25	; 0x12
    2e38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	9c 8b       	std	Y+20, r25	; 0x14
    2e42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	8b 89       	ldd	r24, Y+19	; 0x13
    2e46:	9c 89       	ldd	r25, Y+20	; 0x14
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <LCD_4_BitvidsendCommand+0x2e2>
    2e4c:	14 c0       	rjmp	.+40     	; 0x2e76 <LCD_4_BitvidsendCommand+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e50:	7e 89       	ldd	r23, Y+22	; 0x16
    2e52:	8f 89       	ldd	r24, Y+23	; 0x17
    2e54:	98 8d       	ldd	r25, Y+24	; 0x18
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9c 8b       	std	Y+20, r25	; 0x14
    2e60:	8b 8b       	std	Y+19, r24	; 0x13
    2e62:	8b 89       	ldd	r24, Y+19	; 0x13
    2e64:	9c 89       	ldd	r25, Y+20	; 0x14
    2e66:	98 8b       	std	Y+16, r25	; 0x10
    2e68:	8f 87       	std	Y+15, r24	; 0x0f
    2e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6c:	98 89       	ldd	r25, Y+16	; 0x10
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <LCD_4_BitvidsendCommand+0x32a>
    2e72:	98 8b       	std	Y+16, r25	; 0x10
    2e74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2e76:	83 e0       	ldi	r24, 0x03	; 3
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	a0 e0       	ldi	r26, 0x00	; 0
    2e86:	b0 e4       	ldi	r27, 0x40	; 64
    2e88:	8b 87       	std	Y+11, r24	; 0x0b
    2e8a:	9c 87       	std	Y+12, r25	; 0x0c
    2e8c:	ad 87       	std	Y+13, r26	; 0x0d
    2e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	4a ef       	ldi	r20, 0xFA	; 250
    2e9e:	54 e4       	ldi	r21, 0x44	; 68
    2ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	8f 83       	std	Y+7, r24	; 0x07
    2eaa:	98 87       	std	Y+8, r25	; 0x08
    2eac:	a9 87       	std	Y+9, r26	; 0x09
    2eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb2:	78 85       	ldd	r23, Y+8	; 0x08
    2eb4:	89 85       	ldd	r24, Y+9	; 0x09
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e8       	ldi	r20, 0x80	; 128
    2ebe:	5f e3       	ldi	r21, 0x3F	; 63
    2ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec4:	88 23       	and	r24, r24
    2ec6:	2c f4       	brge	.+10     	; 0x2ed2 <LCD_4_BitvidsendCommand+0x38e>
		__ticks = 1;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9e 83       	std	Y+6, r25	; 0x06
    2ece:	8d 83       	std	Y+5, r24	; 0x05
    2ed0:	3f c0       	rjmp	.+126    	; 0x2f50 <LCD_4_BitvidsendCommand+0x40c>
	else if (__tmp > 65535)
    2ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed4:	78 85       	ldd	r23, Y+8	; 0x08
    2ed6:	89 85       	ldd	r24, Y+9	; 0x09
    2ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	3f ef       	ldi	r19, 0xFF	; 255
    2ede:	4f e7       	ldi	r20, 0x7F	; 127
    2ee0:	57 e4       	ldi	r21, 0x47	; 71
    2ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	4c f5       	brge	.+82     	; 0x2f3c <LCD_4_BitvidsendCommand+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e2       	ldi	r20, 0x20	; 32
    2ef8:	51 e4       	ldi	r21, 0x41	; 65
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	0f c0       	rjmp	.+30     	; 0x2f32 <LCD_4_BitvidsendCommand+0x3ee>
    2f14:	88 ec       	ldi	r24, 0xC8	; 200
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	9c 83       	std	Y+4, r25	; 0x04
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <LCD_4_BitvidsendCommand+0x3dc>
    2f24:	9c 83       	std	Y+4, r25	; 0x04
    2f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	69 f7       	brne	.-38     	; 0x2f14 <LCD_4_BitvidsendCommand+0x3d0>
    2f3a:	14 c0       	rjmp	.+40     	; 0x2f64 <LCD_4_BitvidsendCommand+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3e:	78 85       	ldd	r23, Y+8	; 0x08
    2f40:	89 85       	ldd	r24, Y+9	; 0x09
    2f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
    2f54:	9a 83       	std	Y+2, r25	; 0x02
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <LCD_4_BitvidsendCommand+0x418>
    2f60:	9a 83       	std	Y+2, r25	; 0x02
    2f62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2f64:	e9 96       	adiw	r28, 0x39	; 57
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <LCD_4_BitvidwriteCharacter>:
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character)
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	e9 97       	sbiw	r28, 0x39	; 57
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2f8c:	83 e0       	ldi	r24, 0x03	; 3
    2f8e:	62 e0       	ldi	r22, 0x02	; 2
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	61 e0       	ldi	r22, 0x01	; 1
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8character) & (HALF_LOW_HALF_HIGH)));
    2fa0:	89 ad       	ldd	r24, Y+57	; 0x39
    2fa2:	98 2f       	mov	r25, r24
    2fa4:	90 7f       	andi	r25, 0xF0	; 240
    2fa6:	82 e0       	ldi	r24, 0x02	; 2
    2fa8:	69 2f       	mov	r22, r25
    2faa:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	60 e0       	ldi	r22, 0x00	; 0
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e4       	ldi	r27, 0x40	; 64
    2fc0:	8d ab       	std	Y+53, r24	; 0x35
    2fc2:	9e ab       	std	Y+54, r25	; 0x36
    2fc4:	af ab       	std	Y+55, r26	; 0x37
    2fc6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	6d a9       	ldd	r22, Y+53	; 0x35
    2fca:	7e a9       	ldd	r23, Y+54	; 0x36
    2fcc:	8f a9       	ldd	r24, Y+55	; 0x37
    2fce:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a ef       	ldi	r20, 0xFA	; 250
    2fd6:	54 e4       	ldi	r21, 0x44	; 68
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	89 ab       	std	Y+49, r24	; 0x31
    2fe2:	9a ab       	std	Y+50, r25	; 0x32
    2fe4:	ab ab       	std	Y+51, r26	; 0x33
    2fe6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fe8:	69 a9       	ldd	r22, Y+49	; 0x31
    2fea:	7a a9       	ldd	r23, Y+50	; 0x32
    2fec:	8b a9       	ldd	r24, Y+51	; 0x33
    2fee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	2c f4       	brge	.+10     	; 0x300a <LCD_4_BitvidwriteCharacter+0x94>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	98 ab       	std	Y+48, r25	; 0x30
    3006:	8f a7       	std	Y+47, r24	; 0x2f
    3008:	3f c0       	rjmp	.+126    	; 0x3088 <LCD_4_BitvidwriteCharacter+0x112>
	else if (__tmp > 65535)
    300a:	69 a9       	ldd	r22, Y+49	; 0x31
    300c:	7a a9       	ldd	r23, Y+50	; 0x32
    300e:	8b a9       	ldd	r24, Y+51	; 0x33
    3010:	9c a9       	ldd	r25, Y+52	; 0x34
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	4c f5       	brge	.+82     	; 0x3074 <LCD_4_BitvidwriteCharacter+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	6d a9       	ldd	r22, Y+53	; 0x35
    3024:	7e a9       	ldd	r23, Y+54	; 0x36
    3026:	8f a9       	ldd	r24, Y+55	; 0x37
    3028:	98 ad       	ldd	r25, Y+56	; 0x38
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	98 ab       	std	Y+48, r25	; 0x30
    3048:	8f a7       	std	Y+47, r24	; 0x2f
    304a:	0f c0       	rjmp	.+30     	; 0x306a <LCD_4_BitvidwriteCharacter+0xf4>
    304c:	88 ec       	ldi	r24, 0xC8	; 200
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9e a7       	std	Y+46, r25	; 0x2e
    3052:	8d a7       	std	Y+45, r24	; 0x2d
    3054:	8d a5       	ldd	r24, Y+45	; 0x2d
    3056:	9e a5       	ldd	r25, Y+46	; 0x2e
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <LCD_4_BitvidwriteCharacter+0xe2>
    305c:	9e a7       	std	Y+46, r25	; 0x2e
    305e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3060:	8f a5       	ldd	r24, Y+47	; 0x2f
    3062:	98 a9       	ldd	r25, Y+48	; 0x30
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	98 ab       	std	Y+48, r25	; 0x30
    3068:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	8f a5       	ldd	r24, Y+47	; 0x2f
    306c:	98 a9       	ldd	r25, Y+48	; 0x30
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	69 f7       	brne	.-38     	; 0x304c <LCD_4_BitvidwriteCharacter+0xd6>
    3072:	14 c0       	rjmp	.+40     	; 0x309c <LCD_4_BitvidwriteCharacter+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	69 a9       	ldd	r22, Y+49	; 0x31
    3076:	7a a9       	ldd	r23, Y+50	; 0x32
    3078:	8b a9       	ldd	r24, Y+51	; 0x33
    307a:	9c a9       	ldd	r25, Y+52	; 0x34
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	98 ab       	std	Y+48, r25	; 0x30
    3086:	8f a7       	std	Y+47, r24	; 0x2f
    3088:	8f a5       	ldd	r24, Y+47	; 0x2f
    308a:	98 a9       	ldd	r25, Y+48	; 0x30
    308c:	9c a7       	std	Y+44, r25	; 0x2c
    308e:	8b a7       	std	Y+43, r24	; 0x2b
    3090:	8b a5       	ldd	r24, Y+43	; 0x2b
    3092:	9c a5       	ldd	r25, Y+44	; 0x2c
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <LCD_4_BitvidwriteCharacter+0x11e>
    3098:	9c a7       	std	Y+44, r25	; 0x2c
    309a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    309c:	83 e0       	ldi	r24, 0x03	; 3
    309e:	60 e0       	ldi	r22, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	a0 e0       	ldi	r26, 0x00	; 0
    30ac:	b0 e4       	ldi	r27, 0x40	; 64
    30ae:	8f a3       	std	Y+39, r24	; 0x27
    30b0:	98 a7       	std	Y+40, r25	; 0x28
    30b2:	a9 a7       	std	Y+41, r26	; 0x29
    30b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b6:	6f a1       	ldd	r22, Y+39	; 0x27
    30b8:	78 a5       	ldd	r23, Y+40	; 0x28
    30ba:	89 a5       	ldd	r24, Y+41	; 0x29
    30bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	4a ef       	ldi	r20, 0xFA	; 250
    30c4:	54 e4       	ldi	r21, 0x44	; 68
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	8b a3       	std	Y+35, r24	; 0x23
    30d0:	9c a3       	std	Y+36, r25	; 0x24
    30d2:	ad a3       	std	Y+37, r26	; 0x25
    30d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30d6:	6b a1       	ldd	r22, Y+35	; 0x23
    30d8:	7c a1       	ldd	r23, Y+36	; 0x24
    30da:	8d a1       	ldd	r24, Y+37	; 0x25
    30dc:	9e a1       	ldd	r25, Y+38	; 0x26
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e8       	ldi	r20, 0x80	; 128
    30e4:	5f e3       	ldi	r21, 0x3F	; 63
    30e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ea:	88 23       	and	r24, r24
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <LCD_4_BitvidwriteCharacter+0x182>
		__ticks = 1;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	9a a3       	std	Y+34, r25	; 0x22
    30f4:	89 a3       	std	Y+33, r24	; 0x21
    30f6:	3f c0       	rjmp	.+126    	; 0x3176 <LCD_4_BitvidwriteCharacter+0x200>
	else if (__tmp > 65535)
    30f8:	6b a1       	ldd	r22, Y+35	; 0x23
    30fa:	7c a1       	ldd	r23, Y+36	; 0x24
    30fc:	8d a1       	ldd	r24, Y+37	; 0x25
    30fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	3f ef       	ldi	r19, 0xFF	; 255
    3104:	4f e7       	ldi	r20, 0x7F	; 127
    3106:	57 e4       	ldi	r21, 0x47	; 71
    3108:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    310c:	18 16       	cp	r1, r24
    310e:	4c f5       	brge	.+82     	; 0x3162 <LCD_4_BitvidwriteCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3110:	6f a1       	ldd	r22, Y+39	; 0x27
    3112:	78 a5       	ldd	r23, Y+40	; 0x28
    3114:	89 a5       	ldd	r24, Y+41	; 0x29
    3116:	9a a5       	ldd	r25, Y+42	; 0x2a
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	40 e2       	ldi	r20, 0x20	; 32
    311e:	51 e4       	ldi	r21, 0x41	; 65
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9a a3       	std	Y+34, r25	; 0x22
    3136:	89 a3       	std	Y+33, r24	; 0x21
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <LCD_4_BitvidwriteCharacter+0x1e2>
    313a:	88 ec       	ldi	r24, 0xC8	; 200
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	98 a3       	std	Y+32, r25	; 0x20
    3140:	8f 8f       	std	Y+31, r24	; 0x1f
    3142:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3144:	98 a1       	ldd	r25, Y+32	; 0x20
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <LCD_4_BitvidwriteCharacter+0x1d0>
    314a:	98 a3       	std	Y+32, r25	; 0x20
    314c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314e:	89 a1       	ldd	r24, Y+33	; 0x21
    3150:	9a a1       	ldd	r25, Y+34	; 0x22
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	9a a3       	std	Y+34, r25	; 0x22
    3156:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3158:	89 a1       	ldd	r24, Y+33	; 0x21
    315a:	9a a1       	ldd	r25, Y+34	; 0x22
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	69 f7       	brne	.-38     	; 0x313a <LCD_4_BitvidwriteCharacter+0x1c4>
    3160:	14 c0       	rjmp	.+40     	; 0x318a <LCD_4_BitvidwriteCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3162:	6b a1       	ldd	r22, Y+35	; 0x23
    3164:	7c a1       	ldd	r23, Y+36	; 0x24
    3166:	8d a1       	ldd	r24, Y+37	; 0x25
    3168:	9e a1       	ldd	r25, Y+38	; 0x26
    316a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	9a a3       	std	Y+34, r25	; 0x22
    3174:	89 a3       	std	Y+33, r24	; 0x21
    3176:	89 a1       	ldd	r24, Y+33	; 0x21
    3178:	9a a1       	ldd	r25, Y+34	; 0x22
    317a:	9e 8f       	std	Y+30, r25	; 0x1e
    317c:	8d 8f       	std	Y+29, r24	; 0x1d
    317e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3180:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <LCD_4_BitvidwriteCharacter+0x20c>
    3186:	9e 8f       	std	Y+30, r25	; 0x1e
    3188:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    318a:	83 e0       	ldi	r24, 0x03	; 3
    318c:	62 e0       	ldi	r22, 0x02	; 2
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    3194:	83 e0       	ldi	r24, 0x03	; 3
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	40 e0       	ldi	r20, 0x00	; 0
    319a:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8character<<4) & (HALF_LOW_HALF_HIGH)));
    319e:	89 ad       	ldd	r24, Y+57	; 0x39
    31a0:	88 2f       	mov	r24, r24
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	82 95       	swap	r24
    31a6:	92 95       	swap	r25
    31a8:	90 7f       	andi	r25, 0xF0	; 240
    31aa:	98 27       	eor	r25, r24
    31ac:	80 7f       	andi	r24, 0xF0	; 240
    31ae:	98 27       	eor	r25, r24
    31b0:	98 2f       	mov	r25, r24
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	69 2f       	mov	r22, r25
    31b6:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    31ba:	83 e0       	ldi	r24, 0x03	; 3
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	a0 e0       	ldi	r26, 0x00	; 0
    31ca:	b0 e4       	ldi	r27, 0x40	; 64
    31cc:	89 8f       	std	Y+25, r24	; 0x19
    31ce:	9a 8f       	std	Y+26, r25	; 0x1a
    31d0:	ab 8f       	std	Y+27, r26	; 0x1b
    31d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	69 8d       	ldd	r22, Y+25	; 0x19
    31d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a ef       	ldi	r20, 0xFA	; 250
    31e2:	54 e4       	ldi	r21, 0x44	; 68
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8d 8b       	std	Y+21, r24	; 0x15
    31ee:	9e 8b       	std	Y+22, r25	; 0x16
    31f0:	af 8b       	std	Y+23, r26	; 0x17
    31f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f4:	6d 89       	ldd	r22, Y+21	; 0x15
    31f6:	7e 89       	ldd	r23, Y+22	; 0x16
    31f8:	8f 89       	ldd	r24, Y+23	; 0x17
    31fa:	98 8d       	ldd	r25, Y+24	; 0x18
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <LCD_4_BitvidwriteCharacter+0x2a0>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <LCD_4_BitvidwriteCharacter+0x31e>
	else if (__tmp > 65535)
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <LCD_4_BitvidwriteCharacter+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	69 8d       	ldd	r22, Y+25	; 0x19
    3230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <LCD_4_BitvidwriteCharacter+0x300>
    3258:	88 ec       	ldi	r24, 0xC8	; 200
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	9a 8b       	std	Y+18, r25	; 0x12
    325e:	89 8b       	std	Y+17, r24	; 0x11
    3260:	89 89       	ldd	r24, Y+17	; 0x11
    3262:	9a 89       	ldd	r25, Y+18	; 0x12
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <LCD_4_BitvidwriteCharacter+0x2ee>
    3268:	9a 8b       	std	Y+18, r25	; 0x12
    326a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <LCD_4_BitvidwriteCharacter+0x2e2>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <LCD_4_BitvidwriteCharacter+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	6d 89       	ldd	r22, Y+21	; 0x15
    3282:	7e 89       	ldd	r23, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	8b 89       	ldd	r24, Y+19	; 0x13
    3296:	9c 89       	ldd	r25, Y+20	; 0x14
    3298:	98 8b       	std	Y+16, r25	; 0x10
    329a:	8f 87       	std	Y+15, r24	; 0x0f
    329c:	8f 85       	ldd	r24, Y+15	; 0x0f
    329e:	98 89       	ldd	r25, Y+16	; 0x10
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <LCD_4_BitvidwriteCharacter+0x32a>
    32a4:	98 8b       	std	Y+16, r25	; 0x10
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    32a8:	83 e0       	ldi	r24, 0x03	; 3
    32aa:	60 e0       	ldi	r22, 0x00	; 0
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	a0 e0       	ldi	r26, 0x00	; 0
    32b8:	b0 e4       	ldi	r27, 0x40	; 64
    32ba:	8b 87       	std	Y+11, r24	; 0x0b
    32bc:	9c 87       	std	Y+12, r25	; 0x0c
    32be:	ad 87       	std	Y+13, r26	; 0x0d
    32c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	4a ef       	ldi	r20, 0xFA	; 250
    32d0:	54 e4       	ldi	r21, 0x44	; 68
    32d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	8f 83       	std	Y+7, r24	; 0x07
    32dc:	98 87       	std	Y+8, r25	; 0x08
    32de:	a9 87       	std	Y+9, r26	; 0x09
    32e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e2:	6f 81       	ldd	r22, Y+7	; 0x07
    32e4:	78 85       	ldd	r23, Y+8	; 0x08
    32e6:	89 85       	ldd	r24, Y+9	; 0x09
    32e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 e8       	ldi	r20, 0x80	; 128
    32f0:	5f e3       	ldi	r21, 0x3F	; 63
    32f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f6:	88 23       	and	r24, r24
    32f8:	2c f4       	brge	.+10     	; 0x3304 <LCD_4_BitvidwriteCharacter+0x38e>
		__ticks = 1;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
    3302:	3f c0       	rjmp	.+126    	; 0x3382 <LCD_4_BitvidwriteCharacter+0x40c>
	else if (__tmp > 65535)
    3304:	6f 81       	ldd	r22, Y+7	; 0x07
    3306:	78 85       	ldd	r23, Y+8	; 0x08
    3308:	89 85       	ldd	r24, Y+9	; 0x09
    330a:	9a 85       	ldd	r25, Y+10	; 0x0a
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	3f ef       	ldi	r19, 0xFF	; 255
    3310:	4f e7       	ldi	r20, 0x7F	; 127
    3312:	57 e4       	ldi	r21, 0x47	; 71
    3314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3318:	18 16       	cp	r1, r24
    331a:	4c f5       	brge	.+82     	; 0x336e <LCD_4_BitvidwriteCharacter+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331c:	6b 85       	ldd	r22, Y+11	; 0x0b
    331e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3320:	8d 85       	ldd	r24, Y+13	; 0x0d
    3322:	9e 85       	ldd	r25, Y+14	; 0x0e
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e2       	ldi	r20, 0x20	; 32
    332a:	51 e4       	ldi	r21, 0x41	; 65
    332c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <LCD_4_BitvidwriteCharacter+0x3ee>
    3346:	88 ec       	ldi	r24, 0xC8	; 200
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9c 83       	std	Y+4, r25	; 0x04
    334c:	8b 83       	std	Y+3, r24	; 0x03
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	9c 81       	ldd	r25, Y+4	; 0x04
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LCD_4_BitvidwriteCharacter+0x3dc>
    3356:	9c 83       	std	Y+4, r25	; 0x04
    3358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	69 f7       	brne	.-38     	; 0x3346 <LCD_4_BitvidwriteCharacter+0x3d0>
    336c:	14 c0       	rjmp	.+40     	; 0x3396 <LCD_4_BitvidwriteCharacter+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336e:	6f 81       	ldd	r22, Y+7	; 0x07
    3370:	78 85       	ldd	r23, Y+8	; 0x08
    3372:	89 85       	ldd	r24, Y+9	; 0x09
    3374:	9a 85       	ldd	r25, Y+10	; 0x0a
    3376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
    3382:	8d 81       	ldd	r24, Y+5	; 0x05
    3384:	9e 81       	ldd	r25, Y+6	; 0x06
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <LCD_4_BitvidwriteCharacter+0x418>
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3396:	e9 96       	adiw	r28, 0x39	; 57
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <LCD_8_BitvidInit>:

void LCD_8_BitvidInit(void)
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	e8 97       	sbiw	r28, 0x38	; 56
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,FULL_OUTPUT);
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	6f ef       	ldi	r22, 0xFF	; 255
    33c0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    33c4:	83 e0       	ldi	r24, 0x03	; 3
    33c6:	62 e0       	ldi	r22, 0x02	; 2
    33c8:	41 e0       	ldi	r20, 0x01	; 1
    33ca:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    33ce:	83 e0       	ldi	r24, 0x03	; 3
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a0 e2       	ldi	r26, 0x20	; 32
    33e8:	b2 e4       	ldi	r27, 0x42	; 66
    33ea:	8d ab       	std	Y+53, r24	; 0x35
    33ec:	9e ab       	std	Y+54, r25	; 0x36
    33ee:	af ab       	std	Y+55, r26	; 0x37
    33f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	6d a9       	ldd	r22, Y+53	; 0x35
    33f4:	7e a9       	ldd	r23, Y+54	; 0x36
    33f6:	8f a9       	ldd	r24, Y+55	; 0x37
    33f8:	98 ad       	ldd	r25, Y+56	; 0x38
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	4a ef       	ldi	r20, 0xFA	; 250
    3400:	54 e4       	ldi	r21, 0x44	; 68
    3402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	89 ab       	std	Y+49, r24	; 0x31
    340c:	9a ab       	std	Y+50, r25	; 0x32
    340e:	ab ab       	std	Y+51, r26	; 0x33
    3410:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3412:	69 a9       	ldd	r22, Y+49	; 0x31
    3414:	7a a9       	ldd	r23, Y+50	; 0x32
    3416:	8b a9       	ldd	r24, Y+51	; 0x33
    3418:	9c a9       	ldd	r25, Y+52	; 0x34
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	5f e3       	ldi	r21, 0x3F	; 63
    3422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3426:	88 23       	and	r24, r24
    3428:	2c f4       	brge	.+10     	; 0x3434 <LCD_8_BitvidInit+0x8c>
		__ticks = 1;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	98 ab       	std	Y+48, r25	; 0x30
    3430:	8f a7       	std	Y+47, r24	; 0x2f
    3432:	3f c0       	rjmp	.+126    	; 0x34b2 <LCD_8_BitvidInit+0x10a>
	else if (__tmp > 65535)
    3434:	69 a9       	ldd	r22, Y+49	; 0x31
    3436:	7a a9       	ldd	r23, Y+50	; 0x32
    3438:	8b a9       	ldd	r24, Y+51	; 0x33
    343a:	9c a9       	ldd	r25, Y+52	; 0x34
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	3f ef       	ldi	r19, 0xFF	; 255
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	57 e4       	ldi	r21, 0x47	; 71
    3444:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	4c f5       	brge	.+82     	; 0x349e <LCD_8_BitvidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344c:	6d a9       	ldd	r22, Y+53	; 0x35
    344e:	7e a9       	ldd	r23, Y+54	; 0x36
    3450:	8f a9       	ldd	r24, Y+55	; 0x37
    3452:	98 ad       	ldd	r25, Y+56	; 0x38
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e2       	ldi	r20, 0x20	; 32
    345a:	51 e4       	ldi	r21, 0x41	; 65
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	bc 01       	movw	r22, r24
    3466:	cd 01       	movw	r24, r26
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	98 ab       	std	Y+48, r25	; 0x30
    3472:	8f a7       	std	Y+47, r24	; 0x2f
    3474:	0f c0       	rjmp	.+30     	; 0x3494 <LCD_8_BitvidInit+0xec>
    3476:	88 ec       	ldi	r24, 0xC8	; 200
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	9e a7       	std	Y+46, r25	; 0x2e
    347c:	8d a7       	std	Y+45, r24	; 0x2d
    347e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3480:	9e a5       	ldd	r25, Y+46	; 0x2e
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <LCD_8_BitvidInit+0xda>
    3486:	9e a7       	std	Y+46, r25	; 0x2e
    3488:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348a:	8f a5       	ldd	r24, Y+47	; 0x2f
    348c:	98 a9       	ldd	r25, Y+48	; 0x30
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	98 ab       	std	Y+48, r25	; 0x30
    3492:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3494:	8f a5       	ldd	r24, Y+47	; 0x2f
    3496:	98 a9       	ldd	r25, Y+48	; 0x30
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	69 f7       	brne	.-38     	; 0x3476 <LCD_8_BitvidInit+0xce>
    349c:	14 c0       	rjmp	.+40     	; 0x34c6 <LCD_8_BitvidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349e:	69 a9       	ldd	r22, Y+49	; 0x31
    34a0:	7a a9       	ldd	r23, Y+50	; 0x32
    34a2:	8b a9       	ldd	r24, Y+51	; 0x33
    34a4:	9c a9       	ldd	r25, Y+52	; 0x34
    34a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	98 ab       	std	Y+48, r25	; 0x30
    34b0:	8f a7       	std	Y+47, r24	; 0x2f
    34b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b4:	98 a9       	ldd	r25, Y+48	; 0x30
    34b6:	9c a7       	std	Y+44, r25	; 0x2c
    34b8:	8b a7       	std	Y+43, r24	; 0x2b
    34ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    34bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <LCD_8_BitvidInit+0x116>
    34c2:	9c a7       	std	Y+44, r25	; 0x2c
    34c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_8_BitvidsendCommand(LCD_8_BIT_FUNCTION_SET_CMD);
    34c6:	88 e3       	ldi	r24, 0x38	; 56
    34c8:	0e 94 ce 1b 	call	0x379c	; 0x379c <LCD_8_BitvidsendCommand>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 e8       	ldi	r26, 0x80	; 128
    34d2:	bf e3       	ldi	r27, 0x3F	; 63
    34d4:	8f a3       	std	Y+39, r24	; 0x27
    34d6:	98 a7       	std	Y+40, r25	; 0x28
    34d8:	a9 a7       	std	Y+41, r26	; 0x29
    34da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	6f a1       	ldd	r22, Y+39	; 0x27
    34de:	78 a5       	ldd	r23, Y+40	; 0x28
    34e0:	89 a5       	ldd	r24, Y+41	; 0x29
    34e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a ef       	ldi	r20, 0xFA	; 250
    34ea:	54 e4       	ldi	r21, 0x44	; 68
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8b a3       	std	Y+35, r24	; 0x23
    34f6:	9c a3       	std	Y+36, r25	; 0x24
    34f8:	ad a3       	std	Y+37, r26	; 0x25
    34fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34fc:	6b a1       	ldd	r22, Y+35	; 0x23
    34fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3500:	8d a1       	ldd	r24, Y+37	; 0x25
    3502:	9e a1       	ldd	r25, Y+38	; 0x26
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e8       	ldi	r20, 0x80	; 128
    350a:	5f e3       	ldi	r21, 0x3F	; 63
    350c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3510:	88 23       	and	r24, r24
    3512:	2c f4       	brge	.+10     	; 0x351e <LCD_8_BitvidInit+0x176>
		__ticks = 1;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9a a3       	std	Y+34, r25	; 0x22
    351a:	89 a3       	std	Y+33, r24	; 0x21
    351c:	3f c0       	rjmp	.+126    	; 0x359c <LCD_8_BitvidInit+0x1f4>
	else if (__tmp > 65535)
    351e:	6b a1       	ldd	r22, Y+35	; 0x23
    3520:	7c a1       	ldd	r23, Y+36	; 0x24
    3522:	8d a1       	ldd	r24, Y+37	; 0x25
    3524:	9e a1       	ldd	r25, Y+38	; 0x26
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	3f ef       	ldi	r19, 0xFF	; 255
    352a:	4f e7       	ldi	r20, 0x7F	; 127
    352c:	57 e4       	ldi	r21, 0x47	; 71
    352e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3532:	18 16       	cp	r1, r24
    3534:	4c f5       	brge	.+82     	; 0x3588 <LCD_8_BitvidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	6f a1       	ldd	r22, Y+39	; 0x27
    3538:	78 a5       	ldd	r23, Y+40	; 0x28
    353a:	89 a5       	ldd	r24, Y+41	; 0x29
    353c:	9a a5       	ldd	r25, Y+42	; 0x2a
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9a a3       	std	Y+34, r25	; 0x22
    355c:	89 a3       	std	Y+33, r24	; 0x21
    355e:	0f c0       	rjmp	.+30     	; 0x357e <LCD_8_BitvidInit+0x1d6>
    3560:	88 ec       	ldi	r24, 0xC8	; 200
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	98 a3       	std	Y+32, r25	; 0x20
    3566:	8f 8f       	std	Y+31, r24	; 0x1f
    3568:	8f 8d       	ldd	r24, Y+31	; 0x1f
    356a:	98 a1       	ldd	r25, Y+32	; 0x20
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <LCD_8_BitvidInit+0x1c4>
    3570:	98 a3       	std	Y+32, r25	; 0x20
    3572:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3574:	89 a1       	ldd	r24, Y+33	; 0x21
    3576:	9a a1       	ldd	r25, Y+34	; 0x22
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	9a a3       	std	Y+34, r25	; 0x22
    357c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	89 a1       	ldd	r24, Y+33	; 0x21
    3580:	9a a1       	ldd	r25, Y+34	; 0x22
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	69 f7       	brne	.-38     	; 0x3560 <LCD_8_BitvidInit+0x1b8>
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <LCD_8_BitvidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	6b a1       	ldd	r22, Y+35	; 0x23
    358a:	7c a1       	ldd	r23, Y+36	; 0x24
    358c:	8d a1       	ldd	r24, Y+37	; 0x25
    358e:	9e a1       	ldd	r25, Y+38	; 0x26
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9a a3       	std	Y+34, r25	; 0x22
    359a:	89 a3       	std	Y+33, r24	; 0x21
    359c:	89 a1       	ldd	r24, Y+33	; 0x21
    359e:	9a a1       	ldd	r25, Y+34	; 0x22
    35a0:	9e 8f       	std	Y+30, r25	; 0x1e
    35a2:	8d 8f       	std	Y+29, r24	; 0x1d
    35a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <LCD_8_BitvidInit+0x200>
    35ac:	9e 8f       	std	Y+30, r25	; 0x1e
    35ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_ON_CMD);
    35b0:	8c e0       	ldi	r24, 0x0C	; 12
    35b2:	0e 94 ce 1b 	call	0x379c	; 0x379c <LCD_8_BitvidsendCommand>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a0 e8       	ldi	r26, 0x80	; 128
    35bc:	bf e3       	ldi	r27, 0x3F	; 63
    35be:	89 8f       	std	Y+25, r24	; 0x19
    35c0:	9a 8f       	std	Y+26, r25	; 0x1a
    35c2:	ab 8f       	std	Y+27, r26	; 0x1b
    35c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c6:	69 8d       	ldd	r22, Y+25	; 0x19
    35c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	4a ef       	ldi	r20, 0xFA	; 250
    35d4:	54 e4       	ldi	r21, 0x44	; 68
    35d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	8d 8b       	std	Y+21, r24	; 0x15
    35e0:	9e 8b       	std	Y+22, r25	; 0x16
    35e2:	af 8b       	std	Y+23, r26	; 0x17
    35e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35e6:	6d 89       	ldd	r22, Y+21	; 0x15
    35e8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ea:	8f 89       	ldd	r24, Y+23	; 0x17
    35ec:	98 8d       	ldd	r25, Y+24	; 0x18
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	2c f4       	brge	.+10     	; 0x3608 <LCD_8_BitvidInit+0x260>
		__ticks = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9c 8b       	std	Y+20, r25	; 0x14
    3604:	8b 8b       	std	Y+19, r24	; 0x13
    3606:	3f c0       	rjmp	.+126    	; 0x3686 <LCD_8_BitvidInit+0x2de>
	else if (__tmp > 65535)
    3608:	6d 89       	ldd	r22, Y+21	; 0x15
    360a:	7e 89       	ldd	r23, Y+22	; 0x16
    360c:	8f 89       	ldd	r24, Y+23	; 0x17
    360e:	98 8d       	ldd	r25, Y+24	; 0x18
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	3f ef       	ldi	r19, 0xFF	; 255
    3614:	4f e7       	ldi	r20, 0x7F	; 127
    3616:	57 e4       	ldi	r21, 0x47	; 71
    3618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    361c:	18 16       	cp	r1, r24
    361e:	4c f5       	brge	.+82     	; 0x3672 <LCD_8_BitvidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3620:	69 8d       	ldd	r22, Y+25	; 0x19
    3622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9c 8b       	std	Y+20, r25	; 0x14
    3646:	8b 8b       	std	Y+19, r24	; 0x13
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <LCD_8_BitvidInit+0x2c0>
    364a:	88 ec       	ldi	r24, 0xC8	; 200
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	9a 8b       	std	Y+18, r25	; 0x12
    3650:	89 8b       	std	Y+17, r24	; 0x11
    3652:	89 89       	ldd	r24, Y+17	; 0x11
    3654:	9a 89       	ldd	r25, Y+18	; 0x12
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <LCD_8_BitvidInit+0x2ae>
    365a:	9a 8b       	std	Y+18, r25	; 0x12
    365c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365e:	8b 89       	ldd	r24, Y+19	; 0x13
    3660:	9c 89       	ldd	r25, Y+20	; 0x14
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	9c 8b       	std	Y+20, r25	; 0x14
    3666:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3668:	8b 89       	ldd	r24, Y+19	; 0x13
    366a:	9c 89       	ldd	r25, Y+20	; 0x14
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	69 f7       	brne	.-38     	; 0x364a <LCD_8_BitvidInit+0x2a2>
    3670:	14 c0       	rjmp	.+40     	; 0x369a <LCD_8_BitvidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	6d 89       	ldd	r22, Y+21	; 0x15
    3674:	7e 89       	ldd	r23, Y+22	; 0x16
    3676:	8f 89       	ldd	r24, Y+23	; 0x17
    3678:	98 8d       	ldd	r25, Y+24	; 0x18
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	9c 8b       	std	Y+20, r25	; 0x14
    3684:	8b 8b       	std	Y+19, r24	; 0x13
    3686:	8b 89       	ldd	r24, Y+19	; 0x13
    3688:	9c 89       	ldd	r25, Y+20	; 0x14
    368a:	98 8b       	std	Y+16, r25	; 0x10
    368c:	8f 87       	std	Y+15, r24	; 0x0f
    368e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3690:	98 89       	ldd	r25, Y+16	; 0x10
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <LCD_8_BitvidInit+0x2ea>
    3696:	98 8b       	std	Y+16, r25	; 0x10
    3698:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_CLEAR_CMD);
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	0e 94 ce 1b 	call	0x379c	; 0x379c <LCD_8_BitvidsendCommand>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a0 e0       	ldi	r26, 0x00	; 0
    36a6:	b0 e4       	ldi	r27, 0x40	; 64
    36a8:	8b 87       	std	Y+11, r24	; 0x0b
    36aa:	9c 87       	std	Y+12, r25	; 0x0c
    36ac:	ad 87       	std	Y+13, r26	; 0x0d
    36ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4a ef       	ldi	r20, 0xFA	; 250
    36be:	54 e4       	ldi	r21, 0x44	; 68
    36c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	8f 83       	std	Y+7, r24	; 0x07
    36ca:	98 87       	std	Y+8, r25	; 0x08
    36cc:	a9 87       	std	Y+9, r26	; 0x09
    36ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d0:	6f 81       	ldd	r22, Y+7	; 0x07
    36d2:	78 85       	ldd	r23, Y+8	; 0x08
    36d4:	89 85       	ldd	r24, Y+9	; 0x09
    36d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e8       	ldi	r20, 0x80	; 128
    36de:	5f e3       	ldi	r21, 0x3F	; 63
    36e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e4:	88 23       	and	r24, r24
    36e6:	2c f4       	brge	.+10     	; 0x36f2 <LCD_8_BitvidInit+0x34a>
		__ticks = 1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9e 83       	std	Y+6, r25	; 0x06
    36ee:	8d 83       	std	Y+5, r24	; 0x05
    36f0:	3f c0       	rjmp	.+126    	; 0x3770 <LCD_8_BitvidInit+0x3c8>
	else if (__tmp > 65535)
    36f2:	6f 81       	ldd	r22, Y+7	; 0x07
    36f4:	78 85       	ldd	r23, Y+8	; 0x08
    36f6:	89 85       	ldd	r24, Y+9	; 0x09
    36f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	4c f5       	brge	.+82     	; 0x375c <LCD_8_BitvidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	6b 85       	ldd	r22, Y+11	; 0x0b
    370c:	7c 85       	ldd	r23, Y+12	; 0x0c
    370e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3710:	9e 85       	ldd	r25, Y+14	; 0x0e
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e2       	ldi	r20, 0x20	; 32
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	bc 01       	movw	r22, r24
    3724:	cd 01       	movw	r24, r26
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	9e 83       	std	Y+6, r25	; 0x06
    3730:	8d 83       	std	Y+5, r24	; 0x05
    3732:	0f c0       	rjmp	.+30     	; 0x3752 <LCD_8_BitvidInit+0x3aa>
    3734:	88 ec       	ldi	r24, 0xC8	; 200
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9c 83       	std	Y+4, r25	; 0x04
    373a:	8b 83       	std	Y+3, r24	; 0x03
    373c:	8b 81       	ldd	r24, Y+3	; 0x03
    373e:	9c 81       	ldd	r25, Y+4	; 0x04
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <LCD_8_BitvidInit+0x398>
    3744:	9c 83       	std	Y+4, r25	; 0x04
    3746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3748:	8d 81       	ldd	r24, Y+5	; 0x05
    374a:	9e 81       	ldd	r25, Y+6	; 0x06
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	8d 81       	ldd	r24, Y+5	; 0x05
    3754:	9e 81       	ldd	r25, Y+6	; 0x06
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	69 f7       	brne	.-38     	; 0x3734 <LCD_8_BitvidInit+0x38c>
    375a:	14 c0       	rjmp	.+40     	; 0x3784 <LCD_8_BitvidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	9a 81       	ldd	r25, Y+2	; 0x02
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <LCD_8_BitvidInit+0x3d4>
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_8_BitvidsendCommand(LCD_8_BIT_ENTRY_MODE_SET_CMD);
    3784:	86 e0       	ldi	r24, 0x06	; 6
    3786:	0e 94 ce 1b 	call	0x379c	; 0x379c <LCD_8_BitvidsendCommand>

}
    378a:	e8 96       	adiw	r28, 0x38	; 56
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <LCD_8_BitvidsendCommand>:
void LCD_8_BitvidsendCommand(u8 Copy_u8command)
{
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	6d 97       	sbiw	r28, 0x1d	; 29
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
    37b0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    37b2:	83 e0       	ldi	r24, 0x03	; 3
    37b4:	62 e0       	ldi	r22, 0x02	; 2
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    37bc:	83 e0       	ldi	r24, 0x03	; 3
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8command);
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37ca:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 e0       	ldi	r26, 0x00	; 0
    37de:	b0 e4       	ldi	r27, 0x40	; 64
    37e0:	89 8f       	std	Y+25, r24	; 0x19
    37e2:	9a 8f       	std	Y+26, r25	; 0x1a
    37e4:	ab 8f       	std	Y+27, r26	; 0x1b
    37e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e8:	69 8d       	ldd	r22, Y+25	; 0x19
    37ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a ef       	ldi	r20, 0xFA	; 250
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8d 8b       	std	Y+21, r24	; 0x15
    3802:	9e 8b       	std	Y+22, r25	; 0x16
    3804:	af 8b       	std	Y+23, r26	; 0x17
    3806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3808:	6d 89       	ldd	r22, Y+21	; 0x15
    380a:	7e 89       	ldd	r23, Y+22	; 0x16
    380c:	8f 89       	ldd	r24, Y+23	; 0x17
    380e:	98 8d       	ldd	r25, Y+24	; 0x18
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	2c f4       	brge	.+10     	; 0x382a <LCD_8_BitvidsendCommand+0x8e>
		__ticks = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9c 8b       	std	Y+20, r25	; 0x14
    3826:	8b 8b       	std	Y+19, r24	; 0x13
    3828:	3f c0       	rjmp	.+126    	; 0x38a8 <LCD_8_BitvidsendCommand+0x10c>
	else if (__tmp > 65535)
    382a:	6d 89       	ldd	r22, Y+21	; 0x15
    382c:	7e 89       	ldd	r23, Y+22	; 0x16
    382e:	8f 89       	ldd	r24, Y+23	; 0x17
    3830:	98 8d       	ldd	r25, Y+24	; 0x18
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	3f ef       	ldi	r19, 0xFF	; 255
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	57 e4       	ldi	r21, 0x47	; 71
    383a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383e:	18 16       	cp	r1, r24
    3840:	4c f5       	brge	.+82     	; 0x3894 <LCD_8_BitvidsendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	69 8d       	ldd	r22, Y+25	; 0x19
    3844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	9c 8b       	std	Y+20, r25	; 0x14
    3868:	8b 8b       	std	Y+19, r24	; 0x13
    386a:	0f c0       	rjmp	.+30     	; 0x388a <LCD_8_BitvidsendCommand+0xee>
    386c:	88 ec       	ldi	r24, 0xC8	; 200
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	89 8b       	std	Y+17, r24	; 0x11
    3874:	89 89       	ldd	r24, Y+17	; 0x11
    3876:	9a 89       	ldd	r25, Y+18	; 0x12
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <LCD_8_BitvidsendCommand+0xdc>
    387c:	9a 8b       	std	Y+18, r25	; 0x12
    387e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3880:	8b 89       	ldd	r24, Y+19	; 0x13
    3882:	9c 89       	ldd	r25, Y+20	; 0x14
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	9c 8b       	std	Y+20, r25	; 0x14
    3888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388a:	8b 89       	ldd	r24, Y+19	; 0x13
    388c:	9c 89       	ldd	r25, Y+20	; 0x14
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f7       	brne	.-38     	; 0x386c <LCD_8_BitvidsendCommand+0xd0>
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <LCD_8_BitvidsendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3894:	6d 89       	ldd	r22, Y+21	; 0x15
    3896:	7e 89       	ldd	r23, Y+22	; 0x16
    3898:	8f 89       	ldd	r24, Y+23	; 0x17
    389a:	98 8d       	ldd	r25, Y+24	; 0x18
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9c 8b       	std	Y+20, r25	; 0x14
    38a6:	8b 8b       	std	Y+19, r24	; 0x13
    38a8:	8b 89       	ldd	r24, Y+19	; 0x13
    38aa:	9c 89       	ldd	r25, Y+20	; 0x14
    38ac:	98 8b       	std	Y+16, r25	; 0x10
    38ae:	8f 87       	std	Y+15, r24	; 0x0f
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	98 89       	ldd	r25, Y+16	; 0x10
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <LCD_8_BitvidsendCommand+0x118>
    38b8:	98 8b       	std	Y+16, r25	; 0x10
    38ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	a0 e0       	ldi	r26, 0x00	; 0
    38cc:	b0 e4       	ldi	r27, 0x40	; 64
    38ce:	8b 87       	std	Y+11, r24	; 0x0b
    38d0:	9c 87       	std	Y+12, r25	; 0x0c
    38d2:	ad 87       	std	Y+13, r26	; 0x0d
    38d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38da:	8d 85       	ldd	r24, Y+13	; 0x0d
    38dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	4a ef       	ldi	r20, 0xFA	; 250
    38e4:	54 e4       	ldi	r21, 0x44	; 68
    38e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8f 83       	std	Y+7, r24	; 0x07
    38f0:	98 87       	std	Y+8, r25	; 0x08
    38f2:	a9 87       	std	Y+9, r26	; 0x09
    38f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38f6:	6f 81       	ldd	r22, Y+7	; 0x07
    38f8:	78 85       	ldd	r23, Y+8	; 0x08
    38fa:	89 85       	ldd	r24, Y+9	; 0x09
    38fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e8       	ldi	r20, 0x80	; 128
    3904:	5f e3       	ldi	r21, 0x3F	; 63
    3906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    390a:	88 23       	and	r24, r24
    390c:	2c f4       	brge	.+10     	; 0x3918 <LCD_8_BitvidsendCommand+0x17c>
		__ticks = 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	9e 83       	std	Y+6, r25	; 0x06
    3914:	8d 83       	std	Y+5, r24	; 0x05
    3916:	3f c0       	rjmp	.+126    	; 0x3996 <LCD_8_BitvidsendCommand+0x1fa>
	else if (__tmp > 65535)
    3918:	6f 81       	ldd	r22, Y+7	; 0x07
    391a:	78 85       	ldd	r23, Y+8	; 0x08
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	3f ef       	ldi	r19, 0xFF	; 255
    3924:	4f e7       	ldi	r20, 0x7F	; 127
    3926:	57 e4       	ldi	r21, 0x47	; 71
    3928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    392c:	18 16       	cp	r1, r24
    392e:	4c f5       	brge	.+82     	; 0x3982 <LCD_8_BitvidsendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3930:	6b 85       	ldd	r22, Y+11	; 0x0b
    3932:	7c 85       	ldd	r23, Y+12	; 0x0c
    3934:	8d 85       	ldd	r24, Y+13	; 0x0d
    3936:	9e 85       	ldd	r25, Y+14	; 0x0e
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e2       	ldi	r20, 0x20	; 32
    393e:	51 e4       	ldi	r21, 0x41	; 65
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
    3958:	0f c0       	rjmp	.+30     	; 0x3978 <LCD_8_BitvidsendCommand+0x1dc>
    395a:	88 ec       	ldi	r24, 0xC8	; 200
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9c 83       	std	Y+4, r25	; 0x04
    3960:	8b 83       	std	Y+3, r24	; 0x03
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <LCD_8_BitvidsendCommand+0x1ca>
    396a:	9c 83       	std	Y+4, r25	; 0x04
    396c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	9e 83       	std	Y+6, r25	; 0x06
    3976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	69 f7       	brne	.-38     	; 0x395a <LCD_8_BitvidsendCommand+0x1be>
    3980:	14 c0       	rjmp	.+40     	; 0x39aa <LCD_8_BitvidsendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	6f 81       	ldd	r22, Y+7	; 0x07
    3984:	78 85       	ldd	r23, Y+8	; 0x08
    3986:	89 85       	ldd	r24, Y+9	; 0x09
    3988:	9a 85       	ldd	r25, Y+10	; 0x0a
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9e 83       	std	Y+6, r25	; 0x06
    3994:	8d 83       	std	Y+5, r24	; 0x05
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	9a 83       	std	Y+2, r25	; 0x02
    399c:	89 83       	std	Y+1, r24	; 0x01
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	9a 81       	ldd	r25, Y+2	; 0x02
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <LCD_8_BitvidsendCommand+0x206>
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    39aa:	6d 96       	adiw	r28, 0x1d	; 29
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <LCD_8_BitvidwriteCharacter>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character)
{
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	6d 97       	sbiw	r28, 0x1d	; 29
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    39d2:	83 e0       	ldi	r24, 0x03	; 3
    39d4:	62 e0       	ldi	r22, 0x02	; 2
    39d6:	41 e0       	ldi	r20, 0x01	; 1
    39d8:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    39dc:	83 e0       	ldi	r24, 0x03	; 3
    39de:	61 e0       	ldi	r22, 0x01	; 1
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    39ea:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    39ee:	83 e0       	ldi	r24, 0x03	; 3
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	41 e0       	ldi	r20, 0x01	; 1
    39f4:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	a0 e0       	ldi	r26, 0x00	; 0
    39fe:	b0 e4       	ldi	r27, 0x40	; 64
    3a00:	89 8f       	std	Y+25, r24	; 0x19
    3a02:	9a 8f       	std	Y+26, r25	; 0x1a
    3a04:	ab 8f       	std	Y+27, r26	; 0x1b
    3a06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a08:	69 8d       	ldd	r22, Y+25	; 0x19
    3a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	4a ef       	ldi	r20, 0xFA	; 250
    3a16:	54 e4       	ldi	r21, 0x44	; 68
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	8d 8b       	std	Y+21, r24	; 0x15
    3a22:	9e 8b       	std	Y+22, r25	; 0x16
    3a24:	af 8b       	std	Y+23, r26	; 0x17
    3a26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a28:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e8       	ldi	r20, 0x80	; 128
    3a36:	5f e3       	ldi	r21, 0x3F	; 63
    3a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a3c:	88 23       	and	r24, r24
    3a3e:	2c f4       	brge	.+10     	; 0x3a4a <LCD_8_BitvidwriteCharacter+0x8e>
		__ticks = 1;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	9c 8b       	std	Y+20, r25	; 0x14
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
    3a48:	3f c0       	rjmp	.+126    	; 0x3ac8 <LCD_8_BitvidwriteCharacter+0x10c>
	else if (__tmp > 65535)
    3a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a50:	98 8d       	ldd	r25, Y+24	; 0x18
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	3f ef       	ldi	r19, 0xFF	; 255
    3a56:	4f e7       	ldi	r20, 0x7F	; 127
    3a58:	57 e4       	ldi	r21, 0x47	; 71
    3a5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a5e:	18 16       	cp	r1, r24
    3a60:	4c f5       	brge	.+82     	; 0x3ab4 <LCD_8_BitvidwriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a62:	69 8d       	ldd	r22, Y+25	; 0x19
    3a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e2       	ldi	r20, 0x20	; 32
    3a70:	51 e4       	ldi	r21, 0x41	; 65
    3a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	bc 01       	movw	r22, r24
    3a7c:	cd 01       	movw	r24, r26
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	9c 8b       	std	Y+20, r25	; 0x14
    3a88:	8b 8b       	std	Y+19, r24	; 0x13
    3a8a:	0f c0       	rjmp	.+30     	; 0x3aaa <LCD_8_BitvidwriteCharacter+0xee>
    3a8c:	88 ec       	ldi	r24, 0xC8	; 200
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	9a 8b       	std	Y+18, r25	; 0x12
    3a92:	89 8b       	std	Y+17, r24	; 0x11
    3a94:	89 89       	ldd	r24, Y+17	; 0x11
    3a96:	9a 89       	ldd	r25, Y+18	; 0x12
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <LCD_8_BitvidwriteCharacter+0xdc>
    3a9c:	9a 8b       	std	Y+18, r25	; 0x12
    3a9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	9c 8b       	std	Y+20, r25	; 0x14
    3aa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    3aac:	9c 89       	ldd	r25, Y+20	; 0x14
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	69 f7       	brne	.-38     	; 0x3a8c <LCD_8_BitvidwriteCharacter+0xd0>
    3ab2:	14 c0       	rjmp	.+40     	; 0x3adc <LCD_8_BitvidwriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aba:	98 8d       	ldd	r25, Y+24	; 0x18
    3abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	9c 8b       	std	Y+20, r25	; 0x14
    3ac6:	8b 8b       	std	Y+19, r24	; 0x13
    3ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aca:	9c 89       	ldd	r25, Y+20	; 0x14
    3acc:	98 8b       	std	Y+16, r25	; 0x10
    3ace:	8f 87       	std	Y+15, r24	; 0x0f
    3ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad2:	98 89       	ldd	r25, Y+16	; 0x10
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <LCD_8_BitvidwriteCharacter+0x118>
    3ad8:	98 8b       	std	Y+16, r25	; 0x10
    3ada:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    3adc:	83 e0       	ldi	r24, 0x03	; 3
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	a0 e0       	ldi	r26, 0x00	; 0
    3aec:	b0 e4       	ldi	r27, 0x40	; 64
    3aee:	8b 87       	std	Y+11, r24	; 0x0b
    3af0:	9c 87       	std	Y+12, r25	; 0x0c
    3af2:	ad 87       	std	Y+13, r26	; 0x0d
    3af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	4a ef       	ldi	r20, 0xFA	; 250
    3b04:	54 e4       	ldi	r21, 0x44	; 68
    3b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	8f 83       	std	Y+7, r24	; 0x07
    3b10:	98 87       	std	Y+8, r25	; 0x08
    3b12:	a9 87       	std	Y+9, r26	; 0x09
    3b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b16:	6f 81       	ldd	r22, Y+7	; 0x07
    3b18:	78 85       	ldd	r23, Y+8	; 0x08
    3b1a:	89 85       	ldd	r24, Y+9	; 0x09
    3b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	40 e8       	ldi	r20, 0x80	; 128
    3b24:	5f e3       	ldi	r21, 0x3F	; 63
    3b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b2a:	88 23       	and	r24, r24
    3b2c:	2c f4       	brge	.+10     	; 0x3b38 <LCD_8_BitvidwriteCharacter+0x17c>
		__ticks = 1;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	9e 83       	std	Y+6, r25	; 0x06
    3b34:	8d 83       	std	Y+5, r24	; 0x05
    3b36:	3f c0       	rjmp	.+126    	; 0x3bb6 <LCD_8_BitvidwriteCharacter+0x1fa>
	else if (__tmp > 65535)
    3b38:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3a:	78 85       	ldd	r23, Y+8	; 0x08
    3b3c:	89 85       	ldd	r24, Y+9	; 0x09
    3b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	3f ef       	ldi	r19, 0xFF	; 255
    3b44:	4f e7       	ldi	r20, 0x7F	; 127
    3b46:	57 e4       	ldi	r21, 0x47	; 71
    3b48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b4c:	18 16       	cp	r1, r24
    3b4e:	4c f5       	brge	.+82     	; 0x3ba2 <LCD_8_BitvidwriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	40 e2       	ldi	r20, 0x20	; 32
    3b5e:	51 e4       	ldi	r21, 0x41	; 65
    3b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	bc 01       	movw	r22, r24
    3b6a:	cd 01       	movw	r24, r26
    3b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	9e 83       	std	Y+6, r25	; 0x06
    3b76:	8d 83       	std	Y+5, r24	; 0x05
    3b78:	0f c0       	rjmp	.+30     	; 0x3b98 <LCD_8_BitvidwriteCharacter+0x1dc>
    3b7a:	88 ec       	ldi	r24, 0xC8	; 200
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	9c 83       	std	Y+4, r25	; 0x04
    3b80:	8b 83       	std	Y+3, r24	; 0x03
    3b82:	8b 81       	ldd	r24, Y+3	; 0x03
    3b84:	9c 81       	ldd	r25, Y+4	; 0x04
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	f1 f7       	brne	.-4      	; 0x3b86 <LCD_8_BitvidwriteCharacter+0x1ca>
    3b8a:	9c 83       	std	Y+4, r25	; 0x04
    3b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b90:	9e 81       	ldd	r25, Y+6	; 0x06
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	69 f7       	brne	.-38     	; 0x3b7a <LCD_8_BitvidwriteCharacter+0x1be>
    3ba0:	14 c0       	rjmp	.+40     	; 0x3bca <LCD_8_BitvidwriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba4:	78 85       	ldd	r23, Y+8	; 0x08
    3ba6:	89 85       	ldd	r24, Y+9	; 0x09
    3ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
    3bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bba:	9a 83       	std	Y+2, r25	; 0x02
    3bbc:	89 83       	std	Y+1, r24	; 0x01
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <LCD_8_BitvidwriteCharacter+0x206>
    3bc6:	9a 83       	std	Y+2, r25	; 0x02
    3bc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3bca:	6d 96       	adiw	r28, 0x1d	; 29
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	08 95       	ret

00003bdc <LCD_8_BitvidreadCharacter>:
void LCD_8_BitvidreadCharacter(u8 Copy_u8character)
{
    3bdc:	df 93       	push	r29
    3bde:	cf 93       	push	r28
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	6d 97       	sbiw	r28, 0x1d	; 29
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3bf2:	83 e0       	ldi	r24, 0x03	; 3
    3bf4:	62 e0       	ldi	r22, 0x02	; 2
    3bf6:	41 e0       	ldi	r20, 0x01	; 1
    3bf8:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, HIGH);
    3bfc:	83 e0       	ldi	r24, 0x03	; 3
    3bfe:	61 e0       	ldi	r22, 0x01	; 1
    3c00:	41 e0       	ldi	r20, 0x01	; 1
    3c02:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3c0a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3c0e:	83 e0       	ldi	r24, 0x03	; 3
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	a0 e0       	ldi	r26, 0x00	; 0
    3c1e:	b0 e4       	ldi	r27, 0x40	; 64
    3c20:	89 8f       	std	Y+25, r24	; 0x19
    3c22:	9a 8f       	std	Y+26, r25	; 0x1a
    3c24:	ab 8f       	std	Y+27, r26	; 0x1b
    3c26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c28:	69 8d       	ldd	r22, Y+25	; 0x19
    3c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	4a ef       	ldi	r20, 0xFA	; 250
    3c36:	54 e4       	ldi	r21, 0x44	; 68
    3c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	8d 8b       	std	Y+21, r24	; 0x15
    3c42:	9e 8b       	std	Y+22, r25	; 0x16
    3c44:	af 8b       	std	Y+23, r26	; 0x17
    3c46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c48:	6d 89       	ldd	r22, Y+21	; 0x15
    3c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	5f e3       	ldi	r21, 0x3F	; 63
    3c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c5c:	88 23       	and	r24, r24
    3c5e:	2c f4       	brge	.+10     	; 0x3c6a <LCD_8_BitvidreadCharacter+0x8e>
		__ticks = 1;
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	9c 8b       	std	Y+20, r25	; 0x14
    3c66:	8b 8b       	std	Y+19, r24	; 0x13
    3c68:	3f c0       	rjmp	.+126    	; 0x3ce8 <LCD_8_BitvidreadCharacter+0x10c>
	else if (__tmp > 65535)
    3c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c70:	98 8d       	ldd	r25, Y+24	; 0x18
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	3f ef       	ldi	r19, 0xFF	; 255
    3c76:	4f e7       	ldi	r20, 0x7F	; 127
    3c78:	57 e4       	ldi	r21, 0x47	; 71
    3c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c7e:	18 16       	cp	r1, r24
    3c80:	4c f5       	brge	.+82     	; 0x3cd4 <LCD_8_BitvidreadCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c82:	69 8d       	ldd	r22, Y+25	; 0x19
    3c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	40 e2       	ldi	r20, 0x20	; 32
    3c90:	51 e4       	ldi	r21, 0x41	; 65
    3c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	bc 01       	movw	r22, r24
    3c9c:	cd 01       	movw	r24, r26
    3c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	9c 8b       	std	Y+20, r25	; 0x14
    3ca8:	8b 8b       	std	Y+19, r24	; 0x13
    3caa:	0f c0       	rjmp	.+30     	; 0x3cca <LCD_8_BitvidreadCharacter+0xee>
    3cac:	88 ec       	ldi	r24, 0xC8	; 200
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	9a 8b       	std	Y+18, r25	; 0x12
    3cb2:	89 8b       	std	Y+17, r24	; 0x11
    3cb4:	89 89       	ldd	r24, Y+17	; 0x11
    3cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <LCD_8_BitvidreadCharacter+0xdc>
    3cbc:	9a 8b       	std	Y+18, r25	; 0x12
    3cbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	9c 8b       	std	Y+20, r25	; 0x14
    3cc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cca:	8b 89       	ldd	r24, Y+19	; 0x13
    3ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	69 f7       	brne	.-38     	; 0x3cac <LCD_8_BitvidreadCharacter+0xd0>
    3cd2:	14 c0       	rjmp	.+40     	; 0x3cfc <LCD_8_BitvidreadCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3cda:	98 8d       	ldd	r25, Y+24	; 0x18
    3cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	9c 8b       	std	Y+20, r25	; 0x14
    3ce6:	8b 8b       	std	Y+19, r24	; 0x13
    3ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    3cea:	9c 89       	ldd	r25, Y+20	; 0x14
    3cec:	98 8b       	std	Y+16, r25	; 0x10
    3cee:	8f 87       	std	Y+15, r24	; 0x0f
    3cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf2:	98 89       	ldd	r25, Y+16	; 0x10
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	f1 f7       	brne	.-4      	; 0x3cf4 <LCD_8_BitvidreadCharacter+0x118>
    3cf8:	98 8b       	std	Y+16, r25	; 0x10
    3cfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    3cfc:	83 e0       	ldi	r24, 0x03	; 3
    3cfe:	60 e0       	ldi	r22, 0x00	; 0
    3d00:	40 e0       	ldi	r20, 0x00	; 0
    3d02:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	a0 e0       	ldi	r26, 0x00	; 0
    3d0c:	b0 e4       	ldi	r27, 0x40	; 64
    3d0e:	8b 87       	std	Y+11, r24	; 0x0b
    3d10:	9c 87       	std	Y+12, r25	; 0x0c
    3d12:	ad 87       	std	Y+13, r26	; 0x0d
    3d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	4a ef       	ldi	r20, 0xFA	; 250
    3d24:	54 e4       	ldi	r21, 0x44	; 68
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	8f 83       	std	Y+7, r24	; 0x07
    3d30:	98 87       	std	Y+8, r25	; 0x08
    3d32:	a9 87       	std	Y+9, r26	; 0x09
    3d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d36:	6f 81       	ldd	r22, Y+7	; 0x07
    3d38:	78 85       	ldd	r23, Y+8	; 0x08
    3d3a:	89 85       	ldd	r24, Y+9	; 0x09
    3d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e8       	ldi	r20, 0x80	; 128
    3d44:	5f e3       	ldi	r21, 0x3F	; 63
    3d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d4a:	88 23       	and	r24, r24
    3d4c:	2c f4       	brge	.+10     	; 0x3d58 <LCD_8_BitvidreadCharacter+0x17c>
		__ticks = 1;
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	9e 83       	std	Y+6, r25	; 0x06
    3d54:	8d 83       	std	Y+5, r24	; 0x05
    3d56:	3f c0       	rjmp	.+126    	; 0x3dd6 <LCD_8_BitvidreadCharacter+0x1fa>
	else if (__tmp > 65535)
    3d58:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5a:	78 85       	ldd	r23, Y+8	; 0x08
    3d5c:	89 85       	ldd	r24, Y+9	; 0x09
    3d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	3f ef       	ldi	r19, 0xFF	; 255
    3d64:	4f e7       	ldi	r20, 0x7F	; 127
    3d66:	57 e4       	ldi	r21, 0x47	; 71
    3d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d6c:	18 16       	cp	r1, r24
    3d6e:	4c f5       	brge	.+82     	; 0x3dc2 <LCD_8_BitvidreadCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	40 e2       	ldi	r20, 0x20	; 32
    3d7e:	51 e4       	ldi	r21, 0x41	; 65
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	9e 83       	std	Y+6, r25	; 0x06
    3d96:	8d 83       	std	Y+5, r24	; 0x05
    3d98:	0f c0       	rjmp	.+30     	; 0x3db8 <LCD_8_BitvidreadCharacter+0x1dc>
    3d9a:	88 ec       	ldi	r24, 0xC8	; 200
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	9c 83       	std	Y+4, r25	; 0x04
    3da0:	8b 83       	std	Y+3, r24	; 0x03
    3da2:	8b 81       	ldd	r24, Y+3	; 0x03
    3da4:	9c 81       	ldd	r25, Y+4	; 0x04
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <LCD_8_BitvidreadCharacter+0x1ca>
    3daa:	9c 83       	std	Y+4, r25	; 0x04
    3dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	8d 81       	ldd	r24, Y+5	; 0x05
    3db0:	9e 81       	ldd	r25, Y+6	; 0x06
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	9e 83       	std	Y+6, r25	; 0x06
    3db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dba:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	69 f7       	brne	.-38     	; 0x3d9a <LCD_8_BitvidreadCharacter+0x1be>
    3dc0:	14 c0       	rjmp	.+40     	; 0x3dea <LCD_8_BitvidreadCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc4:	78 85       	ldd	r23, Y+8	; 0x08
    3dc6:	89 85       	ldd	r24, Y+9	; 0x09
    3dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 83       	std	Y+5, r24	; 0x05
    3dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dda:	9a 83       	std	Y+2, r25	; 0x02
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <LCD_8_BitvidreadCharacter+0x206>
    3de6:	9a 83       	std	Y+2, r25	; 0x02
    3de8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3dea:	6d 96       	adiw	r28, 0x1d	; 29
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <LCD_8_BitvidwriteString>:
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <LCD_8_BitvidwriteString+0x6>
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9b 83       	std	Y+3, r25	; 0x03
    3e0a:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    3e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e10:	00 97       	sbiw	r24, 0x00	; 0
    3e12:	d9 f0       	breq	.+54     	; 0x3e4a <LCD_8_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    3e14:	19 82       	std	Y+1, r1	; 0x01
    3e16:	0e c0       	rjmp	.+28     	; 0x3e34 <LCD_8_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	28 2f       	mov	r18, r24
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	9b 81       	ldd	r25, Y+3	; 0x03
    3e22:	fc 01       	movw	r30, r24
    3e24:	e2 0f       	add	r30, r18
    3e26:	f3 1f       	adc	r31, r19
    3e28:	80 81       	ld	r24, Z
    3e2a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_8_BitvidwriteCharacter>
			Local_u8Counter++;
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	8f 5f       	subi	r24, 0xFF	; 255
    3e32:	89 83       	std	Y+1, r24	; 0x01
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	28 2f       	mov	r18, r24
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3e:	fc 01       	movw	r30, r24
    3e40:	e2 0f       	add	r30, r18
    3e42:	f3 1f       	adc	r31, r19
    3e44:	80 81       	ld	r24, Z
    3e46:	88 23       	and	r24, r24
    3e48:	39 f7       	brne	.-50     	; 0x3e18 <LCD_8_BitvidwriteString+0x1c>
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	cf 91       	pop	r28
    3e52:	df 91       	pop	r29
    3e54:	08 95       	ret

00003e56 <LCD_8_BitvidGoToXY>:
void LCD_8_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3e56:	df 93       	push	r29
    3e58:	cf 93       	push	r28
    3e5a:	00 d0       	rcall	.+0      	; 0x3e5c <LCD_8_BitvidGoToXY+0x6>
    3e5c:	0f 92       	push	r0
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	8a 83       	std	Y+2, r24	; 0x02
    3e64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    3e66:	8a 81       	ldd	r24, Y+2	; 0x02
    3e68:	88 23       	and	r24, r24
    3e6a:	19 f4       	brne	.+6      	; 0x3e72 <LCD_8_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	06 c0       	rjmp	.+12     	; 0x3e7e <LCD_8_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	81 30       	cpi	r24, 0x01	; 1
    3e76:	19 f4       	brne	.+6      	; 0x3e7e <LCD_8_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    3e78:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7a:	80 5c       	subi	r24, 0xC0	; 192
    3e7c:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_8_BitvidsendCommand(Local_u8Address+128);
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	80 58       	subi	r24, 0x80	; 128
    3e82:	0e 94 ce 1b 	call	0x379c	; 0x379c <LCD_8_BitvidsendCommand>
}
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <LCD_8_BitvidwriteSpecialCharacter>:
void LCD_8_BitvidwriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	27 97       	sbiw	r28, 0x07	; 7
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	9c 83       	std	Y+4, r25	; 0x04
    3ea8:	8b 83       	std	Y+3, r24	; 0x03
    3eaa:	6d 83       	std	Y+5, r22	; 0x05
    3eac:	4e 83       	std	Y+6, r20	; 0x06
    3eae:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0 , Local_u8Iterator;
    3eb0:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    3eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb4:	88 2f       	mov	r24, r24
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	88 0f       	add	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	88 0f       	add	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	88 0f       	add	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	80 5c       	subi	r24, 0xC0	; 192
    3eca:	0e 94 ce 1b 	call	0x379c	; 0x379c <LCD_8_BitvidsendCommand>
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3ece:	19 82       	std	Y+1, r1	; 0x01
    3ed0:	0e c0       	rjmp	.+28     	; 0x3eee <LCD_8_BitvidwriteSpecialCharacter+0x5c>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	28 2f       	mov	r18, r24
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eda:	9c 81       	ldd	r25, Y+4	; 0x04
    3edc:	fc 01       	movw	r30, r24
    3ede:	e2 0f       	add	r30, r18
    3ee0:	f3 1f       	adc	r31, r19
    3ee2:	80 81       	ld	r24, Z
    3ee4:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_8_BitvidwriteCharacter>
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	8f 5f       	subi	r24, 0xFF	; 255
    3eec:	89 83       	std	Y+1, r24	; 0x01
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	88 30       	cpi	r24, 0x08	; 8
    3ef2:	78 f3       	brcs	.-34     	; 0x3ed2 <LCD_8_BitvidwriteSpecialCharacter+0x40>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go Back to DDRam to Display the Pattern*/
	LCD_8_BitvidGoToXY(Copy_u8XPos,Copy_u8YPos);
    3ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef8:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <LCD_8_BitvidGoToXY>
	/*Display the Pattern Written in CGRam*/
	LCD_8_BitvidwriteCharacter(Copy_u8PatternNumber);
    3efc:	8d 81       	ldd	r24, Y+5	; 0x05
    3efe:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_8_BitvidwriteCharacter>
}
    3f02:	27 96       	adiw	r28, 0x07	; 7
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	f8 94       	cli
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	cd bf       	out	0x3d, r28	; 61
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <LCD_8_BitvidwriteInt>:
void LCD_8_BitvidwriteInt(u32 copy_u8number)
{
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    3f18:	df 93       	push	r29
    3f1a:	cf 93       	push	r28
    3f1c:	cd b7       	in	r28, 0x3d	; 61
    3f1e:	de b7       	in	r29, 0x3e	; 62
    3f20:	61 97       	sbiw	r28, 0x11	; 17
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	de bf       	out	0x3e, r29	; 62
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	6e 87       	std	Y+14, r22	; 0x0e
    3f2e:	7f 87       	std	Y+15, r23	; 0x0f
    3f30:	88 8b       	std	Y+16, r24	; 0x10
    3f32:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    3f34:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f36:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f38:	a8 89       	ldd	r26, Y+16	; 0x10
    3f3a:	b9 89       	ldd	r27, Y+17	; 0x11
    3f3c:	8b 83       	std	Y+3, r24	; 0x03
    3f3e:	9c 83       	std	Y+4, r25	; 0x04
    3f40:	ad 83       	std	Y+5, r26	; 0x05
    3f42:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    3f44:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    3f46:	8b 81       	ldd	r24, Y+3	; 0x03
    3f48:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f4c:	be 81       	ldd	r27, Y+6	; 0x06
    3f4e:	00 97       	sbiw	r24, 0x00	; 0
    3f50:	a1 05       	cpc	r26, r1
    3f52:	b1 05       	cpc	r27, r1
    3f54:	89 f5       	brne	.+98     	; 0x3fb8 <LCD_8_BitvidwriteInt+0xa4>
	{
		LCD_8_BitvidwriteCharacter('0');
    3f56:	80 e3       	ldi	r24, 0x30	; 48
    3f58:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_8_BitvidwriteCharacter>
    3f5c:	4d c0       	rjmp	.+154    	; 0x3ff8 <LCD_8_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    3f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f60:	08 2f       	mov	r16, r24
    3f62:	10 e0       	ldi	r17, 0x00	; 0
    3f64:	8b 81       	ldd	r24, Y+3	; 0x03
    3f66:	9c 81       	ldd	r25, Y+4	; 0x04
    3f68:	ad 81       	ldd	r26, Y+5	; 0x05
    3f6a:	be 81       	ldd	r27, Y+6	; 0x06
    3f6c:	2a e0       	ldi	r18, 0x0A	; 10
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e0       	ldi	r20, 0x00	; 0
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__udivmodsi4>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	28 2f       	mov	r18, r24
    3f82:	ce 01       	movw	r24, r28
    3f84:	07 96       	adiw	r24, 0x07	; 7
    3f86:	fc 01       	movw	r30, r24
    3f88:	e0 0f       	add	r30, r16
    3f8a:	f1 1f       	adc	r31, r17
    3f8c:	20 83       	st	Z, r18
			temp/=10;
    3f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f90:	9c 81       	ldd	r25, Y+4	; 0x04
    3f92:	ad 81       	ldd	r26, Y+5	; 0x05
    3f94:	be 81       	ldd	r27, Y+6	; 0x06
    3f96:	2a e0       	ldi	r18, 0x0A	; 10
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e0       	ldi	r20, 0x00	; 0
    3f9c:	50 e0       	ldi	r21, 0x00	; 0
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__udivmodsi4>
    3fa6:	da 01       	movw	r26, r20
    3fa8:	c9 01       	movw	r24, r18
    3faa:	8b 83       	std	Y+3, r24	; 0x03
    3fac:	9c 83       	std	Y+4, r25	; 0x04
    3fae:	ad 83       	std	Y+5, r26	; 0x05
    3fb0:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    3fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb4:	8f 5f       	subi	r24, 0xFF	; 255
    3fb6:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_8_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    3fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fba:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbc:	ad 81       	ldd	r26, Y+5	; 0x05
    3fbe:	be 81       	ldd	r27, Y+6	; 0x06
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	a1 05       	cpc	r26, r1
    3fc4:	b1 05       	cpc	r27, r1
    3fc6:	59 f6       	brne	.-106    	; 0x3f5e <LCD_8_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	81 50       	subi	r24, 0x01	; 1
    3fcc:	89 83       	std	Y+1, r24	; 0x01
    3fce:	11 c0       	rjmp	.+34     	; 0x3ff2 <LCD_8_BitvidwriteInt+0xde>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	28 2f       	mov	r18, r24
    3fd4:	33 27       	eor	r19, r19
    3fd6:	27 fd       	sbrc	r18, 7
    3fd8:	30 95       	com	r19
    3fda:	ce 01       	movw	r24, r28
    3fdc:	07 96       	adiw	r24, 0x07	; 7
    3fde:	fc 01       	movw	r30, r24
    3fe0:	e2 0f       	add	r30, r18
    3fe2:	f3 1f       	adc	r31, r19
    3fe4:	80 81       	ld	r24, Z
    3fe6:	80 5d       	subi	r24, 0xD0	; 208
    3fe8:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_8_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	81 50       	subi	r24, 0x01	; 1
    3ff0:	89 83       	std	Y+1, r24	; 0x01
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	88 23       	and	r24, r24
    3ff6:	64 f7       	brge	.-40     	; 0x3fd0 <LCD_8_BitvidwriteInt+0xbc>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    3ff8:	61 96       	adiw	r28, 0x11	; 17
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	f8 94       	cli
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	cd bf       	out	0x3d, r28	; 61
    4004:	cf 91       	pop	r28
    4006:	df 91       	pop	r29
    4008:	1f 91       	pop	r17
    400a:	0f 91       	pop	r16
    400c:	08 95       	ret

0000400e <Stack_init>:
u8 LeftFlaserCounter = 0;
u8 RightFlaserCounter = 0;
u8 HazardCounter = 0;

static void Stack_init(Stack_t *Stack)
{
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	00 d0       	rcall	.+0      	; 0x4014 <Stack_init+0x6>
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	9a 83       	std	Y+2, r25	; 0x02
    401a:	89 83       	std	Y+1, r24	; 0x01
	Stack->Top = -1;
    401c:	e9 81       	ldd	r30, Y+1	; 0x01
    401e:	fa 81       	ldd	r31, Y+2	; 0x02
    4020:	8f ef       	ldi	r24, 0xFF	; 255
    4022:	84 83       	std	Z+4, r24	; 0x04
}
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	cf 91       	pop	r28
    402a:	df 91       	pop	r29
    402c:	08 95       	ret

0000402e <Stack_isEmpty>:

static u8 Stack_isEmpty(Stack_t *Stack)
{
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	00 d0       	rcall	.+0      	; 0x4034 <Stack_isEmpty+0x6>
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	89 83       	std	Y+1, r24	; 0x01
	return Stack->Top == -1;
    403c:	80 e0       	ldi	r24, 0x00	; 0
}
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	cf 91       	pop	r28
    4044:	df 91       	pop	r29
    4046:	08 95       	ret

00004048 <Stack_isFull>:

static u8 Stack_isFull(Stack_t *Stack)
{
    4048:	df 93       	push	r29
    404a:	cf 93       	push	r28
    404c:	00 d0       	rcall	.+0      	; 0x404e <Stack_isFull+0x6>
    404e:	0f 92       	push	r0
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
    4054:	9a 83       	std	Y+2, r25	; 0x02
    4056:	89 83       	std	Y+1, r24	; 0x01
	return Stack->Top == Max_States - 1;
    4058:	e9 81       	ldd	r30, Y+1	; 0x01
    405a:	fa 81       	ldd	r31, Y+2	; 0x02
    405c:	84 81       	ldd	r24, Z+4	; 0x04
    405e:	1b 82       	std	Y+3, r1	; 0x03
    4060:	83 30       	cpi	r24, 0x03	; 3
    4062:	11 f4       	brne	.+4      	; 0x4068 <Stack_isFull+0x20>
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	8b 83       	std	Y+3, r24	; 0x03
    4068:	8b 81       	ldd	r24, Y+3	; 0x03
}
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	0f 90       	pop	r0
    4070:	cf 91       	pop	r28
    4072:	df 91       	pop	r29
    4074:	08 95       	ret

00004076 <Stack_push>:

static u8 Stack_push(Stack_t *Stack, u8 Local_u8StateValue)
{
    4076:	df 93       	push	r29
    4078:	cf 93       	push	r28
    407a:	00 d0       	rcall	.+0      	; 0x407c <Stack_push+0x6>
    407c:	00 d0       	rcall	.+0      	; 0x407e <Stack_push+0x8>
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
    4086:	6b 83       	std	Y+3, r22	; 0x03
	if(Stack_isFull(Stack))
    4088:	89 81       	ldd	r24, Y+1	; 0x01
    408a:	9a 81       	ldd	r25, Y+2	; 0x02
    408c:	0e 94 24 20 	call	0x4048	; 0x4048 <Stack_isFull>
    4090:	88 23       	and	r24, r24
    4092:	41 f0       	breq	.+16     	; 0x40a4 <Stack_push+0x2e>
	{
		CurrentState = LastState;
    4094:	80 91 9d 00 	lds	r24, 0x009D
    4098:	80 93 9c 00 	sts	0x009C, r24
		return CurrentState;
    409c:	80 91 9c 00 	lds	r24, 0x009C
    40a0:	8c 83       	std	Y+4, r24	; 0x04
    40a2:	1a c0       	rjmp	.+52     	; 0x40d8 <Stack_push+0x62>
	}
	return Stack->States_Stack[++Stack->Top] = Local_u8StateValue;
    40a4:	e9 81       	ldd	r30, Y+1	; 0x01
    40a6:	fa 81       	ldd	r31, Y+2	; 0x02
    40a8:	84 81       	ldd	r24, Z+4	; 0x04
    40aa:	8f 5f       	subi	r24, 0xFF	; 255
    40ac:	e9 81       	ldd	r30, Y+1	; 0x01
    40ae:	fa 81       	ldd	r31, Y+2	; 0x02
    40b0:	84 83       	std	Z+4, r24	; 0x04
    40b2:	e9 81       	ldd	r30, Y+1	; 0x01
    40b4:	fa 81       	ldd	r31, Y+2	; 0x02
    40b6:	84 81       	ldd	r24, Z+4	; 0x04
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	9a 81       	ldd	r25, Y+2	; 0x02
    40c0:	fc 01       	movw	r30, r24
    40c2:	e2 0f       	add	r30, r18
    40c4:	f3 1f       	adc	r31, r19
    40c6:	8b 81       	ldd	r24, Y+3	; 0x03
    40c8:	80 83       	st	Z, r24
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	9a 81       	ldd	r25, Y+2	; 0x02
    40ce:	fc 01       	movw	r30, r24
    40d0:	e2 0f       	add	r30, r18
    40d2:	f3 1f       	adc	r31, r19
    40d4:	80 81       	ld	r24, Z
    40d6:	8c 83       	std	Y+4, r24	; 0x04
    40d8:	8c 81       	ldd	r24, Y+4	; 0x04

}
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	cf 91       	pop	r28
    40e4:	df 91       	pop	r29
    40e6:	08 95       	ret

000040e8 <Stack_pop>:

static u8 Stack_pop(Stack_t *Stack)
{
    40e8:	df 93       	push	r29
    40ea:	cf 93       	push	r28
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <Stack_pop+0x6>
    40ee:	0f 92       	push	r0
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
    40f4:	9a 83       	std	Y+2, r25	; 0x02
    40f6:	89 83       	std	Y+1, r24	; 0x01
	if(Stack_isEmpty(Stack))
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	9a 81       	ldd	r25, Y+2	; 0x02
    40fc:	0e 94 17 20 	call	0x402e	; 0x402e <Stack_isEmpty>
    4100:	88 23       	and	r24, r24
    4102:	41 f0       	breq	.+16     	; 0x4114 <Stack_pop+0x2c>
	{
		CurrentState = LastState;
    4104:	80 91 9d 00 	lds	r24, 0x009D
    4108:	80 93 9c 00 	sts	0x009C, r24
		return CurrentState;
    410c:	80 91 9c 00 	lds	r24, 0x009C
    4110:	8b 83       	std	Y+3, r24	; 0x03
    4112:	11 c0       	rjmp	.+34     	; 0x4136 <Stack_pop+0x4e>
	}
	return Stack->States_Stack[Stack->Top--];
    4114:	e9 81       	ldd	r30, Y+1	; 0x01
    4116:	fa 81       	ldd	r31, Y+2	; 0x02
    4118:	44 81       	ldd	r20, Z+4	; 0x04
    411a:	24 2f       	mov	r18, r20
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	89 81       	ldd	r24, Y+1	; 0x01
    4120:	9a 81       	ldd	r25, Y+2	; 0x02
    4122:	fc 01       	movw	r30, r24
    4124:	e2 0f       	add	r30, r18
    4126:	f3 1f       	adc	r31, r19
    4128:	80 81       	ld	r24, Z
    412a:	8b 83       	std	Y+3, r24	; 0x03
    412c:	84 2f       	mov	r24, r20
    412e:	81 50       	subi	r24, 0x01	; 1
    4130:	e9 81       	ldd	r30, Y+1	; 0x01
    4132:	fa 81       	ldd	r31, Y+2	; 0x02
    4134:	84 83       	std	Z+4, r24	; 0x04
    4136:	8b 81       	ldd	r24, Y+3	; 0x03

}
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	0f 90       	pop	r0
    413e:	cf 91       	pop	r28
    4140:	df 91       	pop	r29
    4142:	08 95       	ret

00004144 <create_task>:
void ReadButton_voidTask(void);
void LedsHandler_voidTask(void);


void create_task(void)
{
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	e0 97       	sbiw	r28, 0x30	; 48
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	f8 94       	cli
    4152:	de bf       	out	0x3e, r29	; 62
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	cd bf       	out	0x3d, r28	; 61
	CreateTask_FuncArgus ReadButton_Task;
	ReadButton_Task.Copy_u8Priority = READ_BUTTON;
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	8c 83       	std	Y+4, r24	; 0x04
	ReadButton_Task.Copy_u8State = TASK_RESUMED;
    415c:	1b 82       	std	Y+3, r1	; 0x03
	ReadButton_Task.Copy_u16Periodicity = 100;
    415e:	84 e6       	ldi	r24, 0x64	; 100
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	9e 83       	std	Y+6, r25	; 0x06
    4164:	8d 83       	std	Y+5, r24	; 0x05
	ReadButton_Task.Copy_u16FirstDelay = 0 ;
    4166:	18 86       	std	Y+8, r1	; 0x08
    4168:	1f 82       	std	Y+7, r1	; 0x07
	ReadButton_Task.Copy_pvTaskFunc = &ReadButton_voidTask;
    416a:	89 ea       	ldi	r24, 0xA9	; 169
    416c:	91 e2       	ldi	r25, 0x21	; 33
    416e:	9a 83       	std	Y+2, r25	; 0x02
    4170:	89 83       	std	Y+1, r24	; 0x01
	RTOS_u8CreateTask(&ReadButton_Task);
    4172:	ce 01       	movw	r24, r28
    4174:	01 96       	adiw	r24, 0x01	; 1
    4176:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus LedsHandler_Task;
	LedsHandler_Task.Copy_u8Priority = LEDS_HANDLER;
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	8c 87       	std	Y+12, r24	; 0x0c
	LedsHandler_Task.Copy_u8State = TASK_SUSPENDED;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	8b 87       	std	Y+11, r24	; 0x0b
	LedsHandler_Task.Copy_u16Periodicity = 100;
    4182:	84 e6       	ldi	r24, 0x64	; 100
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	9e 87       	std	Y+14, r25	; 0x0e
    4188:	8d 87       	std	Y+13, r24	; 0x0d
	LedsHandler_Task.Copy_u16FirstDelay = 0;
    418a:	18 8a       	std	Y+16, r1	; 0x10
    418c:	1f 86       	std	Y+15, r1	; 0x0f
	LedsHandler_Task.Copy_pvTaskFunc = &LedsHandler_voidTask;
    418e:	87 e8       	ldi	r24, 0x87	; 135
    4190:	92 e2       	ldi	r25, 0x22	; 34
    4192:	9a 87       	std	Y+10, r25	; 0x0a
    4194:	89 87       	std	Y+9, r24	; 0x09
	RTOS_u8CreateTask(&LedsHandler_Task);
    4196:	ce 01       	movw	r24, r28
    4198:	09 96       	adiw	r24, 0x09	; 9
    419a:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus LedsOff_Task;
	LedsOff_Task.Copy_u8Priority = LEDS_OFF;
    419e:	1c 8a       	std	Y+20, r1	; 0x14
	LedsOff_Task.Copy_u8State = TASK_RESUMED;
    41a0:	1b 8a       	std	Y+19, r1	; 0x13
	LedsOff_Task.Copy_u16Periodicity = 200;
    41a2:	88 ec       	ldi	r24, 0xC8	; 200
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	9e 8b       	std	Y+22, r25	; 0x16
    41a8:	8d 8b       	std	Y+21, r24	; 0x15
	LedsOff_Task.Copy_u16FirstDelay = 0;
    41aa:	18 8e       	std	Y+24, r1	; 0x18
    41ac:	1f 8a       	std	Y+23, r1	; 0x17
	LedsOff_Task.Copy_pvTaskFunc = &LedsOff_voidTask;
    41ae:	88 e9       	ldi	r24, 0x98	; 152
    41b0:	91 e2       	ldi	r25, 0x21	; 33
    41b2:	9a 8b       	std	Y+18, r25	; 0x12
    41b4:	89 8b       	std	Y+17, r24	; 0x11
	RTOS_u8CreateTask(&LedsOff_Task);
    41b6:	ce 01       	movw	r24, r28
    41b8:	41 96       	adiw	r24, 0x11	; 17
    41ba:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus Hazard_Task;
	Hazard_Task.Copy_u8Priority = HAZARD;
    41be:	83 e0       	ldi	r24, 0x03	; 3
    41c0:	8c 8f       	std	Y+28, r24	; 0x1c
	Hazard_Task.Copy_u8State = TASK_SUSPENDED;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	8b 8f       	std	Y+27, r24	; 0x1b
	Hazard_Task.Copy_u16Periodicity = 500;
    41c6:	84 ef       	ldi	r24, 0xF4	; 244
    41c8:	91 e0       	ldi	r25, 0x01	; 1
    41ca:	9e 8f       	std	Y+30, r25	; 0x1e
    41cc:	8d 8f       	std	Y+29, r24	; 0x1d
	Hazard_Task.Copy_u16FirstDelay = 300;
    41ce:	8c e2       	ldi	r24, 0x2C	; 44
    41d0:	91 e0       	ldi	r25, 0x01	; 1
    41d2:	98 a3       	std	Y+32, r25	; 0x20
    41d4:	8f 8f       	std	Y+31, r24	; 0x1f
	Hazard_Task.Copy_pvTaskFunc = &Hazard_voidTask;
    41d6:	8d e7       	ldi	r24, 0x7D	; 125
    41d8:	91 e2       	ldi	r25, 0x21	; 33
    41da:	9a 8f       	std	Y+26, r25	; 0x1a
    41dc:	89 8f       	std	Y+25, r24	; 0x19
	RTOS_u8CreateTask(&Hazard_Task);
    41de:	ce 01       	movw	r24, r28
    41e0:	49 96       	adiw	r24, 0x19	; 25
    41e2:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus LeftFlasher_Task;
	LeftFlasher_Task.Copy_u8Priority = LEFT_FLASHER;
    41e6:	84 e0       	ldi	r24, 0x04	; 4
    41e8:	8c a3       	std	Y+36, r24	; 0x24
	LeftFlasher_Task.Copy_u8State = TASK_SUSPENDED;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	8b a3       	std	Y+35, r24	; 0x23
	LeftFlasher_Task.Copy_u16Periodicity = 500;
    41ee:	84 ef       	ldi	r24, 0xF4	; 244
    41f0:	91 e0       	ldi	r25, 0x01	; 1
    41f2:	9e a3       	std	Y+38, r25	; 0x26
    41f4:	8d a3       	std	Y+37, r24	; 0x25
	LeftFlasher_Task.Copy_u16FirstDelay = 100;
    41f6:	84 e6       	ldi	r24, 0x64	; 100
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	98 a7       	std	Y+40, r25	; 0x28
    41fc:	8f a3       	std	Y+39, r24	; 0x27
	LeftFlasher_Task.Copy_pvTaskFunc = &LeftFlasher_voidTask;
    41fe:	85 e5       	ldi	r24, 0x55	; 85
    4200:	91 e2       	ldi	r25, 0x21	; 33
    4202:	9a a3       	std	Y+34, r25	; 0x22
    4204:	89 a3       	std	Y+33, r24	; 0x21
	RTOS_u8CreateTask(&LeftFlasher_Task);
    4206:	ce 01       	movw	r24, r28
    4208:	81 96       	adiw	r24, 0x21	; 33
    420a:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus RightFlasher_Task;
	RightFlasher_Task.Copy_u8Priority = RIGHT_FLASHER;
    420e:	85 e0       	ldi	r24, 0x05	; 5
    4210:	8c a7       	std	Y+44, r24	; 0x2c
	RightFlasher_Task.Copy_u8State = TASK_SUSPENDED;
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	8b a7       	std	Y+43, r24	; 0x2b
	RightFlasher_Task.Copy_u16Periodicity = 500;
    4216:	84 ef       	ldi	r24, 0xF4	; 244
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	9e a7       	std	Y+46, r25	; 0x2e
    421c:	8d a7       	std	Y+45, r24	; 0x2d
	RightFlasher_Task.Copy_u16FirstDelay = 200;
    421e:	88 ec       	ldi	r24, 0xC8	; 200
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	98 ab       	std	Y+48, r25	; 0x30
    4224:	8f a7       	std	Y+47, r24	; 0x2f
	RightFlasher_Task.Copy_pvTaskFunc = &RightFlasher_voidTask;
    4226:	89 e6       	ldi	r24, 0x69	; 105
    4228:	91 e2       	ldi	r25, 0x21	; 33
    422a:	9a a7       	std	Y+42, r25	; 0x2a
    422c:	89 a7       	std	Y+41, r24	; 0x29
	RTOS_u8CreateTask(&RightFlasher_Task);
    422e:	ce 01       	movw	r24, r28
    4230:	89 96       	adiw	r24, 0x29	; 41
    4232:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

}
    4236:	e0 96       	adiw	r28, 0x30	; 48
    4238:	0f b6       	in	r0, 0x3f	; 63
    423a:	f8 94       	cli
    423c:	de bf       	out	0x3e, r29	; 62
    423e:	0f be       	out	0x3f, r0	; 63
    4240:	cd bf       	out	0x3d, r28	; 61
    4242:	cf 91       	pop	r28
    4244:	df 91       	pop	r29
    4246:	08 95       	ret

00004248 <main>:

void main(void)
{
    4248:	df 93       	push	r29
    424a:	cf 93       	push	r28
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62

	DIO_u8setPinDirection(PORT_A,PIN_0,INPUT);
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	60 e0       	ldi	r22, 0x00	; 0
    4254:	40 e0       	ldi	r20, 0x00	; 0
    4256:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(PORT_A,PIN_1,INPUT);
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	61 e0       	ldi	r22, 0x01	; 1
    425e:	40 e0       	ldi	r20, 0x00	; 0
    4260:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(PORT_A,PIN_2,INPUT);
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	62 e0       	ldi	r22, 0x02	; 2
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(PORT_A,PIN_3,OUTPUT);
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	63 e0       	ldi	r22, 0x03	; 3
    4272:	41 e0       	ldi	r20, 0x01	; 1
    4274:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(PORT_A,PIN_4,OUTPUT);
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	64 e0       	ldi	r22, 0x04	; 4
    427c:	41 e0       	ldi	r20, 0x01	; 1
    427e:	0e 94 14 10 	call	0x2028	; 0x2028 <DIO_u8setPinDirection>

	DIO_u8setPinValue(PORT_A,PIN_0,HIGH);
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	41 e0       	ldi	r20, 0x01	; 1
    4288:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(PORT_A,PIN_1,HIGH);
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	61 e0       	ldi	r22, 0x01	; 1
    4290:	41 e0       	ldi	r20, 0x01	; 1
    4292:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(PORT_A,PIN_2,HIGH);
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	62 e0       	ldi	r22, 0x02	; 2
    429a:	41 e0       	ldi	r20, 0x01	; 1
    429c:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>



	create_task();
    42a0:	0e 94 a2 20 	call	0x4144	; 0x4144 <create_task>
	RTOS_voidStart();
    42a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <RTOS_voidStart>
    42a8:	ff cf       	rjmp	.-2      	; 0x42a8 <main+0x60>

000042aa <LeftFlasher_voidTask>:

	}
}

void LeftFlasher_voidTask(void)
{
    42aa:	df 93       	push	r29
    42ac:	cf 93       	push	r28
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOG_BIT(Local_u8LedState,0);
    42b2:	90 91 a1 00 	lds	r25, 0x00A1
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	89 27       	eor	r24, r25
    42ba:	80 93 a1 00 	sts	0x00A1, r24
	DIO_u8setPinValue(PORT_A,PIN_4,Local_u8LedState);
    42be:	90 91 a1 00 	lds	r25, 0x00A1
    42c2:	80 e0       	ldi	r24, 0x00	; 0
    42c4:	64 e0       	ldi	r22, 0x04	; 4
    42c6:	49 2f       	mov	r20, r25
    42c8:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>

}
    42cc:	cf 91       	pop	r28
    42ce:	df 91       	pop	r29
    42d0:	08 95       	ret

000042d2 <RightFlasher_voidTask>:

void RightFlasher_voidTask(void)
{
    42d2:	df 93       	push	r29
    42d4:	cf 93       	push	r28
    42d6:	cd b7       	in	r28, 0x3d	; 61
    42d8:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOG_BIT(Local_u8LedState,0);
    42da:	90 91 a2 00 	lds	r25, 0x00A2
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	89 27       	eor	r24, r25
    42e2:	80 93 a2 00 	sts	0x00A2, r24
	DIO_u8setPinValue(PORT_A,PIN_3,Local_u8LedState);
    42e6:	90 91 a2 00 	lds	r25, 0x00A2
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	63 e0       	ldi	r22, 0x03	; 3
    42ee:	49 2f       	mov	r20, r25
    42f0:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
}
    42f4:	cf 91       	pop	r28
    42f6:	df 91       	pop	r29
    42f8:	08 95       	ret

000042fa <Hazard_voidTask>:

void Hazard_voidTask(void)
{
    42fa:	df 93       	push	r29
    42fc:	cf 93       	push	r28
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOG_BIT(Local_u8LedState,0);
    4302:	90 91 a3 00 	lds	r25, 0x00A3
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	89 27       	eor	r24, r25
    430a:	80 93 a3 00 	sts	0x00A3, r24
	DIO_u8setPinValue(PORT_A,PIN_3,Local_u8LedState);
    430e:	90 91 a3 00 	lds	r25, 0x00A3
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	63 e0       	ldi	r22, 0x03	; 3
    4316:	49 2f       	mov	r20, r25
    4318:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(PORT_A,PIN_4,Local_u8LedState);
    431c:	90 91 a3 00 	lds	r25, 0x00A3
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	64 e0       	ldi	r22, 0x04	; 4
    4324:	49 2f       	mov	r20, r25
    4326:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
}
    432a:	cf 91       	pop	r28
    432c:	df 91       	pop	r29
    432e:	08 95       	ret

00004330 <LedsOff_voidTask>:

void LedsOff_voidTask(void)
{
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinValue(PORT_A,PIN_3,LOW);
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	63 e0       	ldi	r22, 0x03	; 3
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
	DIO_u8setPinValue(PORT_A,PIN_4,LOW);
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	64 e0       	ldi	r22, 0x04	; 4
    4346:	40 e0       	ldi	r20, 0x00	; 0
    4348:	0e 94 3f 11 	call	0x227e	; 0x227e <DIO_u8setPinValue>
}
    434c:	cf 91       	pop	r28
    434e:	df 91       	pop	r29
    4350:	08 95       	ret

00004352 <ReadButton_voidTask>:


void ReadButton_voidTask(void)
{
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	2b 97       	sbiw	r28, 0x0b	; 11
    435c:	0f b6       	in	r0, 0x3f	; 63
    435e:	f8 94       	cli
    4360:	de bf       	out	0x3e, r29	; 62
    4362:	0f be       	out	0x3f, r0	; 63
    4364:	cd bf       	out	0x3d, r28	; 61

	Stack_t Local_statesStack;

	Stack_init(&Local_statesStack);
    4366:	ce 01       	movw	r24, r28
    4368:	01 96       	adiw	r24, 0x01	; 1
    436a:	0e 94 07 20 	call	0x400e	; 0x400e <Stack_init>
	RTOS_voidSuspendTask(LEDS_HANDLER);
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>

	DIO_u8getPinValue(PORT_A,PIN_0,&LeftFlasherState);
    4374:	28 e6       	ldi	r18, 0x68	; 104
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	60 e0       	ldi	r22, 0x00	; 0
    437c:	a9 01       	movw	r20, r18
    437e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <DIO_u8getPinValue>
	DIO_u8getPinValue(PORT_A,PIN_1,&RightFlasherState);
    4382:	29 e6       	ldi	r18, 0x69	; 105
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	61 e0       	ldi	r22, 0x01	; 1
    438a:	a9 01       	movw	r20, r18
    438c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <DIO_u8getPinValue>
	DIO_u8getPinValue(PORT_A,PIN_2,&HazardState);
    4390:	2a e6       	ldi	r18, 0x6A	; 106
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	62 e0       	ldi	r22, 0x02	; 2
    4398:	a9 01       	movw	r20, r18
    439a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <DIO_u8getPinValue>

    CurrentState = Stack_push(&Local_statesStack,States_e_OFF);
    439e:	ce 01       	movw	r24, r28
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	0e 94 3b 20 	call	0x4076	; 0x4076 <Stack_push>
    43a8:	80 93 9c 00 	sts	0x009C, r24

	if(LeftFlasherState == 0)
    43ac:	80 91 68 00 	lds	r24, 0x0068
    43b0:	88 23       	and	r24, r24
    43b2:	a1 f5       	brne	.+104    	; 0x441c <ReadButton_voidTask+0xca>
	{
		LeftFlaserCounter++;
    43b4:	80 91 9e 00 	lds	r24, 0x009E
    43b8:	8f 5f       	subi	r24, 0xFF	; 255
    43ba:	80 93 9e 00 	sts	0x009E, r24
		switch(LeftFlaserCounter)
    43be:	80 91 9e 00 	lds	r24, 0x009E
    43c2:	28 2f       	mov	r18, r24
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	3b 87       	std	Y+11, r19	; 0x0b
    43c8:	2a 87       	std	Y+10, r18	; 0x0a
    43ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    43cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    43ce:	81 30       	cpi	r24, 0x01	; 1
    43d0:	91 05       	cpc	r25, r1
    43d2:	31 f0       	breq	.+12     	; 0x43e0 <ReadButton_voidTask+0x8e>
    43d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    43d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    43d8:	22 30       	cpi	r18, 0x02	; 2
    43da:	31 05       	cpc	r19, r1
    43dc:	61 f0       	breq	.+24     	; 0x43f6 <ReadButton_voidTask+0xa4>
    43de:	1b c0       	rjmp	.+54     	; 0x4416 <ReadButton_voidTask+0xc4>
		{
		case 1: CurrentState = Stack_push(&Local_statesStack,States_e_LEFT); RTOS_voidResumeTask(LEDS_HANDLER); break;
    43e0:	ce 01       	movw	r24, r28
    43e2:	01 96       	adiw	r24, 0x01	; 1
    43e4:	61 e0       	ldi	r22, 0x01	; 1
    43e6:	0e 94 3b 20 	call	0x4076	; 0x4076 <Stack_push>
    43ea:	80 93 9c 00 	sts	0x009C, r24
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
    43f4:	13 c0       	rjmp	.+38     	; 0x441c <ReadButton_voidTask+0xca>
		case 2: LastState = CurrentState; CurrentState = Stack_pop(&Local_statesStack);
    43f6:	80 91 9c 00 	lds	r24, 0x009C
    43fa:	80 93 9d 00 	sts	0x009D, r24
    43fe:	ce 01       	movw	r24, r28
    4400:	01 96       	adiw	r24, 0x01	; 1
    4402:	0e 94 74 20 	call	0x40e8	; 0x40e8 <Stack_pop>
    4406:	80 93 9c 00 	sts	0x009C, r24
		        RTOS_voidResumeTask(LEDS_HANDLER); LeftFlaserCounter = 0; break;
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
    4410:	10 92 9e 00 	sts	0x009E, r1
    4414:	03 c0       	rjmp	.+6      	; 0x441c <ReadButton_voidTask+0xca>
		default: RTOS_voidSuspendTask(LEDS_HANDLER);
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		}
	}

	if(RightFlasherState == 0)
    441c:	80 91 69 00 	lds	r24, 0x0069
    4420:	88 23       	and	r24, r24
    4422:	a1 f5       	brne	.+104    	; 0x448c <ReadButton_voidTask+0x13a>
	{
		RightFlaserCounter++;
    4424:	80 91 9f 00 	lds	r24, 0x009F
    4428:	8f 5f       	subi	r24, 0xFF	; 255
    442a:	80 93 9f 00 	sts	0x009F, r24
		switch(RightFlaserCounter)
    442e:	80 91 9f 00 	lds	r24, 0x009F
    4432:	28 2f       	mov	r18, r24
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	39 87       	std	Y+9, r19	; 0x09
    4438:	28 87       	std	Y+8, r18	; 0x08
    443a:	88 85       	ldd	r24, Y+8	; 0x08
    443c:	99 85       	ldd	r25, Y+9	; 0x09
    443e:	81 30       	cpi	r24, 0x01	; 1
    4440:	91 05       	cpc	r25, r1
    4442:	31 f0       	breq	.+12     	; 0x4450 <ReadButton_voidTask+0xfe>
    4444:	28 85       	ldd	r18, Y+8	; 0x08
    4446:	39 85       	ldd	r19, Y+9	; 0x09
    4448:	22 30       	cpi	r18, 0x02	; 2
    444a:	31 05       	cpc	r19, r1
    444c:	61 f0       	breq	.+24     	; 0x4466 <ReadButton_voidTask+0x114>
    444e:	1b c0       	rjmp	.+54     	; 0x4486 <ReadButton_voidTask+0x134>
		{
		case 1: CurrentState = Stack_push(&Local_statesStack,States_e_RIGHT); RTOS_voidResumeTask(LEDS_HANDLER); break;
    4450:	ce 01       	movw	r24, r28
    4452:	01 96       	adiw	r24, 0x01	; 1
    4454:	62 e0       	ldi	r22, 0x02	; 2
    4456:	0e 94 3b 20 	call	0x4076	; 0x4076 <Stack_push>
    445a:	80 93 9c 00 	sts	0x009C, r24
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
    4464:	13 c0       	rjmp	.+38     	; 0x448c <ReadButton_voidTask+0x13a>
		case 2: LastState = CurrentState; CurrentState = Stack_pop(&Local_statesStack);
    4466:	80 91 9c 00 	lds	r24, 0x009C
    446a:	80 93 9d 00 	sts	0x009D, r24
    446e:	ce 01       	movw	r24, r28
    4470:	01 96       	adiw	r24, 0x01	; 1
    4472:	0e 94 74 20 	call	0x40e8	; 0x40e8 <Stack_pop>
    4476:	80 93 9c 00 	sts	0x009C, r24
		        RTOS_voidResumeTask(LEDS_HANDLER); RightFlaserCounter = 0; break;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
    4480:	10 92 9f 00 	sts	0x009F, r1
    4484:	03 c0       	rjmp	.+6      	; 0x448c <ReadButton_voidTask+0x13a>
		default: RTOS_voidSuspendTask(LEDS_HANDLER);
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		}
	}

	if(HazardState == 0)
    448c:	80 91 6a 00 	lds	r24, 0x006A
    4490:	88 23       	and	r24, r24
    4492:	a1 f5       	brne	.+104    	; 0x44fc <ReadButton_voidTask+0x1aa>
	{
		HazardCounter++;
    4494:	80 91 a0 00 	lds	r24, 0x00A0
    4498:	8f 5f       	subi	r24, 0xFF	; 255
    449a:	80 93 a0 00 	sts	0x00A0, r24
		switch(HazardCounter)
    449e:	80 91 a0 00 	lds	r24, 0x00A0
    44a2:	28 2f       	mov	r18, r24
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	3f 83       	std	Y+7, r19	; 0x07
    44a8:	2e 83       	std	Y+6, r18	; 0x06
    44aa:	8e 81       	ldd	r24, Y+6	; 0x06
    44ac:	9f 81       	ldd	r25, Y+7	; 0x07
    44ae:	81 30       	cpi	r24, 0x01	; 1
    44b0:	91 05       	cpc	r25, r1
    44b2:	31 f0       	breq	.+12     	; 0x44c0 <ReadButton_voidTask+0x16e>
    44b4:	2e 81       	ldd	r18, Y+6	; 0x06
    44b6:	3f 81       	ldd	r19, Y+7	; 0x07
    44b8:	22 30       	cpi	r18, 0x02	; 2
    44ba:	31 05       	cpc	r19, r1
    44bc:	61 f0       	breq	.+24     	; 0x44d6 <ReadButton_voidTask+0x184>
    44be:	1b c0       	rjmp	.+54     	; 0x44f6 <ReadButton_voidTask+0x1a4>
		{
		case 1: CurrentState = Stack_push(&Local_statesStack,States_e_HAZARD); RTOS_voidResumeTask(LEDS_HANDLER); break;
    44c0:	ce 01       	movw	r24, r28
    44c2:	01 96       	adiw	r24, 0x01	; 1
    44c4:	63 e0       	ldi	r22, 0x03	; 3
    44c6:	0e 94 3b 20 	call	0x4076	; 0x4076 <Stack_push>
    44ca:	80 93 9c 00 	sts	0x009C, r24
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
    44d4:	13 c0       	rjmp	.+38     	; 0x44fc <ReadButton_voidTask+0x1aa>
		case 2: LastState = CurrentState; CurrentState = Stack_pop(&Local_statesStack);
    44d6:	80 91 9c 00 	lds	r24, 0x009C
    44da:	80 93 9d 00 	sts	0x009D, r24
    44de:	ce 01       	movw	r24, r28
    44e0:	01 96       	adiw	r24, 0x01	; 1
    44e2:	0e 94 74 20 	call	0x40e8	; 0x40e8 <Stack_pop>
    44e6:	80 93 9c 00 	sts	0x009C, r24
		        RTOS_voidResumeTask(LEDS_HANDLER); HazardCounter = 0; break;
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
    44f0:	10 92 a0 00 	sts	0x00A0, r1
    44f4:	03 c0       	rjmp	.+6      	; 0x44fc <ReadButton_voidTask+0x1aa>
		default: RTOS_voidSuspendTask(LEDS_HANDLER);
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		}
	}

}
    44fc:	2b 96       	adiw	r28, 0x0b	; 11
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	f8 94       	cli
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	cd bf       	out	0x3d, r28	; 61
    4508:	cf 91       	pop	r28
    450a:	df 91       	pop	r29
    450c:	08 95       	ret

0000450e <LedsHandler_voidTask>:

void LedsHandler_voidTask(void)
{
    450e:	df 93       	push	r29
    4510:	cf 93       	push	r28
    4512:	00 d0       	rcall	.+0      	; 0x4514 <LedsHandler_voidTask+0x6>
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
	switch(CurrentState)
    4518:	80 91 9c 00 	lds	r24, 0x009C
    451c:	28 2f       	mov	r18, r24
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	3a 83       	std	Y+2, r19	; 0x02
    4522:	29 83       	std	Y+1, r18	; 0x01
    4524:	89 81       	ldd	r24, Y+1	; 0x01
    4526:	9a 81       	ldd	r25, Y+2	; 0x02
    4528:	81 30       	cpi	r24, 0x01	; 1
    452a:	91 05       	cpc	r25, r1
    452c:	11 f1       	breq	.+68     	; 0x4572 <LedsHandler_voidTask+0x64>
    452e:	29 81       	ldd	r18, Y+1	; 0x01
    4530:	3a 81       	ldd	r19, Y+2	; 0x02
    4532:	22 30       	cpi	r18, 0x02	; 2
    4534:	31 05       	cpc	r19, r1
    4536:	2c f4       	brge	.+10     	; 0x4542 <LedsHandler_voidTask+0x34>
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	9a 81       	ldd	r25, Y+2	; 0x02
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	61 f0       	breq	.+24     	; 0x4558 <LedsHandler_voidTask+0x4a>
    4540:	3e c0       	rjmp	.+124    	; 0x45be <LedsHandler_voidTask+0xb0>
    4542:	29 81       	ldd	r18, Y+1	; 0x01
    4544:	3a 81       	ldd	r19, Y+2	; 0x02
    4546:	22 30       	cpi	r18, 0x02	; 2
    4548:	31 05       	cpc	r19, r1
    454a:	01 f1       	breq	.+64     	; 0x458c <LedsHandler_voidTask+0x7e>
    454c:	89 81       	ldd	r24, Y+1	; 0x01
    454e:	9a 81       	ldd	r25, Y+2	; 0x02
    4550:	83 30       	cpi	r24, 0x03	; 3
    4552:	91 05       	cpc	r25, r1
    4554:	41 f1       	breq	.+80     	; 0x45a6 <LedsHandler_voidTask+0x98>
    4556:	33 c0       	rjmp	.+102    	; 0x45be <LedsHandler_voidTask+0xb0>
	{
	case States_e_OFF:
		RTOS_voidResumeTask(LEDS_OFF);
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		RTOS_voidSuspendTask(LEFT_FLASHER);
    455e:	84 e0       	ldi	r24, 0x04	; 4
    4560:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(RIGHT_FLASHER);
    4564:	85 e0       	ldi	r24, 0x05	; 5
    4566:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(HAZARD);
    456a:	83 e0       	ldi	r24, 0x03	; 3
    456c:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
    4570:	26 c0       	rjmp	.+76     	; 0x45be <LedsHandler_voidTask+0xb0>
		break;

	case States_e_LEFT:
		RTOS_voidSuspendTask(LEDS_OFF);
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidResumeTask(LEFT_FLASHER);
    4578:	84 e0       	ldi	r24, 0x04	; 4
    457a:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		RTOS_voidSuspendTask(RIGHT_FLASHER);
    457e:	85 e0       	ldi	r24, 0x05	; 5
    4580:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(HAZARD);
    4584:	83 e0       	ldi	r24, 0x03	; 3
    4586:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
    458a:	19 c0       	rjmp	.+50     	; 0x45be <LedsHandler_voidTask+0xb0>
		break;

	case States_e_RIGHT:
		RTOS_voidSuspendTask(LEDS_OFF);
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LEFT_FLASHER);
    4592:	84 e0       	ldi	r24, 0x04	; 4
    4594:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidResumeTask(RIGHT_FLASHER);
    4598:	85 e0       	ldi	r24, 0x05	; 5
    459a:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		RTOS_voidSuspendTask(HAZARD);
    459e:	83 e0       	ldi	r24, 0x03	; 3
    45a0:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
    45a4:	0c c0       	rjmp	.+24     	; 0x45be <LedsHandler_voidTask+0xb0>
		break;

	case States_e_HAZARD:
		RTOS_voidSuspendTask(LEDS_OFF);
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LEFT_FLASHER);
    45ac:	84 e0       	ldi	r24, 0x04	; 4
    45ae:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(RIGHT_FLASHER);
    45b2:	85 e0       	ldi	r24, 0x05	; 5
    45b4:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidResumeTask(HAZARD);
    45b8:	83 e0       	ldi	r24, 0x03	; 3
    45ba:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		break;
	}

}
    45be:	0f 90       	pop	r0
    45c0:	0f 90       	pop	r0
    45c2:	cf 91       	pop	r28
    45c4:	df 91       	pop	r29
    45c6:	08 95       	ret

000045c8 <__udivmodhi4>:
    45c8:	aa 1b       	sub	r26, r26
    45ca:	bb 1b       	sub	r27, r27
    45cc:	51 e1       	ldi	r21, 0x11	; 17
    45ce:	07 c0       	rjmp	.+14     	; 0x45de <__udivmodhi4_ep>

000045d0 <__udivmodhi4_loop>:
    45d0:	aa 1f       	adc	r26, r26
    45d2:	bb 1f       	adc	r27, r27
    45d4:	a6 17       	cp	r26, r22
    45d6:	b7 07       	cpc	r27, r23
    45d8:	10 f0       	brcs	.+4      	; 0x45de <__udivmodhi4_ep>
    45da:	a6 1b       	sub	r26, r22
    45dc:	b7 0b       	sbc	r27, r23

000045de <__udivmodhi4_ep>:
    45de:	88 1f       	adc	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	5a 95       	dec	r21
    45e4:	a9 f7       	brne	.-22     	; 0x45d0 <__udivmodhi4_loop>
    45e6:	80 95       	com	r24
    45e8:	90 95       	com	r25
    45ea:	bc 01       	movw	r22, r24
    45ec:	cd 01       	movw	r24, r26
    45ee:	08 95       	ret

000045f0 <__udivmodsi4>:
    45f0:	a1 e2       	ldi	r26, 0x21	; 33
    45f2:	1a 2e       	mov	r1, r26
    45f4:	aa 1b       	sub	r26, r26
    45f6:	bb 1b       	sub	r27, r27
    45f8:	fd 01       	movw	r30, r26
    45fa:	0d c0       	rjmp	.+26     	; 0x4616 <__udivmodsi4_ep>

000045fc <__udivmodsi4_loop>:
    45fc:	aa 1f       	adc	r26, r26
    45fe:	bb 1f       	adc	r27, r27
    4600:	ee 1f       	adc	r30, r30
    4602:	ff 1f       	adc	r31, r31
    4604:	a2 17       	cp	r26, r18
    4606:	b3 07       	cpc	r27, r19
    4608:	e4 07       	cpc	r30, r20
    460a:	f5 07       	cpc	r31, r21
    460c:	20 f0       	brcs	.+8      	; 0x4616 <__udivmodsi4_ep>
    460e:	a2 1b       	sub	r26, r18
    4610:	b3 0b       	sbc	r27, r19
    4612:	e4 0b       	sbc	r30, r20
    4614:	f5 0b       	sbc	r31, r21

00004616 <__udivmodsi4_ep>:
    4616:	66 1f       	adc	r22, r22
    4618:	77 1f       	adc	r23, r23
    461a:	88 1f       	adc	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	1a 94       	dec	r1
    4620:	69 f7       	brne	.-38     	; 0x45fc <__udivmodsi4_loop>
    4622:	60 95       	com	r22
    4624:	70 95       	com	r23
    4626:	80 95       	com	r24
    4628:	90 95       	com	r25
    462a:	9b 01       	movw	r18, r22
    462c:	ac 01       	movw	r20, r24
    462e:	bd 01       	movw	r22, r26
    4630:	cf 01       	movw	r24, r30
    4632:	08 95       	ret

00004634 <__prologue_saves__>:
    4634:	2f 92       	push	r2
    4636:	3f 92       	push	r3
    4638:	4f 92       	push	r4
    463a:	5f 92       	push	r5
    463c:	6f 92       	push	r6
    463e:	7f 92       	push	r7
    4640:	8f 92       	push	r8
    4642:	9f 92       	push	r9
    4644:	af 92       	push	r10
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	ca 1b       	sub	r28, r26
    465e:	db 0b       	sbc	r29, r27
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	09 94       	ijmp

0000466c <__epilogue_restores__>:
    466c:	2a 88       	ldd	r2, Y+18	; 0x12
    466e:	39 88       	ldd	r3, Y+17	; 0x11
    4670:	48 88       	ldd	r4, Y+16	; 0x10
    4672:	5f 84       	ldd	r5, Y+15	; 0x0f
    4674:	6e 84       	ldd	r6, Y+14	; 0x0e
    4676:	7d 84       	ldd	r7, Y+13	; 0x0d
    4678:	8c 84       	ldd	r8, Y+12	; 0x0c
    467a:	9b 84       	ldd	r9, Y+11	; 0x0b
    467c:	aa 84       	ldd	r10, Y+10	; 0x0a
    467e:	b9 84       	ldd	r11, Y+9	; 0x09
    4680:	c8 84       	ldd	r12, Y+8	; 0x08
    4682:	df 80       	ldd	r13, Y+7	; 0x07
    4684:	ee 80       	ldd	r14, Y+6	; 0x06
    4686:	fd 80       	ldd	r15, Y+5	; 0x05
    4688:	0c 81       	ldd	r16, Y+4	; 0x04
    468a:	1b 81       	ldd	r17, Y+3	; 0x03
    468c:	aa 81       	ldd	r26, Y+2	; 0x02
    468e:	b9 81       	ldd	r27, Y+1	; 0x01
    4690:	ce 0f       	add	r28, r30
    4692:	d1 1d       	adc	r29, r1
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	ed 01       	movw	r28, r26
    46a0:	08 95       	ret

000046a2 <_exit>:
    46a2:	f8 94       	cli

000046a4 <__stop_program>:
    46a4:	ff cf       	rjmp	.-2      	; 0x46a4 <__stop_program>
